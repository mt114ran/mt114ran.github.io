1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"qepat1HgROqLjfWdf0ONn","p":"","c":["","blog","claude-code-gemini-cli-collaboration",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","claude-code-gemini-cli-collaboration","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","claude-code-gemini-cli-collaboration","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","pgOm1mkqDHigFanwY0VLs",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:T99b6,<h1 id="claude-codeとgemini-cliを連携させて相談しながら開発する仕組みを構築する">Claude CodeとGemini CLIを連携させて相談しながら開発する仕組みを構築する</h1>
<h2 id="はじめに">はじめに</h2>
<p>本記事では、Anthropic社のClaude CodeとGoogle社のGemini CLIという2つのAI開発ツールを連携させ、相互に相談しながら開発を進める仕組みの構築方法について解説します。</p>
<p>この取り組みは、<a href="https://x.com/masa_oka108/status/1938170385205498186">X.com（旧Twitter）でオカムラさん（@masa_oka108）が投稿された内容</a>に触発されて実装したものです。異なるAIエージェントが協力することで、より高品質な開発が可能になるという興味深いアプローチです。</p>
<h3 id="この記事で学べること">この記事で学べること</h3>
<ul>
<li>複数のAI開発ツールを連携させる方法</li>
<li>AIツールのコンテキスト管理の仕組み</li>
<li>セキュアな環境変数管理の実践方法</li>
<li>自動化スクリプトの作成手法</li>
</ul>
<h3 id="前提知識">前提知識</h3>
<ul>
<li>基本的なコマンドライン操作</li>
<li>Node.jsの基礎知識（npmコマンドが使える程度）</li>
<li>環境変数の概念</li>
</ul>
<h2 id="対応した内容">対応した内容</h2>
<ol>
<li>Gemini CLIのインストールと環境構築</li>
<li>Claude CodeとGemini CLIの相互参照設定</li>
<li>連携用のBashスクリプト作成</li>
<li>実行環境のテストと検証</li>
</ol>
<h2 id="使用した技術とツール">使用した技術とツール</h2>
<h3 id="claude-code">Claude Code</h3>
<p>Claude Codeは、Anthropic社が提供するCLI（Command Line Interface）ベースのAI開発アシスタントです。</p>
<h4 id="claude-codeの特徴">Claude Codeの特徴</h4>
<ul>
<li><strong>CLI（コマンドラインインターフェース）</strong>：ターミナルから直接操作できるツール</li>
<li><strong>対話的な開発支援</strong>：質問に答えたり、コードを生成したりしてくれる</li>
<li><strong>ファイル操作が可能</strong>：プロジェクト内のファイルを読み書きできる</li>
<li><strong>複数ファイルの同時編集</strong>：関連するファイルをまとめて修正可能</li>
</ul>
<h3 id="gemini-cli">Gemini CLI</h3>
<p>Gemini CLIは、2025年6月にGoogleがオープンソース（Apache 2.0ライセンス）で公開したAIエージェントです。</p>
<h4 id="gemini-cliの特徴">Gemini CLIの特徴</h4>
<ul>
<li><strong>無料枠が充実</strong>：1分あたり60リクエスト、1日あたり1000リクエストまで無料</li>
<li><strong>オープンソース</strong>：誰でもソースコードを確認・改良できる</li>
<li><strong>Google AIの技術を活用</strong>：Geminiモデルの能力をCLIから利用可能</li>
<li><strong>カスタマイズ可能</strong>：プロジェクトごとに設定をカスタマイズできる</li>
</ul>
<h3 id="なぜ2つのaiツールを連携させるのか">なぜ2つのAIツールを連携させるのか？</h3>
<ol>
<li>
<p><strong>視点の多様性</strong></p>
<ul>
<li>各AIモデルには得意・不得意がある</li>
<li>複数の視点から問題を検討できる</li>
</ul>
</li>
<li>
<p><strong>相互チェック機能</strong></p>
<ul>
<li>一方のAIが見落とした点を、もう一方が指摘できる</li>
<li>より堅牢なコードの実装が可能</li>
</ul>
</li>
<li>
<p><strong>学習効果</strong></p>
<ul>
<li>AIツール同士の「対話」から新しい知見を得られる</li>
<li>ベストプラクティスの発見につながる</li>
</ul>
</li>
</ol>
<h2 id="実装手順">実装手順</h2>
<h3 id="1-nodejsのバージョン確認とgemini-cliのインストール">1. Node.jsのバージョン確認とGemini CLIのインストール</h3>
<p>まず、Gemini CLIの動作要件であるNode.js v20以上がインストールされているか確認しました。</p>
<h4 id="nodejsとは">Node.jsとは？</h4>
<p>Node.jsは、JavaScriptをサーバーサイドで実行できる環境です。多くの開発ツールがNode.js上で動作します。</p>
<h4 id="バージョン確認方法">バージョン確認方法</h4>
<pre><code class="language-bash">node --version
# v20.5.0
</code></pre>
<p><strong>重要</strong>：もしNode.jsがインストールされていない、またはバージョンが古い場合は、<a href="https://nodejs.org/">Node.js公式サイト</a>からダウンロードするか、以下のようなバージョン管理ツールを使用してください：</p>
<ul>
<li><strong>nvm（Node Version Manager）</strong>：複数のNode.jsバージョンを管理できるツール</li>
<li><strong>nodenv</strong>：rbenvに似たNode.jsバージョン管理ツール</li>
</ul>
<h4 id="gemini-cliのインストール">Gemini CLIのインストール</h4>
<p>要件を満たしていることを確認後、Gemini CLIをグローバルインストールしました。</p>
<pre><code class="language-bash">npm install -g @google/gemini-cli
</code></pre>
<p><strong>用語解説</strong>：</p>
<ul>
<li><strong>npm</strong>：Node Package Manager の略。Node.jsのパッケージ管理ツール</li>
<li><strong>-g フラグ</strong>：グローバル（システム全体）にインストールすることを意味する</li>
<li><strong>@google/gemini-cli</strong>：Googleが公開しているGemini CLIパッケージ</li>
</ul>
<p>インストール中に<code>undici</code>パッケージのエンジン要件に関する警告が表示されましたが、Gemini CLI自体は正常にインストールされました。</p>
<h4 id="インストール確認">インストール確認</h4>
<pre><code class="language-bash">gemini --version
# 0.1.17
</code></pre>
<p>このコマンドでバージョンが表示されれば、インストール成功です。</p>
<h3 id="2-claudemdへの連携設定追加">2. CLAUDE.mdへの連携設定追加</h3>
<h4 id="claudemdファイルとは">CLAUDE.mdファイルとは？</h4>
<p>CLAUDE.mdは、Claude Codeがプロジェクトのコンテキスト（文脈）を理解するための設定ファイルです。このファイルに書かれた内容は、Claude Codeが常に参照し、その指示に従って動作します。</p>
<p><strong>ポイント</strong>：</p>
<ul>
<li>プロジェクトのルートディレクトリに配置</li>
<li>Markdown形式で記述</li>
<li>プロジェクト固有のルールや設定を定義</li>
</ul>
<p>Claude Codeは<code>CLAUDE.md</code>ファイルを自動的に読み込み、プロジェクト固有の設定として利用します。このファイルに、Gemini CLIとの連携ルールを追加しました。</p>
<h4 id="claudemdに追加した内容の要点">CLAUDE.mdに追加した内容の要点：</h4>
<ol>
<li>
<p><strong>連携の目的</strong></p>
<ul>
<li>異なるAIの視点を取り入れた多角的な問題解決</li>
<li>各AIの得意分野を活かした効率的な開発</li>
<li>エラーや設計の相互チェックによる品質向上</li>
</ul>
</li>
<li>
<p><strong>連携方法</strong></p>
<ul>
<li>相談内容を<code>.claude/gemini-consultations/</code>ディレクトリに保存</li>
<li>Geminiからの回答を<code>.claude/gemini-responses/</code>に保存</li>
<li>ファイル名形式：<code>YYYY-MM-DD-HH-mm-ss-topic.md</code></li>
</ul>
</li>
<li>
<p><strong>相談すべきケース</strong></p>
<ul>
<li>アーキテクチャの設計判断</li>
<li>複雑なアルゴリズムの実装方法</li>
<li>パフォーマンス最適化</li>
<li>セキュリティ上の懸念事項</li>
</ul>
</li>
</ol>
<h3 id="3-geminimdファイルの作成">3. GEMINI.mdファイルの作成</h3>
<p>Gemini CLIもプロジェクトごとにカスタム指示を設定できる<code>GEMINI.md</code>ファイルをサポートしています。このファイルを作成し、Claude Codeとの連携方法を記載しました。</p>
<h4 id="geminimdの主な内容">GEMINI.mdの主な内容：</h4>
<ul>
<li>日本語での回答指示</li>
<li>Claude Codeからの相談への対応方法</li>
<li>技術的正確性と実装可能性の重視</li>
<li>セキュリティリスクの指摘</li>
</ul>
<h3 id="4-連携用bashスクリプトの作成">4. 連携用Bashスクリプトの作成</h3>
<p>AI間の連携を簡単にするため、<code>consult-gemini.sh</code>というヘルパースクリプトを作成しました。</p>
<h4 id="bashスクリプトとは">Bashスクリプトとは？</h4>
<p>Bashスクリプトは、複数のコマンドをまとめて実行できるプログラムです。手動で何度も同じコマンドを入力する代わりに、スクリプトを実行するだけで自動化できます。</p>
<h4 id="スクリプトの基本構造">スクリプトの基本構造</h4>
<pre><code class="language-bash">#!/bin/bash
# ↑ シェバン（shebang）：このスクリプトをbashで実行することを指定

# 使用例：
# ./consult-gemini.sh -t "API設計" -q "RESTfulなエンドポイント設計について相談したい"
# ./consult-gemini.sh -t "パフォーマンス" -q "DBクエリの最適化" -f "src/db/queries.js"
</code></pre>
<p><strong>コマンドラインオプションの説明</strong>：</p>
<ul>
<li><code>-t</code>：トピック（相談内容のカテゴリ）を指定</li>
<li><code>-q</code>：質問内容を指定</li>
<li><code>-f</code>：参照したいファイルのパスを指定（オプション）</li>
</ul>
<p>このスクリプトの機能：</p>
<ul>
<li>トピックと質問を指定して相談内容を自動生成</li>
<li>関連ファイルの内容を自動的に含める</li>
<li>Gemini CLIを実行して回答を取得</li>
<li>相談と回答を適切なディレクトリに保存</li>
</ul>
<h4 id="実際のスクリプト内容簡略版">実際のスクリプト内容（簡略版）</h4>
<pre><code class="language-bash">#!/bin/bash

# 変数の定義
TIMESTAMP=$(date +"%Y-%m-%d-%H-%M-%S")
CONSULT_DIR="~/.claude/gemini-consultations"
RESPONSE_DIR="~/.claude/gemini-responses"

# ディレクトリが存在しない場合は作成
mkdir -p "$CONSULT_DIR" "$RESPONSE_DIR"

# 相談内容をファイルに保存
echo "# 相談: $TOPIC" > "$CONSULT_DIR/$TIMESTAMP-$TOPIC.md"
echo "$QUESTION" >> "$CONSULT_DIR/$TIMESTAMP-$TOPIC.md"

# Gemini CLIを実行して回答を取得
gemini -p "$(cat $CONSULT_DIR/$TIMESTAMP-$TOPIC.md)" > "$RESPONSE_DIR/$TIMESTAMP-$TOPIC.md"
</code></pre>
<h2 id="コンテキストの管理について">コンテキストの管理について</h2>
<h3 id="コンテキストとは">コンテキストとは？</h3>
<p>「コンテキスト」とは、AIツールが理解すべき「文脈」や「背景情報」のことです。人間同士の会話でも、相手の背景を知っているかどうかで伝わり方が変わるように、AIツールも適切なコンテキストがあることで、より的確な支援ができます。</p>
<h3 id="claude-codeのコンテキスト管理">Claude Codeのコンテキスト管理</h3>
<p>Claude Codeは、プロジェクトのコンテキストを以下の方法で管理します：</p>
<h4 id="1-グローバル設定全プロジェクト共通">1. グローバル設定（全プロジェクト共通）</h4>
<ul>
<li><strong>場所</strong>: <code>~/.claude/CLAUDE.md</code></li>
<li><strong>用途</strong>: すべてのプロジェクトで共通して適用したい設定</li>
<li><strong>例</strong>: 日本語での回答、セキュリティ観点の注意、タスク完了時の通知設定など</li>
</ul>
<h4 id="2-プロジェクト固有の設定">2. プロジェクト固有の設定</h4>
<ul>
<li><strong>場所</strong>: プロジェクトルートの <code>CLAUDE.md</code></li>
<li><strong>用途</strong>: 特定のプロジェクトでのみ適用したい設定</li>
<li><strong>例</strong>: プロジェクト固有のコーディング規約、使用ライブラリ、開発コマンドなど</li>
</ul>
<h4 id="3-サブディレクトリの設定">3. サブディレクトリの設定</h4>
<ul>
<li><strong>場所</strong>: サブディレクトリ内の <code>CLAUDE.md</code></li>
<li><strong>用途</strong>: 特定のディレクトリ配下でのみ適用したい設定</li>
<li><strong>例</strong>: frontend/とbackend/で異なる規約を適用する場合</li>
</ul>
<p><strong>重要</strong>: Claude Codeは現在のディレクトリから上位に向かって再帰的に<code>CLAUDE.md</code>を探索し、見つかったものをすべて読み込みます。より具体的な（深い階層の）設定が優先されます。</p>
<h3 id="gemini-cliのコンテキスト管理">Gemini CLIのコンテキスト管理</h3>
<p>Gemini CLIも同様の仕組みを持っています：</p>
<h4 id="1-グローバル設定">1. グローバル設定</h4>
<ul>
<li><strong>場所</strong>: <code>~/.gemini/settings.json</code>（認証情報など）</li>
<li><strong>用途</strong>: APIキー、テーマ設定など</li>
</ul>
<h4 id="2-プロジェクト固有の設定-1">2. プロジェクト固有の設定</h4>
<ul>
<li><strong>場所</strong>: プロジェクトルートの <code>GEMINI.md</code></li>
<li><strong>用途</strong>: プロジェクト固有のカスタム指示</li>
</ul>
<h3 id="実際の設定例">実際の設定例</h3>
<h4 id="グローバル設定の例claudeclaudemd">グローバル設定の例（~/.claude/CLAUDE.md）</h4>
<pre><code class="language-markdown"># 全プロジェクト共通設定
- 回答は日本語で行うこと
- セキュリティに注意すること
- タスク完了時は通知を送ること
</code></pre>
<h4 id="プロジェクト設定の例プロジェクトルートclaudemd">プロジェクト設定の例（プロジェクトルート/CLAUDE.md）</h4>
<pre><code class="language-markdown"># このプロジェクトの設定
- React 18とTypeScript 5を使用
- ESLintとPrettierの設定に従うこと
- テストはVitestで実行すること
</code></pre>
<h4 id="サブディレクトリ設定の例frontendclaudemd">サブディレクトリ設定の例（frontend/CLAUDE.md）</h4>
<pre><code class="language-markdown"># フロントエンド固有の設定
- Material-UIを使用したコンポーネント設計
- アクセシビリティを重視すること
</code></pre>
<h2 id="ぶつかった問題点と解決方法">ぶつかった問題点と解決方法</h2>
<h3 id="問題1gemini-cliの認証エラー">問題1：Gemini CLIの認証エラー</h3>
<p>初回実行時に以下のエラーが発生しました：</p>
<pre><code>Please set an Auth method in your /Users/kometomo/.gemini/settings.json or specify one of the following environment variables before running: GEMINI_API_KEY, GOOGLE_GENAI_USE_VERTEXAI, GOOGLE_GENAI_USE_GCA
</code></pre>
<h4 id="エラーの意味">エラーの意味</h4>
<p>このエラーは「認証方法が設定されていません」という意味です。Gemini CLIがGoogle AIのサービスにアクセスするには、あなたが誰なのかを証明する必要があります。</p>
<h3 id="解決方法">解決方法</h3>
<p>Gemini CLIは初回起動時に認証設定が必要です。以下の2つの方法があります：</p>
<h4 id="認証とは">認証とは？</h4>
<p>認証（Authentication）は、「あなたが本当にあなたであること」を証明するプロセスです。Webサービスにログインする際のユーザー名とパスワードのようなものです。</p>
<ol>
<li>
<p><strong>インタラクティブモード（推奨）</strong></p>
<pre><code class="language-bash">gemini
</code></pre>
<p>初回起動時にテーマ選択と認証方法の選択画面が表示され、「Login with Google」を選択するとブラウザが自動的に開きます。</p>
</li>
<li>
<p><strong>APIキーを使用</strong>
<a href="https://aistudio.google.com/">Google AI Studio</a>でAPIキーを取得し、以下のいずれかの方法で設定します：</p>
<p><strong>設定ファイルを使用</strong></p>
<pre><code class="language-json">{
  "authMethod": "API_KEY",
  "apiKey": "YOUR_API_KEY_HERE"
}
</code></pre>
<p><strong>環境変数を使用</strong></p>
<pre><code class="language-bash">export GEMINI_API_KEY="your-api-key-here"
</code></pre>
</li>
</ol>
<h3 id="問題2gemini-cliの日本語対応">問題2：Gemini CLIの日本語対応</h3>
<p>初回実行時、Geminiが英語で応答する問題が発生しました。</p>
<h3 id="解決方法-1">解決方法</h3>
<p>スクリプト内のプロンプトに「日本語で」という指示を追加することで解決しました。これにより、Geminiは常に日本語で技術的なアドバイスを返すようになりました。</p>
<h3 id="問題3認証情報の管理">問題3：認証情報の管理</h3>
<p>APIキーをスクリプトに直接記載するとセキュリティリスクがあります。</p>
<h3 id="解決方法-2">解決方法</h3>
<p>環境変数を使用してAPIキーを管理し、スクリプトから参照する方式を採用しました。また、永続的な設定方法についてドキュメント化しました。</p>
<h2 id="実際の連携動作例">実際の連携動作例</h2>
<p>連携スクリプトを使用して、REST API設計について相談した実例を紹介します。</p>
<h3 id="相談内容">相談内容</h3>
<pre><code class="language-bash">GEMINI_API_KEY="your-api-key" ./consult-gemini.sh \
  -t "REST API設計" \
  -q "ユーザー管理APIのエンドポイント設計についてアドバイスをください。"
</code></pre>
<h3 id="geminiからの回答抜粋">Geminiからの回答（抜粋）</h3>
<p>Geminiは以下のような詳細な技術アドバイスを返してくれました：</p>
<ol>
<li>
<p><strong>エンドポイント設計</strong></p>
<ul>
<li>RESTfulな設計原則に基づいたCRUD操作の実装方法</li>
<li>HTTPメソッドとステータスコードの適切な使用</li>
<li>UUIDを使用したセキュアなリソースID設計</li>
</ul>
</li>
<li>
<p><strong>セキュリティ対策</strong></p>
<ul>
<li>JWT/OAuth 2.0による認証・認可の実装</li>
<li>入力値バリデーションの重要性</li>
<li>レートリミットの導入方法</li>
</ul>
</li>
<li>
<p><strong>パフォーマンス最適化</strong></p>
<ul>
<li>ページネーションの実装</li>
<li>フィルタリング、ソート機能の提供</li>
<li>ETagを使用したキャッシュ戦略</li>
</ul>
</li>
</ol>
<p>このように、具体的で実装可能な提案を得ることができました。</p>
<h2 id="実装のポイント">実装のポイント</h2>
<h3 id="1-ディレクトリ構造の設計">1. ディレクトリ構造の設計</h3>
<p>相談履歴を体系的に管理するため、以下のディレクトリ構造を採用しました：</p>
<pre><code>~/.claude/
├── gemini-consultations/  # Claude→Geminiへの相談
└── gemini-responses/      # Geminiからの回答
</code></pre>
<h3 id="2-ファイル名の工夫">2. ファイル名の工夫</h3>
<p>タイムスタンプとトピックを組み合わせたファイル名により、後から参照しやすい形式にしました：</p>
<ul>
<li>例：<code>2025-08-05-14-30-00-api-design.md</code></li>
</ul>
<h3 id="3-セキュリティへの配慮">3. セキュリティへの配慮</h3>
<ul>
<li>秘匿情報や個人情報を相談内容に含めないよう注意喚起</li>
<li>相談履歴のアクセス権限を適切に設定</li>
</ul>
<h2 id="セキュリティに関する重要な注意事項">セキュリティに関する重要な注意事項</h2>
<h3 id="apiキーとは">APIキーとは？</h3>
<p>APIキーは、サービスを利用するための「パスワード」のようなものです。これが漏れると、他人があなたのアカウントでサービスを使用できてしまい、料金が発生する可能性があります。</p>
<h3 id="apiキーの管理">APIキーの管理</h3>
<p><strong>重要</strong>: APIキーは機密情報です。以下の点に必ず注意してください：</p>
<ol>
<li>
<p><strong>APIキーを直接コードに記載しない</strong></p>
<ul>
<li>GitHubなどにコミットすると、全世界に公開される危険があります</li>
<li>必ず環境変数や設定ファイルで管理してください</li>
</ul>
</li>
<li>
<p><strong><code>.gitignore</code>への追加</strong></p>
<pre><code># API keys and secrets
.env
.env.local
.gemini/settings.json
</code></pre>
</li>
<li>
<p><strong>環境変数の安全な管理</strong></p>
<ul>
<li>本番環境では、AWS Secrets Manager、HashiCorp Vaultなどの専門ツールを使用</li>
<li>ローカル開発では、<code>.env</code>ファイルを使用し、<code>.gitignore</code>に必ず追加</li>
</ul>
</li>
</ol>
<h3 id="相談内容のセキュリティ">相談内容のセキュリティ</h3>
<p>AIに相談する際は、以下の情報を含めないよう注意してください：</p>
<ul>
<li>個人情報（氏名、メールアドレス、電話番号など）</li>
<li>認証情報（パスワード、APIキー、トークンなど）</li>
<li>機密性の高いビジネスロジック</li>
<li>顧客データ</li>
</ul>
<h2 id="実務での活用例">実務での活用例</h2>
<p>実際の開発現場で、この連携システムをどのように活用できるか、具体的な例を紹介します。</p>
<h3 id="1-コードレビューの自動化">1. コードレビューの自動化</h3>
<pre><code class="language-bash"># 新しく実装した機能についてGeminiに意見を求める
./consult-gemini.sh -t "コードレビュー" \
  -q "このAPIエンドポイントの実装について、セキュリティとパフォーマンスの観点から意見をください" \
  -f "src/api/users.js"
</code></pre>
<h3 id="2-アーキテクチャ設計の相談">2. アーキテクチャ設計の相談</h3>
<pre><code class="language-bash"># マイクロサービス設計について相談
./consult-gemini.sh -t "アーキテクチャ" \
  -q "認証サービスを分離する際の考慮点について教えてください"
</code></pre>
<h3 id="3-エラー解決の支援">3. エラー解決の支援</h3>
<pre><code class="language-bash"># 解決困難なエラーについて相談
./consult-gemini.sh -t "エラー解決" \
  -q "このTypeScriptのコンパイルエラーの原因と解決方法を教えてください" \
  -f "src/types/index.ts" -f "tsconfig.json"
</code></pre>
<h2 id="コンテキスト管理のベストプラクティス">コンテキスト管理のベストプラクティス</h2>
<h3 id="効果的な設定ファイルの使い分け">効果的な設定ファイルの使い分け</h3>
<ol>
<li>
<p><strong>グローバル設定（~/.claude/CLAUDE.md）に含めるべき内容</strong></p>
<ul>
<li>言語設定（日本語での回答など）</li>
<li>一般的なセキュリティガイドライン</li>
<li>共通のコーディング規約</li>
<li>個人的な作業習慣（通知設定など）</li>
</ul>
</li>
<li>
<p><strong>プロジェクト設定（プロジェクトルート/CLAUDE.md）に含めるべき内容</strong></p>
<ul>
<li>プロジェクトの技術スタック</li>
<li>ビルド・テストコマンド</li>
<li>デプロイ手順</li>
<li>プロジェクト固有のコーディング規約</li>
</ul>
</li>
<li>
<p><strong>サブディレクトリ設定（subdirectory/CLAUDE.md）に含めるべき内容</strong></p>
<ul>
<li>モジュール固有の設計方針</li>
<li>特定領域のビジネスロジック</li>
<li>サブシステム固有の制約事項</li>
</ul>
</li>
</ol>
<h3 id="設定の継承と優先順位">設定の継承と優先順位</h3>
<pre><code>~/.claude/CLAUDE.md（最も低い優先度）
    ↓
/project/CLAUDE.md
    ↓
/project/frontend/CLAUDE.md（最も高い優先度）
</code></pre>
<p>より深い階層の設定が、上位の設定を上書きします。これにより、柔軟かつ階層的な設定管理が可能になります。</p>
<h2 id="トラブルシューティング">トラブルシューティング</h2>
<h3 id="よくある問題と解決方法">よくある問題と解決方法</h3>
<h4 id="1-コマンドが見つからない">1. コマンドが見つからない</h4>
<pre><code class="language-bash">command not found: gemini
</code></pre>
<p><strong>解決方法</strong>：</p>
<ul>
<li>パスが通っているか確認：<code>echo $PATH</code></li>
<li>npmのグローバルパスを確認：<code>npm config get prefix</code></li>
<li>シェルの設定ファイル（.bashrc、.zshrcなど）にパスを追加</li>
</ul>
<h4 id="2-権限エラー">2. 権限エラー</h4>
<pre><code class="language-bash">permission denied
</code></pre>
<p><strong>解決方法</strong>：</p>
<ul>
<li>スクリプトに実行権限を付与：<code>chmod +x consult-gemini.sh</code></li>
<li>ファイルの所有者を確認：<code>ls -la</code></li>
</ul>
<h4 id="3-apiキーが無効">3. APIキーが無効</h4>
<pre><code>Invalid API key
</code></pre>
<p><strong>解決方法</strong>：</p>
<ul>
<li>APIキーが正しくコピーされているか確認</li>
<li>APIキーの前後に余分なスペースがないか確認</li>
<li>Google AI Studioで新しいキーを生成</li>
</ul>
<h2 id="実装時のチェックリスト">実装時のチェックリスト</h2>
<p>この仕組みを実装する際の確認事項をまとめました：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> Node.js v20以上がインストールされている</li>
<li class="task-list-item"><input type="checkbox" disabled> Gemini CLIがインストールされている</li>
<li class="task-list-item"><input type="checkbox" disabled> APIキーを取得している</li>
<li class="task-list-item"><input type="checkbox" disabled> .gitignoreにAPIキー関連ファイルを追加している</li>
<li class="task-list-item"><input type="checkbox" disabled> CLAUDE.mdファイルを作成している</li>
<li class="task-list-item"><input type="checkbox" disabled> GEMINI.mdファイルを作成している</li>
<li class="task-list-item"><input type="checkbox" disabled> 連携用ディレクトリを作成している</li>
<li class="task-list-item"><input type="checkbox" disabled> スクリプトに実行権限を付与している</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>Claude CodeとGemini CLIを連携させることで、以下のメリットが得られました：</p>
<ol>
<li><strong>多角的な視点</strong>：異なるAIモデルの知見を組み合わせることで、より良い解決策を見つけやすくなる</li>
<li><strong>品質向上</strong>：相互チェックによりコードの品質が向上</li>
<li><strong>学習効果</strong>：AIエージェント間の「議論」を見ることで、新しい観点や知識を得られる</li>
<li><strong>自動化</strong>：スクリプトにより連携作業が効率化</li>
<li><strong>柔軟な設定管理</strong>：階層的なコンテキスト管理により、プロジェクトごとに最適な環境を構築</li>
</ol>
<p>今後は、この仕組みをさらに発展させ、複数のAIエージェントが自律的に協調して開発を進める環境の構築を目指したいと考えています。</p>
<h3 id="今回学んだ重要なポイント">今回学んだ重要なポイント</h3>
<ul>
<li>AIツールのコンテキスト管理は階層的に行うことで、柔軟性と保守性を両立できる</li>
<li>セキュリティ（特にAPIキー管理）は最初から考慮することが重要</li>
<li>異なるAIモデルを連携させる際は、共通のインターフェースを設計することが効果的</li>
<li>自動化スクリプトにより、複雑な連携も簡単に実行できるようになる</li>
</ul>
<h2 id="次のステップ">次のステップ</h2>
<p>この記事で紹介した基本的な連携の仕組みを、さらに発展させるアイデア：</p>
<h3 id="1-複数aiのオーケストレーション">1. 複数AIのオーケストレーション</h3>
<ul>
<li>3つ以上のAIツールを連携させる</li>
<li>各AIの得意分野に応じたタスク割り当て</li>
<li>統合的な結果の集約</li>
</ul>
<h3 id="2-自動テスト生成">2. 自動テスト生成</h3>
<ul>
<li>AI間の対話からテストケースを自動生成</li>
<li>エッジケースの発見とテスト化</li>
</ul>
<h3 id="3-リアルタイムコラボレーション">3. リアルタイムコラボレーション</h3>
<ul>
<li>WebSocketを使用したリアルタイム連携</li>
<li>ライブコーディング中のAIサポート</li>
</ul>
<h3 id="4-学習ログの分析">4. 学習ログの分析</h3>
<ul>
<li>AI間の対話ログからパターンを抽出</li>
<li>ベストプラクティスの自動ドキュメント化</li>
</ul>
<h2 id="完全版consult-geminishスクリプト">完全版：consult-gemini.shスクリプト</h2>
<p>記事内で紹介した連携スクリプトの完全版を以下に示します。このスクリプトをコピーして使用できます。</p>
<pre><code class="language-bash">#!/bin/bash

# consult-gemini.sh - Claude CodeからGemini CLIに相談するためのヘルパースクリプト
# 
# 使用方法:
#   ./consult-gemini.sh -t "トピック" -q "質問内容" [-f "ファイルパス"]
#
# オプション:
#   -t  トピック（必須）
#   -q  質問内容（必須）
#   -f  参照ファイル（オプション、複数指定可能）
#   -h  ヘルプを表示

set -e  # エラーが発生したら即座に終了

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ディレクトリ設定
CONSULT_DIR="$HOME/.claude/gemini-consultations"
RESPONSE_DIR="$HOME/.claude/gemini-responses"

# ヘルプ表示関数
show_help() {
    echo "使用方法: $0 -t \"トピック\" -q \"質問内容\" [-f \"ファイルパス\"]"
    echo ""
    echo "オプション:"
    echo "  -t  トピック（必須）"
    echo "  -q  質問内容（必須）"
    echo "  -f  参照ファイル（オプション、複数指定可能）"
    echo "  -h  このヘルプを表示"
    echo ""
    echo "例:"
    echo "  $0 -t \"API設計\" -q \"RESTfulなエンドポイント設計について相談したい\""
    echo "  $0 -t \"パフォーマンス\" -q \"DBクエリの最適化\" -f \"src/db/queries.js\""
    exit 0
}

# 引数解析
TOPIC=""
QUESTION=""
FILES=()

while getopts "t:q:f:h" opt; do
    case $opt in
        t) TOPIC="$OPTARG";;
        q) QUESTION="$OPTARG";;
        f) FILES+=("$OPTARG");;
        h) show_help;;
        \?) echo "無効なオプション: -$OPTARG" >&#x26;2; exit 1;;
    esac
done

# 必須引数チェック
if [ -z "$TOPIC" ] || [ -z "$QUESTION" ]; then
    echo -e "${RED}エラー: トピック(-t)と質問(-q)は必須です${NC}"
    show_help
fi

# ディレクトリ作成
mkdir -p "$CONSULT_DIR" "$RESPONSE_DIR"

# タイムスタンプ生成
TIMESTAMP=$(date +"%Y-%m-%d-%H-%M-%S")
FILENAME_BASE="${TIMESTAMP}-$(echo "$TOPIC" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')"

# 相談内容ファイルの作成
CONSULT_FILE="$CONSULT_DIR/${FILENAME_BASE}.md"
RESPONSE_FILE="$RESPONSE_DIR/${FILENAME_BASE}.md"

echo "# Claude CodeからGeminiへの相談" > "$CONSULT_FILE"
echo "" >> "$CONSULT_FILE"
echo "## トピック: $TOPIC" >> "$CONSULT_FILE"
echo "" >> "$CONSULT_FILE"
echo "## 質問内容" >> "$CONSULT_FILE"
echo "$QUESTION" >> "$CONSULT_FILE"
echo "" >> "$CONSULT_FILE"

# ファイルが指定されている場合は内容を追加
if [ ${#FILES[@]} -gt 0 ]; then
    echo "## 参照ファイル" >> "$CONSULT_FILE"
    echo "" >> "$CONSULT_FILE"
    
    for file in "${FILES[@]}"; do
        if [ -f "$file" ]; then
            echo "### $file" >> "$CONSULT_FILE"
            echo '```' >> "$CONSULT_FILE"
            cat "$file" >> "$CONSULT_FILE"
            echo '```' >> "$CONSULT_FILE"
            echo "" >> "$CONSULT_FILE"
        else
            echo -e "${YELLOW}警告: ファイルが見つかりません: $file${NC}"
        fi
    done
fi

# プロンプト追加
echo "" >> "$CONSULT_FILE"
echo "---" >> "$CONSULT_FILE"
echo "" >> "$CONSULT_FILE"
echo "上記の内容について、技術的なアドバイスを日本語でお願いします。" >> "$CONSULT_FILE"
echo "特に以下の観点から検討してください：" >> "$CONSULT_FILE"
echo "1. 実装の妥当性" >> "$CONSULT_FILE"
echo "2. パフォーマンスへの影響" >> "$CONSULT_FILE"
echo "3. セキュリティ上の懸念" >> "$CONSULT_FILE"
echo "4. より良い代替案" >> "$CONSULT_FILE"

echo -e "${GREEN}相談内容を作成しました: $CONSULT_FILE${NC}"

# Gemini CLIの実行
echo -e "${YELLOW}Gemini CLIを実行中...${NC}"

# APIキーの確認
if [ -z "$GEMINI_API_KEY" ]; then
    # 環境変数が設定されていない場合は設定ファイルを確認
    if [ -f "$HOME/.gemini/settings.json" ]; then
        echo -e "${GREEN}設定ファイルからAPIキーを読み込みます${NC}"
    else
        echo -e "${RED}エラー: GEMINI_API_KEYが設定されていません${NC}"
        echo "以下のいずれかの方法で設定してください："
        echo "1. export GEMINI_API_KEY='your-api-key'"
        echo "2. gemini コマンドを実行して初期設定を行う"
        exit 1
    fi
fi

# Geminiに相談を送信
if command -v gemini &#x26;> /dev/null; then
    # 一時的な応答ファイルを作成
    TEMP_RESPONSE=$(mktemp)
    
    # Geminiを実行（エラーハンドリング付き）
    if gemini -p "$(cat "$CONSULT_FILE")" > "$TEMP_RESPONSE" 2>&#x26;1; then
        # 成功した場合、応答を整形して保存
        echo "# Geminiからの回答" > "$RESPONSE_FILE"
        echo "" >> "$RESPONSE_FILE"
        echo "相談日時: $(date '+%Y-%m-%d %H:%M:%S')" >> "$RESPONSE_FILE"
        echo "トピック: $TOPIC" >> "$RESPONSE_FILE"
        echo "" >> "$RESPONSE_FILE"
        echo "---" >> "$RESPONSE_FILE"
        echo "" >> "$RESPONSE_FILE"
        cat "$TEMP_RESPONSE" >> "$RESPONSE_FILE"
        
        echo -e "${GREEN}回答を保存しました: $RESPONSE_FILE${NC}"
        echo ""
        echo "回答の概要:"
        echo "----------------------------------------"
        # 最初の数行を表示
        head -n 20 "$TEMP_RESPONSE"
        echo "..."
        echo "----------------------------------------"
        echo ""
        echo -e "${GREEN}完全な回答は $RESPONSE_FILE で確認できます${NC}"
    else
        echo -e "${RED}エラー: Gemini CLIの実行に失敗しました${NC}"
        echo "エラー内容:"
        cat "$TEMP_RESPONSE"
        rm -f "$TEMP_RESPONSE"
        exit 1
    fi
    
    rm -f "$TEMP_RESPONSE"
else
    echo -e "${RED}エラー: gemini コマンドが見つかりません${NC}"
    echo "以下のコマンドでインストールしてください："
    echo "  npm install -g @google/gemini-cli"
    exit 1
fi

# 履歴の表示
echo ""
echo -e "${GREEN}相談履歴:${NC}"
echo "相談内容: $CONSULT_FILE"
echo "回答: $RESPONSE_FILE"

# 相談内容をクリップボードにコピー（macOSの場合）
if command -v pbcopy &#x26;> /dev/null; then
    echo "$RESPONSE_FILE" | pbcopy
    echo -e "${GREEN}回答ファイルのパスをクリップボードにコピーしました${NC}"
fi
</code></pre>
<h3 id="スクリプトの使用方法">スクリプトの使用方法</h3>
<h4 id="1-スクリプトの保存">1. スクリプトの保存</h4>
<p>上記のスクリプトを<code>consult-gemini.sh</code>という名前で保存します：</p>
<pre><code class="language-bash"># スクリプトを作成
nano consult-gemini.sh

# または、お使いのエディタで作成
code consult-gemini.sh
</code></pre>
<h4 id="2-実行権限の付与">2. 実行権限の付与</h4>
<pre><code class="language-bash">chmod +x consult-gemini.sh
</code></pre>
<h4 id="3-環境変数の設定apiキーを使用する場合">3. 環境変数の設定（APIキーを使用する場合）</h4>
<pre><code class="language-bash"># 一時的に設定
export GEMINI_API_KEY="your-api-key-here"

# 永続的に設定（.bashrcまたは.zshrcに追加）
echo 'export GEMINI_API_KEY="your-api-key-here"' >> ~/.bashrc
source ~/.bashrc
</code></pre>
<h4 id="4-スクリプトの実行例">4. スクリプトの実行例</h4>
<pre><code class="language-bash"># 基本的な使用方法
./consult-gemini.sh -t "API設計" -q "RESTfulなエンドポイント設計について教えてください"

# ファイルを参照する場合
./consult-gemini.sh -t "コードレビュー" -q "このコードの改善点を教えてください" -f "src/api/users.js"

# 複数ファイルを参照する場合
./consult-gemini.sh -t "アーキテクチャ" -q "このシステム設計の問題点は？" -f "docs/architecture.md" -f "src/index.js"
</code></pre>
<h3 id="スクリプトの機能説明">スクリプトの機能説明</h3>
<h4 id="エラーハンドリング">エラーハンドリング</h4>
<ul>
<li>必須引数のチェック</li>
<li>ファイルの存在確認</li>
<li>Gemini CLIの実行可否確認</li>
<li>APIキーの設定確認</li>
</ul>
<h4 id="便利機能">便利機能</h4>
<ul>
<li>カラー出力で見やすい表示</li>
<li>相談履歴の自動保存</li>
<li>タイムスタンプ付きファイル名</li>
<li>回答の概要表示</li>
<li>macOSでのクリップボードコピー機能</li>
</ul>
<h4 id="セキュリティ配慮">セキュリティ配慮</h4>
<ul>
<li>APIキーを直接スクリプトに記載しない</li>
<li>環境変数または設定ファイルから読み込み</li>
<li>エラー時の適切なメッセージ表示</li>
</ul>
<h2 id="参考記事リンク">参考記事リンク</h2>
<ul>
<li><a href="https://x.com/masa_oka108/status/1938170385205498186">X.com - オカムラさんの投稿</a></li>
<li><a href="https://zenn.dev/schroneko/articles/gemini-cli-tutorial">Gemini CLI の簡単チュートリアル - Zenn</a></li>
<li><a href="https://www.ai-souken.com/article/what-is-gemini-cli">Gemini CLIとは？インストール方法から使い方、料金を徹底解説！ - AI総合研究所</a></li>
<li><a href="https://zenn.dev/farstep/articles/claude-code-best-practices">Claude Code ベストプラクティス - Zenn</a></li>
<li><a href="https://apidog.com/jp/blog/claude-md-jp/">claude.mdファイル徹底解説：Claude Code開発を加速する5つの実践法 - Apidog</a></li>
<li><a href="https://dev.classmethod.jp/articles/rulesync/">rulesync: Claude CodeやCursor、Clineのrulesを統一管理するツール - DevelopersIO</a></li>
</ul>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",21]}]," ","Claude CodeとGemini CLIを連携させて相談しながら開発する仕組みを構築する"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-08-05 22:43"]}],"$undefined",["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Claude Code"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Gemini CLI"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"AI開発"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"自動化"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"コンテキスト管理"}],["$","span","5",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"セキュリティ"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
