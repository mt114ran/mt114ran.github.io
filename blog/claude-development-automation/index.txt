1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"qepat1HgROqLjfWdf0ONn","p":"","c":["","blog","claude-development-automation",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","claude-development-automation","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","claude-development-automation","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Q_mSZ5SUTyU9dG43wj2Rb",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:T5b23,<p>開発作業を効率化するため、GitHub Issueのコメントに<code>/claude</code>と入力するだけでAIが自動的にコードを生成し、Pull Requestを作成するシステムを構築しました。本記事では、その実装方法と活用例を詳しく解説します。</p>
<h2 id="前提知識">前提知識</h2>
<p>本記事を理解するために必要な基礎知識：</p>
<h3 id="必須知識">必須知識</h3>
<ul>
<li><strong>Git/GitHub</strong>の基本操作（clone、commit、push、pull request）</li>
<li><strong>JavaScript/Node.js</strong>の基礎（npmコマンド、package.json）</li>
<li><strong>YAML</strong>ファイルの基本構文</li>
</ul>
<h3 id="あると理解が深まる知識">あると理解が深まる知識</h3>
<ul>
<li><strong>GitHub Actions</strong>: GitHubが提供する自動化プラットフォーム。コードのビルド、テスト、デプロイを自動化</li>
<li><strong>CI/CD</strong>: 継続的インテグレーション/デリバリー。コードの変更を自動的にテスト・デプロイするプロセス</li>
<li><strong>API（Application Programming Interface）</strong>: ソフトウェア間でデータをやり取りするためのインターフェース</li>
<li><strong>Webhook</strong>: 特定のイベントが発生した際に、自動的に他のサービスに通知を送る仕組み</li>
</ul>
<h3 id="用語解説">用語解説</h3>
<ul>
<li><strong>トリガー</strong>: 自動処理を開始するきっかけとなるイベント</li>
<li><strong>パーミッション（権限）</strong>: ユーザーが実行できる操作の範囲</li>
<li><strong>トークン</strong>: APIアクセスのための認証情報</li>
<li><strong>ブランチ</strong>: Gitで並行して開発を進めるための機能</li>
</ul>
<h2 id="なぜこのシステムが必要か">なぜこのシステムが必要か？</h2>
<h3 id="開発現場の課題">開発現場の課題</h3>
<p>日々の開発作業において、以下のような繰り返し作業に時間を取られることがあります：</p>
<ul>
<li>簡単な機能追加やバグ修正</li>
<li>ボイラープレートコードの生成</li>
<li>テストコードの作成</li>
<li>リファクタリング作業</li>
</ul>
<p>これらの作業を効率化するため、AIアシスタントを活用した自動開発システムを構築しました。</p>
<h2 id="システム概要">システム概要</h2>
<h3 id="動作の流れ5分で理解">動作の流れ（5分で理解）</h3>
<ol>
<li><strong>開発者がIssueにコメント</strong>: <code>/claude ログイン機能を実装して</code></li>
<li><strong>GitHub Actionsが起動</strong>: コメントを検知して処理開始</li>
<li><strong>Claude AIがコード生成</strong>: 指示を解析してコードを作成</li>
<li><strong>Pull Request作成</strong>: 生成されたコードでPRを自動作成</li>
<li><strong>レビューとマージ</strong>: 人間が確認してマージ</li>
</ol>
<h3 id="アーキテクチャ">アーキテクチャ</h3>
<div class="mermaid">graph LR
    A[GitHub Issue] --&gt; B[コメント: /claude]
    B --&gt; C[GitHub Actions]
    C --&gt; D[Claude API]
    D --&gt; E[コード生成]
    E --&gt; F[Pull Request作成]
    F --&gt; G[レビュー・マージ]</div>
<h3 id="主な機能">主な機能</h3>
<ol>
<li><strong>コマンドベースの実行</strong>: Issueコメントで<code>/claude</code>を使用</li>
<li><strong>権限管理</strong>: Write権限以上のユーザーのみ実行可能</li>
<li><strong>自動PR作成</strong>: 生成されたコードを含むPRを自動作成</li>
<li><strong>エラーハンドリング</strong>: 失敗時の詳細なフィードバック</li>
</ol>
<h2 id="実装詳細">実装詳細</h2>
<h3 id="1-github-actionsワークフローの設計">1. GitHub Actionsワークフローの設計</h3>
<h4 id="github-actionsとは">GitHub Actionsとは？</h4>
<p>GitHub Actionsは、GitHubリポジトリ内で直接実行できる自動化ツールです。コードのプッシュやIssueの作成など、様々なイベントをトリガーに処理を実行できます。</p>
<h4 id="ワークフローの基本構造">ワークフローの基本構造</h4>
<p>ワークフローは<code>.github/workflows/</code>ディレクトリにYAMLファイルとして配置します。<code>issue_comment</code>イベントをトリガーとして動作するよう設定します。</p>
<pre><code class="language-yaml">name: Claude Development Bot

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write
</code></pre>
<h4 id="トリガー条件の設定">トリガー条件の設定</h4>
<p>コメントが<code>/claude</code>で始まる場合のみ実行するよう条件を設定：</p>
<pre><code class="language-yaml">jobs:
  claude-development:
    if: |
      github.event.issue.pull_request == null &#x26;&#x26;
      startsWith(github.event.comment.body, '/claude')
</code></pre>
<h3 id="2-権限チェックの実装">2. 権限チェックの実装</h3>
<h4 id="なぜ権限チェックが必要か">なぜ権限チェックが必要か？</h4>
<p>誰でもコードを生成できてしまうと、悪意のあるコードが混入するリスクがあります。そのため、信頼できるメンバーのみが使用できるよう制限します。</p>
<h4 id="実装方法">実装方法</h4>
<p>GitHub APIを使用して、コメント投稿者の権限レベルを確認します：</p>
<pre><code class="language-javascript">const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
  owner,
  repo,
  username: commenter
});

if (!['admin', 'write'].includes(permission.permission)) {
  // エラーメッセージを表示
  await github.rest.issues.createComment({
    owner,
    repo,
    issue_number: context.issue.number,
    body: '❌ 権限が不足しています'
  });
  return;
}
</code></pre>
<h3 id="3-claude-apiとの連携">3. Claude APIとの連携</h3>
<h4 id="claude-apiとは">Claude APIとは？</h4>
<p>Claude APIは、Anthropic社が提供するAIアシスタントのAPIです。自然言語での指示を理解し、コードを生成できます。</p>
<h4 id="apiキーの取得方法">APIキーの取得方法</h4>
<ol>
<li><a href="https://console.anthropic.com/">Anthropic Console</a>にアクセス</li>
<li>アカウントを作成（無料トライアルあり）</li>
<li>API Keysセクションで新規キーを生成</li>
<li>キーを安全に保管（一度しか表示されません）</li>
</ol>
<h4 id="プロンプトエンジニアリング">プロンプトエンジニアリング</h4>
<p>効果的なコード生成のため、構造化されたプロンプトを作成：</p>
<pre><code class="language-javascript">const systemPrompt = `
あなたは優秀なソフトウェアエンジニアです。
与えられたタスクを分析し、具体的なコード変更を提案してください。

出力形式:
1. 実装計画の説明
2. 具体的なコード（ファイルパスを明記）
3. テストコード（必要に応じて）
`;

const userPrompt = `
Issue #${issueNumber}: ${issueTitle}

Issue詳細: ${issueBody}
ユーザーからの指示: ${instruction}
プロジェクト情報: ${projectInfo}
`;
</code></pre>
<h4 id="apiコールの実装">APIコールの実装</h4>
<pre><code class="language-javascript">const response = await anthropic.messages.create({
  model: 'claude-3-5-sonnet-20241022',
  max_tokens: 8000,
  temperature: 0,
  system: systemPrompt,
  messages: [
    {
      role: 'user',
      content: userPrompt
    }
  ]
});
</code></pre>
<h3 id="4-コード変更の適用">4. コード変更の適用</h3>
<p>生成されたコードを解析し、実際のファイルに適用：</p>
<pre><code class="language-javascript">async function applyCodeChanges(response) {
  // ファイルパスとコードブロックを抽出
  const fileRegex = /### ファイル: ([^\n]+)/g;
  const codeBlockRegex = /```[\w]*\n([\s\S]*?)```/g;
  
  const filePaths = [];
  let match;
  while ((match = fileRegex.exec(response)) !== null) {
    filePaths.push(match[1].trim());
  }
  
  const codeBlocks = [];
  while ((match = codeBlockRegex.exec(response)) !== null) {
    codeBlocks.push(match[1]);
  }
  
  // ファイルを作成/更新
  for (let i = 0; i &#x3C; Math.min(filePaths.length, codeBlocks.length); i++) {
    const filePath = filePaths[i];
    const code = codeBlocks[i];
    
    // ディレクトリを作成
    await fs.mkdir(path.dirname(filePath), { recursive: true });
    
    // ファイルを書き込み
    await fs.writeFile(filePath, code);
    console.log(`✅ Updated: ${filePath}`);
  }
}
</code></pre>
<h3 id="5-pull-request-の自動作成">5. Pull Request の自動作成</h3>
<p>変更をコミットし、PRを作成：</p>
<pre><code class="language-javascript">// ブランチ作成とコミット
const branchName = `claude/issue-${issueNumber}-${timestamp}`;
execSync(`git checkout -b ${branchName}`);
execSync('git add -A');
execSync(`git commit -m "feat: Implement changes for issue #${issueNumber}"`);
execSync(`git push -u origin ${branchName}`);

// PR作成
const pr = await github.rest.pulls.create({
  owner,
  repo,
  title: `🤖 [Claude Bot] ${issueTitle}`,
  body: prBody,
  head: branchName,
  base: 'main'
});
</code></pre>
<h2 id="実践ステップバイステップガイド">実践：ステップバイステップガイド</h2>
<h3 id="準備編初回のみ">準備編（初回のみ）</h3>
<h4 id="step-1-リポジトリの準備">Step 1: リポジトリの準備</h4>
<pre><code class="language-bash"># リポジトリをクローン
git clone https://github.com/your-username/your-repo.git
cd your-repo

# .github/workflowsディレクトリを作成
mkdir -p .github/workflows
</code></pre>
<h4 id="step-2-ワークフローファイルの作成">Step 2: ワークフローファイルの作成</h4>
<p><code>.github/workflows/claude-bot.yml</code>を作成し、本記事のコードをコピー</p>
<h4 id="step-3-apiキーの設定">Step 3: APIキーの設定</h4>
<ol>
<li>GitHubリポジトリの<strong>Settings</strong>タブを開く</li>
<li>左メニューの<strong>Secrets and variables</strong> → <strong>Actions</strong></li>
<li><strong>New repository secret</strong>をクリック</li>
<li>Name: <code>ANTHROPIC_API_KEY</code></li>
<li>Value: 取得したAPIキー</li>
<li><strong>Add secret</strong>をクリック</li>
</ol>
<h3 id="使用編">使用編</h3>
<h4 id="基本的な使い方">基本的な使い方</h4>
<ol>
<li><strong>Issueを作成</strong></li>
</ol>
<pre><code class="language-markdown">Title: ダークモードの実装
Body: アプリケーションにダークモード機能を追加したい
</code></pre>
<ol start="2">
<li><strong>コメントでClaudeを呼び出し</strong></li>
</ol>
<pre><code>/claude React Contextを使用してダークモードを実装してください。
トグルボタンも含めてください。
</code></pre>
<ol start="3">
<li><strong>自動実行される処理</strong></li>
</ol>
<ul>
<li>🚀 処理開始の通知</li>
<li>💬 Claudeの応答</li>
<li>🔀 Pull Request作成</li>
<li>✅ 完了通知</li>
</ul>
<h3 id="実際の活用例">実際の活用例</h3>
<h4 id="例1-新機能の実装">例1: 新機能の実装</h4>
<pre><code>/claude ユーザープロフィール編集機能を実装してください。
フォームバリデーションも含めてください。
</code></pre>
<h4 id="例2-バグ修正">例2: バグ修正</h4>
<pre><code>/claude このエラーメッセージを分析して修正してください：
TypeError: Cannot read property 'map' of undefined
</code></pre>
<h4 id="例3-リファクタリング">例3: リファクタリング</h4>
<pre><code>/claude このコンポーネントをTypeScriptに変換してください
</code></pre>
<h4 id="例4-テスト作成">例4: テスト作成</h4>
<pre><code>/claude UserService クラスのユニットテストを作成してください
</code></pre>
<h2 id="セキュリティ考慮事項">セキュリティ考慮事項</h2>
<h3 id="-重要必ず守るべきセキュリティルール">🔴 重要：必ず守るべきセキュリティルール</h3>
<h3 id="1-apiキーの管理">1. APIキーの管理</h3>
<h4 id="-絶対にやってはいけないこと">❌ 絶対にやってはいけないこと</h4>
<pre><code class="language-javascript">// 絶対ダメ！APIキーを直接記載
const apiKey = 'sk-ant-api03-xxxxx';
</code></pre>
<h4 id="-正しい方法">✅ 正しい方法</h4>
<p>APIキーは<strong>GitHub Secrets</strong>で安全に管理：</p>
<pre><code class="language-yaml">env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
</code></pre>
<p><strong>重要</strong>: APIキーを直接コードに記載しない</p>
<h3 id="2-権限制御">2. 権限制御</h3>
<p>リポジトリの権限レベルでアクセスを制御：</p>
<ul>
<li><strong>Read権限</strong>: 使用不可</li>
<li><strong>Write権限</strong>: 使用可能</li>
<li><strong>Admin権限</strong>: 使用可能</li>
</ul>
<h3 id="3-コードレビューの必要性">3. コードレビューの必要性</h3>
<p>AIが生成したコードは必ず人間がレビュー：</p>
<ul>
<li>セキュリティホールの確認</li>
<li>ビジネスロジックの妥当性検証</li>
<li>コーディング規約の準拠確認</li>
</ul>
<h2 id="パフォーマンスと制限">パフォーマンスと制限</h2>
<h3 id="処理時間">処理時間</h3>
<p>典型的な処理時間：</p>





























<table><thead><tr><th>処理内容</th><th>所要時間</th></tr></thead><tbody><tr><td>権限チェック</td><td>1-2秒</td></tr><tr><td>Claude API呼び出し</td><td>5-15秒</td></tr><tr><td>コード生成・適用</td><td>2-5秒</td></tr><tr><td>PR作成</td><td>3-5秒</td></tr><tr><td><strong>合計</strong></td><td><strong>15-30秒</strong></td></tr></tbody></table>
<h3 id="api制限">API制限</h3>
<ul>
<li><strong>Anthropic API</strong>: レート制限とトークン制限あり</li>
<li><strong>GitHub Actions</strong>:
<ul>
<li>パブリックリポジトリ: 無制限</li>
<li>プライベートリポジトリ: 月2,000分の無料枠</li>
</ul>
</li>
</ul>
<h3 id="コスト見積もり">コスト見積もり</h3>
<p>月間使用量に応じたコスト目安：</p>





























<table><thead><tr><th>使用回数/月</th><th>Anthropic API</th><th>GitHub Actions</th><th>合計</th></tr></thead><tbody><tr><td>100回</td><td>$5-10</td><td>$0（パブリック）</td><td>$5-10</td></tr><tr><td>500回</td><td>$25-50</td><td>$0（パブリック）</td><td>$25-50</td></tr><tr><td>1000回</td><td>$50-100</td><td>$0（パブリック）</td><td>$50-100</td></tr></tbody></table>
<h2 id="トラブルシューティング">トラブルシューティング</h2>
<h3 id="デバッグの基本手順">デバッグの基本手順</h3>
<ol>
<li>
<p><strong>ワークフローのログを確認</strong></p>
<ul>
<li>Actions タブ → 該当のワークフロー実行 → ログを展開</li>
</ul>
</li>
<li>
<p><strong>エラーメッセージを読む</strong></p>
<ul>
<li>エラーの行番号とメッセージを確認</li>
<li>スタックトレースから原因を特定</li>
</ul>
</li>
<li>
<p><strong>ローカルでテスト</strong></p>
<pre><code class="language-bash"># ワークフローの構文チェック
npm install -g @actions/core
node -e "console.log('Workflow syntax is valid')"
</code></pre>
</li>
</ol>
<h3 id="よくある問題と解決方法">よくある問題と解決方法</h3>
<h4 id="1-権限エラー">1. 権限エラー</h4>
<p><strong>症状</strong>: "Permission denied"エラー
<strong>解決策</strong>:</p>
<ul>
<li>ユーザーの権限を確認</li>
<li>リポジトリのCollaboratorとして追加</li>
</ul>
<h4 id="2-api-キーエラー">2. API キーエラー</h4>
<p><strong>症状</strong>: "Invalid API key"
<strong>解決策</strong>:</p>
<ul>
<li>GitHub Secretsの設定を確認</li>
<li>APIキーの有効期限を確認</li>
</ul>
<h4 id="3-pr作成失敗">3. PR作成失敗</h4>
<p><strong>症状</strong>: PRが作成されない
<strong>解決策</strong>:</p>
<ul>
<li>GitHub Actionsの権限設定を確認</li>
<li>ワークフローのログを確認</li>
</ul>
<h4 id="4-コード適用失敗">4. コード適用失敗</h4>
<p><strong>症状</strong>: 生成されたコードが適用されない
<strong>解決策</strong>:</p>
<ul>
<li>Claudeの応答形式を確認</li>
<li>ファイルパスの正確性を確認</li>
</ul>
<h2 id="ベストプラクティス">ベストプラクティス</h2>
<h3 id="1-明確な指示の記載">1. 明確な指示の記載</h3>
<p><strong>良い例</strong>:</p>
<pre><code>/claude UserAuthenticationコンポーネントを作成してください。
以下の機能を含めてください：
- メールとパスワードのフォーム
- バリデーション（メール形式、パスワード8文字以上）
- エラーメッセージの表示
- TypeScriptで実装
</code></pre>
<p><strong>悪い例</strong>:</p>
<pre><code>/claude ログイン機能を作って
</code></pre>
<h3 id="2-段階的な実装">2. 段階的な実装</h3>
<p>大きな機能は複数のIssueに分割：</p>
<ol>
<li>Issue #1: 基本的なUIコンポーネント</li>
<li>Issue #2: ビジネスロジック</li>
<li>Issue #3: テスト</li>
<li>Issue #4: ドキュメント</li>
</ol>
<h3 id="3-レビューフローの確立">3. レビューフローの確立</h3>
<div class="mermaid">graph LR
    A[Claude生成PR] --&gt; B[自動テスト]
    B --&gt; C[コードレビュー]
    C --&gt; D[修正依頼]
    D --&gt; E[承認]
    E --&gt; F[マージ]</div>
<h2 id="実装の応用例">実装の応用例</h2>
<h3 id="ミドルエンジニア向け高度な実装パターン">ミドルエンジニア向け：高度な実装パターン</h3>
<h4 id="1-マルチモデル対応">1. マルチモデル対応</h4>
<pre><code class="language-javascript">// 複数のAIモデルを切り替え
const models = {
  'claude': new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY }),
  'gpt4': new OpenAI({ apiKey: process.env.OPENAI_API_KEY }),
  'gemini': new GoogleAI({ apiKey: process.env.GOOGLE_API_KEY })
};

// コマンドに応じてモデルを選択
const model = command.startsWith('/gpt') ? models.gpt4 : models.claude;
</code></pre>
<h4 id="2-プラグインシステム">2. プラグインシステム</h4>
<pre><code class="language-javascript">// プラグインインターフェース
class Plugin {
  async beforeGenerate(context) {}
  async afterGenerate(context, code) {}
  async beforePR(context, changes) {}
}

// ESLintプラグイン例
class ESLintPlugin extends Plugin {
  async afterGenerate(context, code) {
    const { ESLint } = require('eslint');
    const eslint = new ESLint({ fix: true });
    const results = await eslint.lintText(code);
    return results[0].output || code;
  }
}
</code></pre>
<h4 id="3-監視とアラート">3. 監視とアラート</h4>
<pre><code class="language-yaml"># Prometheusメトリクス収集
- name: Record metrics
  run: |
    echo "claude_bot_executions_total{status='$STATUS'} 1" >> metrics.txt
    echo "claude_bot_duration_seconds $DURATION" >> metrics.txt
    curl -X POST http://prometheus-pushgateway:9091/metrics/job/claude-bot &#x3C; metrics.txt
</code></pre>
<h2 id="今後の改善案">今後の改善案</h2>
<h3 id="1-機能拡張">1. 機能拡張</h3>
<ul>
<li><strong>マルチモデル対応</strong>: GPT-4やGeminiとの統合</li>
<li><strong>カスタムコマンド</strong>: <code>/claude-test</code>、<code>/claude-docs</code>など</li>
<li><strong>インタラクティブモード</strong>: 対話形式での開発</li>
</ul>
<h3 id="2-品質向上">2. 品質向上</h3>
<ul>
<li><strong>自動テスト強化</strong>: 生成コードの自動テスト実行</li>
<li><strong>静的解析</strong>: ESLint、Prettierの自動適用</li>
<li><strong>セキュリティスキャン</strong>: 脆弱性の自動検出</li>
</ul>
<h3 id="3-効率化">3. 効率化</h3>
<ul>
<li><strong>キャッシング</strong>: 類似リクエストのキャッシュ</li>
<li><strong>並列処理</strong>: 複数ファイルの同時処理</li>
<li><strong>増分更新</strong>: 差分のみの更新</li>
</ul>
<h2 id="パフォーマンスとコスト最適化">パフォーマンスとコスト最適化</h2>
<h3 id="処理速度の改善">処理速度の改善</h3>
<h4 id="キャッシング戦略">キャッシング戦略</h4>
<pre><code class="language-javascript">// 類似リクエストのキャッシュ
const cache = new Map();
const cacheKey = crypto.createHash('md5').update(instruction).digest('hex');

if (cache.has(cacheKey)) {
  console.log('Cache hit!');
  return cache.get(cacheKey);
}

const result = await generateCode(instruction);
cache.set(cacheKey, result);
</code></pre>
<h4 id="並列処理">並列処理</h4>
<pre><code class="language-javascript">// 複数ファイルの並列生成
const files = await Promise.all(
  fileList.map(async (file) => {
    return await generateFileContent(file);
  })
);
</code></pre>
<h3 id="コスト削減のテクニック">コスト削減のテクニック</h3>
<ol>
<li><strong>プロンプトの最適化</strong>: 不要な情報を削除して トークン数を削減</li>
<li><strong>モデルの使い分け</strong>: 簡単なタスクは小さいモデルを使用</li>
<li><strong>バッチ処理</strong>: 複数の小さなリクエストをまとめて処理</li>
</ol>
<h2 id="まとめ">まとめ</h2>
<p>GitHub IssueコメントでClaudeを呼び出す自動開発システムにより、以下の効果が得られました：</p>
<ol>
<li><strong>開発速度の向上</strong>: 単純作業の自動化で30-50%の時間短縮</li>
<li><strong>品質の安定化</strong>: AIによる一貫したコード生成</li>
<li><strong>知識の共有</strong>: Issueでの開発過程の可視化</li>
</ol>
<p>このシステムは、人間の創造性とAIの効率性を組み合わせた、次世代の開発フローの一例です。適切に活用することで、開発チームの生産性を大幅に向上させることができます。</p>
<h2 id="参考リンク">参考リンク</h2>
<ul>
<li><a href="https://docs.github.com/actions">GitHub Actions ドキュメント</a></li>
<li><a href="https://docs.anthropic.com/">Anthropic API ドキュメント</a></li>
<li><a href="https://docs.github.com/rest">GitHub REST API</a></li>
<li><a href="https://nodejs.org/api/child_process.html">Node.js Child Process</a></li>
</ul>
<h2 id="注意事項">注意事項</h2>
<ul>
<li>本記事で紹介したコードは簡略化されています</li>
<li>実際の運用では適切なエラーハンドリングが必要です</li>
<li>APIキーなどの秘匿情報は必ず環境変数で管理してください</li>
<li>AIが生成したコードは必ず人間がレビューしてください</li>
</ul>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",30]}]," ","GitHub IssueコメントでClaude AIを呼び出す自動開発システムの構築"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-08-11 00:59"]}],"$undefined",["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"GitHub Actions"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Claude AI"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"自動化"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"CI/CD"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"開発効率化"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
