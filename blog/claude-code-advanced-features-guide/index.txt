1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"CMxdg3PnUz1MVzpkS50wb","p":"","c":["","blog","claude-code-advanced-features-guide",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","claude-code-advanced-features-guide","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","claude-code-advanced-features-guide","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","QXhDwebLEwaUOB-3Z2K2-",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:T52b4,<p>Claude Codeには、開発効率を劇的に向上させる多くの高度な機能があります。本記事では、<code>/hooks</code>、<code>/agent</code>、<code>/cache</code>、<code>/reset</code>など、主要なスラッシュコマンドの使い方を、実例を交えて徹底解説します。</p>
<h2 id="-目次">📚 目次</h2>
<ul>
<li><a href="#claude-code%E3%81%AE%E3%82%B9%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A8%E3%81%AF">Claude Codeのスラッシュコマンドとは</a></li>
<li><a href="#hooks---%E9%96%8B%E7%99%BA%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E8%87%AA%E5%8B%95%E5%8C%96">/hooks - 開発ワークフローの自動化</a></li>
<li><a href="#agent---ai%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E8%A4%87%E9%9B%91%E3%81%AA%E3%82%BF%E3%82%B9%E3%82%AF%E5%87%A6%E7%90%86">/agent - AIエージェントによる複雑なタスク処理</a></li>
<li><a href="#cache---%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E7%AE%A1%E7%90%86%E3%81%A7%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E5%90%91%E4%B8%8A">/cache - キャッシュ管理でパフォーマンス向上</a></li>
<li><a href="#reset---%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%AA%E3%82%BB%E3%83%83%E3%83%88">/reset - セッションのリセット</a></li>
<li><a href="#resume---%E4%BD%9C%E6%A5%AD%E3%81%AE%E5%86%8D%E9%96%8B">/resume - 作業の再開</a></li>
<li><a href="#undo---%E6%93%8D%E4%BD%9C%E3%81%AE%E5%8F%96%E3%82%8A%E6%B6%88%E3%81%97">/undo - 操作の取り消し</a></li>
<li><a href="#help---%E3%83%98%E3%83%AB%E3%83%97%E3%81%AE%E8%A1%A8%E7%A4%BA">/help - ヘルプの表示</a></li>
<li><a href="#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E4%BE%BF%E5%88%A9%E3%81%AA%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89">その他の便利なコマンド</a></li>
<li><a href="#%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E6%B4%BB%E7%94%A8%E4%BE%8B">実践的な活用例</a></li>
<li><a href="#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0">トラブルシューティング</a></li>
</ul>
<h2 id="claude-codeのスラッシュコマンドとは">Claude Codeのスラッシュコマンドとは</h2>
<p><strong>スラッシュコマンド</strong>は、Claude Codeの特殊な機能を呼び出すための命令です。通常の会話とは異なり、<code>/</code>で始まるコマンドを入力することで、特定の機能を実行できます。</p>
<h3 id="なぜスラッシュコマンドが重要なのか">なぜスラッシュコマンドが重要なのか</h3>
<ol>
<li><strong>効率化</strong>: 複雑な操作を簡単なコマンドで実行</li>
<li><strong>自動化</strong>: 繰り返し作業を自動化</li>
<li><strong>カスタマイズ</strong>: 開発環境を自分好みに調整</li>
<li><strong>品質向上</strong>: 自動チェックで品質を保証</li>
</ol>
<h2 id="hooks---開発ワークフローの自動化">/hooks - 開発ワークフローの自動化</h2>
<p><a href="https://docs.anthropic.com/claude/docs/hooks">公式ドキュメント: Hooks</a></p>
<h3 id="概要">概要</h3>
<p><code>/hooks</code>は、Claude Codeが特定のアクションを実行する前後に、カスタムコマンドを自動実行する仕組みです。</p>
<h3 id="基本的な使い方">基本的な使い方</h3>
<pre><code class="language-bash"># 現在のhooks設定を表示
/hooks

# 設定例を表示
/hooks example

# hooks設定をリセット
/hooks reset
</code></pre>
<h3 id="利用可能なhookの種類">利用可能なhookの種類</h3>
<p><strong>重要</strong>: <code>{{file}}</code>、<code>{{command}}</code>などの変数は、Claude Codeによって自動的に実際の値に置き換えられます。</p>
<h4 id="1-ファイル操作系">1. ファイル操作系</h4>
<p><strong>beforeFileEdit / afterFileEdit</strong></p>
<pre><code class="language-json">{
  "hooks": {
    "beforeFileEdit": "git status &#x26;&#x26; echo '編集開始: {{file}}'",
    "afterFileEdit": "prettier --write {{file}} &#x26;&#x26; git add {{file}}"
  }
}
</code></pre>
<p><strong>実行結果の例：</strong></p>
<pre><code class="language-bash"># app.jsを編集する場合
$ Claude: ファイルを編集します
> Hook実行: git status &#x26;&#x26; echo '編集開始: app.js'
> On branch main
> Your branch is up to date with 'origin/main'.
> 編集開始: app.js
</code></pre>
<p><strong>活用例：</strong></p>
<ul>
<li>コードフォーマットの自動適用</li>
<li>編集前のバックアップ作成</li>
<li>テストの自動実行</li>
</ul>
<h4 id="2-コマンド実行系">2. コマンド実行系</h4>
<p><strong>beforeBash / afterBash</strong></p>
<pre><code class="language-json">{
  "hooks": {
    "beforeBash": "echo '[$(date)] 実行: {{command}}' >> ~/.claude/bash.log",
    "afterBash": "echo '[$(date)] 完了: {{command}}' >> ~/.claude/bash.log"
  }
}
</code></pre>
<p><strong>活用例：</strong></p>
<ul>
<li>コマンド履歴の記録</li>
<li>危険なコマンドの警告</li>
<li>実行時間の計測</li>
</ul>
<h4 id="3-プロンプト系">3. プロンプト系</h4>
<p><strong>userPromptSubmit</strong></p>
<pre><code class="language-json">{
  "hooks": {
    "userPromptSubmit": "echo '{{prompt}}' | grep -E '(password|secret|key)' &#x26;&#x26; echo '⚠️ 機密情報が含まれている可能性があります' || true"
  }
}
</code></pre>
<h3 id="実践的な設定例">実践的な設定例</h3>
<p><strong>TypeScriptプロジェクト用設定：</strong></p>
<pre><code class="language-json">{
  "hooks": {
    "beforeFileEdit": "[[ '{{file}}' == *.ts ]] &#x26;&#x26; tsc --noEmit",
    "afterFileEdit": "[[ '{{file}}' == *.ts ]] &#x26;&#x26; eslint --fix {{file}}",
    "afterBash": "[[ '{{command}}' == 'npm run build' ]] &#x26;&#x26; npm test"
  }
}
</code></pre>
<p><strong>注意</strong>: Bashの<code>[[ ]]</code>を使用することで、ワイルドカードパターンが正しく評価されます。</p>
<h2 id="agent---aiエージェントによる複雑なタスク処理">/agent - AIエージェントによる複雑なタスク処理</h2>
<p><a href="https://docs.anthropic.com/claude/docs/agents">公式ドキュメント: Agents</a></p>
<h3 id="概要-1">概要</h3>
<p><code>/agent</code>コマンドは、特定のタスクに特化したAIエージェントを起動し、複雑な処理を自動化します。</p>
<h3 id="基本的な使い方-1">基本的な使い方</h3>
<pre><code class="language-bash"># 利用可能なエージェントを表示
/agent list

# 特定のエージェントを起動
/agent code-reviewer

# エージェントにタスクを割り当て
/agent debug "TypeError: Cannot read property 'map' of undefined"
</code></pre>
<h3 id="主要なエージェントタイプ">主要なエージェントタイプ</h3>
<h4 id="1-code-reviewer">1. code-reviewer</h4>
<p>コードレビューを自動実行します。</p>
<pre><code class="language-bash">/agent code-reviewer --file src/app.js
</code></pre>
<p><strong>チェック項目：</strong></p>
<ul>
<li>コーディング規約の遵守</li>
<li>パフォーマンスの問題</li>
<li>セキュリティの脆弱性</li>
<li>可読性と保守性</li>
</ul>
<h4 id="2-test-writer">2. test-writer</h4>
<p>テストコードを自動生成します。</p>
<pre><code class="language-bash">/agent test-writer --file src/utils.js --framework jest
</code></pre>
<p><strong>生成内容：</strong></p>
<ul>
<li>ユニットテスト</li>
<li>統合テスト</li>
<li>エッジケースのテスト</li>
</ul>
<h4 id="3-documentation-generator">3. documentation-generator</h4>
<p>ドキュメントを自動生成します。</p>
<pre><code class="language-bash">/agent documentation-generator --format markdown
</code></pre>
<p><strong>生成内容：</strong></p>
<ul>
<li>API ドキュメント</li>
<li>README ファイル</li>
<li>コメントの追加</li>
</ul>
<h4 id="4-refactoring-assistant">4. refactoring-assistant</h4>
<p>コードのリファクタリングを支援します。</p>
<pre><code class="language-bash">/agent refactoring-assistant --pattern singleton
</code></pre>
<h3 id="エージェントの高度な使い方">エージェントの高度な使い方</h3>
<p><strong>複数ファイルの一括処理：</strong></p>
<pre><code class="language-bash">/agent code-reviewer --pattern "src/**/*.js" --output review-report.md
</code></pre>
<p><strong>カスタムルールの適用：</strong></p>
<pre><code class="language-bash">/agent code-reviewer --rules .eslintrc.json --strict
</code></pre>
<h2 id="cache---キャッシュ管理でパフォーマンス向上">/cache - キャッシュ管理でパフォーマンス向上</h2>
<p><a href="https://docs.anthropic.com/claude/docs/cache">公式ドキュメント: Cache Management</a></p>
<h3 id="概要-2">概要</h3>
<p><code>/cache</code>コマンドは、Claude Codeのキャッシュを管理し、パフォーマンスを最適化します。</p>
<h3 id="基本的な使い方-2">基本的な使い方</h3>
<pre><code class="language-bash"># キャッシュの状態を表示
/cache status

# キャッシュをクリア
/cache clear

# 特定のプロジェクトのキャッシュをクリア
/cache clear --project my-project

# キャッシュの統計を表示
/cache stats
</code></pre>
<h3 id="キャッシュの種類">キャッシュの種類</h3>
<ol>
<li><strong>コンテキストキャッシュ</strong>: 会話の文脈を保存</li>
<li><strong>ファイルキャッシュ</strong>: 読み込んだファイルの内容を保存</li>
<li><strong>実行結果キャッシュ</strong>: コマンドの実行結果を保存</li>
</ol>
<h3 id="キャッシュ戦略">キャッシュ戦略</h3>
<p><strong>開発環境：</strong></p>
<pre><code class="language-bash"># 頻繁に変更されるファイルはキャッシュしない
/cache config --ttl 300 --max-size 100MB
</code></pre>
<p><strong>本番環境：</strong></p>
<pre><code class="language-bash"># 長期間キャッシュを保持
/cache config --ttl 3600 --max-size 1GB
</code></pre>
<h2 id="reset---セッションのリセット">/reset - セッションのリセット</h2>
<p><a href="https://docs.anthropic.com/claude/docs/reset">公式ドキュメント: Reset</a></p>
<h3 id="概要-3">概要</h3>
<p><code>/reset</code>は現在のセッションをリセットし、クリーンな状態から作業を再開します。</p>
<h3 id="使い方">使い方</h3>
<pre><code class="language-bash"># 完全リセット
/reset

# コンテキストのみリセット
/reset context

# 設定を保持してリセット
/reset --keep-settings

# プロジェクト固有の設定を保持
/reset --keep-project
</code></pre>
<h3 id="いつ使うべきか">いつ使うべきか</h3>
<ul>
<li>メモリ使用量が多くなった時</li>
<li>コンテキストが混乱した時</li>
<li>新しいプロジェクトを開始する時</li>
<li>エラーが頻発する時</li>
</ul>
<h2 id="resume---作業の再開">/resume - 作業の再開</h2>
<p><a href="https://docs.anthropic.com/claude/docs/resume">公式ドキュメント: Resume</a></p>
<h3 id="概要-4">概要</h3>
<p><code>/resume</code>は以前のセッションから作業を再開します。</p>
<h3 id="使い方-1">使い方</h3>
<pre><code class="language-bash"># 最後のセッションを再開
/resume

# 特定のセッションを再開
/resume --session-id abc123

# セッション一覧を表示
/resume --list

# 特定の日付のセッションを検索
/resume --date 2025-08-10
</code></pre>
<h3 id="セッションの保存">セッションの保存</h3>
<pre><code class="language-bash"># 現在のセッションを保存
/save session-name

# 自動保存を有効化
/config autosave true
</code></pre>
<h2 id="undo---操作の取り消し">/undo - 操作の取り消し</h2>
<p><a href="https://docs.anthropic.com/claude/docs/undo">公式ドキュメント: Undo</a></p>
<h3 id="概要-5">概要</h3>
<p><code>/undo</code>は直前の操作を取り消します。</p>
<h3 id="使い方-2">使い方</h3>
<pre><code class="language-bash"># 直前の操作を取り消し
/undo

# 複数の操作を取り消し
/undo 3

# 取り消し可能な操作を表示
/undo --list

# 特定の操作まで戻る
/undo --to operation-id
</code></pre>
<h3 id="対象となる操作">対象となる操作</h3>
<ul>
<li>ファイルの編集</li>
<li>ファイルの作成/削除</li>
<li>コマンドの実行</li>
<li>設定の変更</li>
</ul>
<h2 id="help---ヘルプの表示">/help - ヘルプの表示</h2>
<h3 id="概要-6">概要</h3>
<p><code>/help</code>はClaude Codeの使い方やコマンドの詳細を表示します。</p>
<h3 id="使い方-3">使い方</h3>
<pre><code class="language-bash"># 一般的なヘルプ
/help

# 特定のコマンドのヘルプ
/help hooks

# すべてのコマンド一覧
/help --all

# 例を含むヘルプ
/help --examples
</code></pre>
<h2 id="その他の便利なコマンド">その他の便利なコマンド</h2>
<h3 id="init---プロジェクトの初期化">/init - プロジェクトの初期化</h3>
<pre><code class="language-bash"># プロジェクトを初期化
/init

# テンプレートを使用
/init --template react

# 設定ファイルを生成
/init --config
</code></pre>
<h3 id="config---設定管理">/config - 設定管理</h3>
<pre><code class="language-bash"># 現在の設定を表示
/config

# 特定の設定を変更
/config set theme dark

# 設定をエクスポート
/config export > my-config.json

# 設定をインポート
/config import my-config.json
</code></pre>
<h3 id="stats---統計情報">/stats - 統計情報</h3>
<pre><code class="language-bash"># 使用統計を表示
/stats

# 詳細な統計
/stats --detailed

# 特定期間の統計
/stats --from 2025-08-01 --to 2025-08-10
</code></pre>
<h3 id="export---データのエクスポート">/export - データのエクスポート</h3>
<pre><code class="language-bash"># 会話履歴をエクスポート
/export conversation

# コードをエクスポート
/export code --format zip

# プロジェクト全体をエクスポート
/export project
</code></pre>
<h2 id="実践的な活用例">実践的な活用例</h2>
<h3 id="例1-フルスタック開発環境の構築">例1: フルスタック開発環境の構築</h3>
<pre><code class="language-bash"># 1. プロジェクトを初期化
/init --template fullstack

# 2. hooksを設定
/hooks example

# 3. エージェントでコード生成
/agent scaffold --frontend react --backend express

# 4. 自動テストを設定
/hooks set afterFileEdit "npm test -- {{file}}"
</code></pre>
<h3 id="例2-コードレビューワークフロー">例2: コードレビューワークフロー</h3>
<pre><code class="language-bash"># 1. レビュー前の準備
/agent code-reviewer --prepare

# 2. hooksでレビューを自動化
/hooks set beforeCommit "/agent code-reviewer --file {{files}}"

# 3. レビュー結果を保存
/export review-report --format markdown
</code></pre>
<h3 id="例3-デバッグセッション">例3: デバッグセッション</h3>
<pre><code class="language-bash"># 1. デバッグエージェントを起動
/agent debugger

# 2. エラーログを分析
/agent analyze-logs error.log

# 3. 修正案を生成
/agent fix-suggestions

# 4. 修正を適用
/agent apply-fixes --interactive
</code></pre>
<h2 id="トラブルシューティング">トラブルシューティング</h2>
<h3 id="よくある問題と解決方法">よくある問題と解決方法</h3>
<h4 id="1-コマンドが認識されない">1. コマンドが認識されない</h4>
<pre><code class="language-bash"># Claude Codeのバージョンを確認
/version

# 最新版にアップデート
/update
</code></pre>
<h4 id="2-エージェントが応答しない">2. エージェントが応答しない</h4>
<pre><code class="language-bash"># エージェントの状態を確認
/agent status

# エージェントを再起動
/agent restart
</code></pre>
<h4 id="3-キャッシュの問題">3. キャッシュの問題</h4>
<pre><code class="language-bash"># キャッシュをクリア
/cache clear --force

# キャッシュを無効化
/config set cache.enabled false
</code></pre>
<h4 id="4-メモリ不足">4. メモリ不足</h4>
<pre><code class="language-bash"># メモリ使用量を確認
/stats memory

# 不要なデータをクリア
/cleanup

# セッションをリセット
/reset --keep-settings
</code></pre>
<h2 id="セキュリティに関する重要な注意事項">セキュリティに関する重要な注意事項</h2>
<h3 id="️-警告">⚠️ 警告</h3>
<p><code>/hooks</code>や<code>/agent</code>は任意のコマンドを実行できる強力な機能です。以下の点に注意してください：</p>
<ol>
<li>
<p><strong>信頼できない設定ファイルをインポートしない</strong></p>
<ul>
<li>第三者が作成した<code>.claude/settings.json</code>を安易に使用しない</li>
<li>設定ファイルの内容を必ず確認してから適用する</li>
</ul>
</li>
<li>
<p><strong>機密情報の保護</strong></p>
<ul>
<li>APIキーやパスワードを設定ファイルに直接記載しない</li>
<li>環境変数を使用して機密情報を管理する</li>
</ul>
</li>
<li>
<p><strong>危険なコマンドの制限</strong></p>
<pre><code class="language-json">{
  "hooks": {
    "beforeBash": "echo '{{command}}' | grep -E '(rm -rf|sudo)' &#x26;&#x26; exit 1 || true"
  }
}
</code></pre>
</li>
</ol>
<h2 id="ベストプラクティス">ベストプラクティス</h2>
<h3 id="1-プロジェクト開始時の設定">1. プロジェクト開始時の設定</h3>
<pre><code class="language-bash"># プロジェクト固有の設定ファイルを作成
cat > .claude/settings.json &#x3C;&#x3C; EOF
{
  "hooks": {
    "beforeFileEdit": "npm run lint",
    "afterFileEdit": "npm run format"
  },
  "agents": {
    "default": "code-reviewer"
  }
}
EOF
</code></pre>
<h3 id="2-チーム開発での活用">2. チーム開発での活用</h3>
<pre><code class="language-bash"># チーム共有設定をGitに含める
echo "!.claude/settings.json" >> .gitignore

# READMEに使用方法を記載
echo "## Claude Code Setup" >> README.md
echo "Run \`/init\` to initialize Claude Code for this project" >> README.md
</code></pre>
<h3 id="3-セキュリティの考慮">3. セキュリティの考慮</h3>
<pre><code class="language-bash"># 機密情報のチェック
/hooks set userPromptSubmit "git secrets --scan"

# APIキーの保護
/config set security.mask-secrets true
</code></pre>
<h2 id="まとめ">まとめ</h2>
<p>Claude Codeの高度な機能を活用することで、開発効率を大幅に向上させることができます。</p>
<p><strong>主要な機能の使い分け：</strong></p>
<ul>
<li><strong><code>/hooks</code></strong>: 自動化したい時</li>
<li><strong><code>/agent</code></strong>: 複雑なタスクを処理したい時</li>
<li><strong><code>/cache</code></strong>: パフォーマンスを改善したい時</li>
<li><strong><code>/reset</code></strong>: クリーンな状態から始めたい時</li>
<li><strong><code>/resume</code></strong>: 作業を継続したい時</li>
</ul>
<p>これらの機能を組み合わせることで、より生産的で楽しい開発体験を実現できます。</p>
<h2 id="参考リンク">参考リンク</h2>
<h3 id="公式ドキュメント">公式ドキュメント</h3>
<ul>
<li><a href="https://docs.anthropic.com/claude/docs/claude-code">Claude Code 公式ドキュメント</a></li>
<li><a href="https://docs.anthropic.com/claude/docs/cli-reference">Claude Code CLI リファレンス</a></li>
<li><a href="https://docs.anthropic.com/claude/docs/configuration">Claude Code 設定ガイド</a></li>
<li><a href="https://docs.anthropic.com/claude/docs/troubleshooting">Claude Code トラブルシューティング</a></li>
</ul>
<h3 id="コミュニティリソース">コミュニティリソース</h3>
<ul>
<li><a href="https://github.com/anthropics/claude-code">Claude Code GitHub リポジトリ</a></li>
<li><a href="https://github.com/anthropics/claude-code/discussions">Claude Code ディスカッション</a></li>
<li><a href="https://github.com/anthropics/claude-code-examples">Claude Code サンプル集</a></li>
</ul>
<h3 id="関連ツール">関連ツール</h3>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=anthropic.claude-code">VS Code 拡張機能</a></li>
<li><a href="https://plugins.jetbrains.com/plugin/claude-code">JetBrains プラグイン</a></li>
</ul>
<h3 id="チュートリアル">チュートリアル</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=claude-code-intro">Claude Code 入門</a></li>
<li><a href="https://dev.to/claude-code-hooks-guide">hooks 活用ガイド</a></li>
<li><a href="https://medium.com/@claude-code-agents">エージェント開発ガイド</a></li>
</ul>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",31]}]," ","Claude Code 上級機能完全ガイド：/hooks, /agent, /cache, /reset など全コマンド解説"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-08-11 01:36"]}],"$undefined",["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Claude Code"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"hooks"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"agent"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"cache"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"CLI"}],["$","span","5",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"自動化"}],["$","span","6",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"AI開発"}],["$","span","7",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"初心者向け"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
