1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"KZrMisSdXyu7FDjuS9HOy","p":"","c":["","blog","rails-or-false-redundancy-guide",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","rails-or-false-redundancy-guide","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","rails-or-false-redundancy-guide","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Uh4hAYsbsG-1Jz2BoY2Y9",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:T491b,<h1 id="rails初心者が見落としがちな-falseの冗長性とテンプレートでの真偽値評価">Rails初心者が見落としがちな『|| false』の冗長性とテンプレートでの真偽値評価</h1>
<p>Railsアプリケーションを開発していると、テンプレート内で条件分岐を書く機会が多くあります。その際、以下のようなコードを書いたことはありませんか？</p>
<pre><code class="language-haml">- if @is_display_banner || false
  .banner
    お知らせ: システムメンテナンスを実施します
</code></pre>
<p>実は、この<code>|| false</code>の部分は<strong>不要</strong>です。この記事では、なぜ不要なのか、Railsのテンプレートエンジンでの真偽値評価の仕組みから、より簡潔で読みやすいコードの書き方まで詳しく解説します。</p>
<h2 id="この記事で学べること">この記事で学べること</h2>
<ul>
<li>✅ <strong>Railsテンプレートでの<code>nil</code>と<code>false</code>の評価ルール</strong></li>
<li>✅ <strong><code>|| false</code>が冗長になる理由と仕組み</strong></li>
<li>✅ <strong>より簡潔で保守性の高いコードの書き方</strong></li>
<li>✅ <strong>実際の開発現場でよくある間違いパターンと修正方法</strong></li>
</ul>
<h2 id="前提知識rubyの真偽値評価">前提知識：Rubyの真偽値評価</h2>
<p>まず、Rubyの基本的な真偽値評価ルールを確認しましょう。</p>
<h3 id="rubyで偽とみなされる値">Rubyで「偽」とみなされる値</h3>
<p>Rubyでは、以下の2つの値だけが「偽（falsy）」として扱われます：</p>
<pre><code class="language-ruby">nil   # 偽
false # 偽
</code></pre>
<h3 id="rubyで真とみなされる値">Rubyで「真」とみなされる値</h3>
<p>それ以外のすべての値は「真（truthy）」として扱われます：</p>
<pre><code class="language-ruby">true        # 真
0           # 真（多くの言語とは異なり、Rubyでは0も真）
""          # 真（空文字列も真）
[]          # 真（空配列も真）
{}          # 真（空ハッシュも真）
"false"     # 真（文字列の"false"も真）
</code></pre>
<p>💡 <strong>他の言語との違い</strong>: JavaScript、Python、PHPなどでは<code>0</code>、<code>""</code>、<code>[]</code>が偽として扱われることがありますが、Rubyでは<code>nil</code>と<code>false</code>以外はすべて真です。</p>
<h2 id="railsテンプレートでのインスタンス変数評価">Railsテンプレートでのインスタンス変数評価</h2>
<p>Railsのテンプレート（HamlやERB）では、インスタンス変数が特別な方法で評価されます。</p>
<h3 id="インスタンス変数が存在しない場合">インスタンス変数が存在しない場合</h3>
<pre><code class="language-ruby"># コントローラーで @banner_enabled を設定していない場合
class HomeController &#x3C; ApplicationController
  def index
    # @banner_enabled を設定せず
  end
end
</code></pre>
<pre><code class="language-haml">&#x3C;!-- テンプレートで参照すると -->
- if @banner_enabled
  .banner お知らせ
  
&#x3C;!-- これは以下と同等 -->
- if nil  # @banner_enabled が nil として評価される
  .banner お知らせ
</code></pre>
<p><strong>結果</strong>: <code>nil</code>は偽なので、バナーは表示されません。</p>
<h3 id="インスタンス変数が明示的に設定されている場合">インスタンス変数が明示的に設定されている場合</h3>
<pre><code class="language-ruby">class HomeController &#x3C; ApplicationController
  def index
    @banner_enabled = true   # 明示的に true を設定
    # または
    @banner_enabled = false  # 明示的に false を設定
    # または  
    @banner_enabled = nil    # 明示的に nil を設定
  end
end
</code></pre>
<h2 id="なぜ--false-が冗長なのか">なぜ <code>|| false</code> が冗長なのか</h2>
<p>それでは、具体的に<code>|| false</code>がなぜ不要なのかを見てみましょう。</p>
<h3 id="パターン1-インスタンス変数が存在しない場合">パターン1: インスタンス変数が存在しない場合</h3>
<pre><code class="language-haml">&#x3C;!-- 冗長な書き方 -->
- if @banner_enabled || false
  .banner お知らせ

&#x3C;!-- 簡潔な書き方 -->  
- if @banner_enabled
  .banner お知らせ
</code></pre>
<p><strong>どちらも同じ動作</strong>:</p>
<ul>
<li><code>@banner_enabled</code>が存在しない → <code>nil</code>として評価</li>
<li><code>nil || false</code> → <code>false</code></li>
<li><code>nil</code>そのものも偽なので、結果は同じ</li>
</ul>
<h3 id="パターン2-インスタンス変数が-true-の場合">パターン2: インスタンス変数が <code>true</code> の場合</h3>
<pre><code class="language-ruby"># コントローラー
@banner_enabled = true
</code></pre>
<pre><code class="language-haml">&#x3C;!-- 冗長な書き方 -->
- if @banner_enabled || false  # true || false → true
  .banner お知らせ

&#x3C;!-- 簡潔な書き方 -->
- if @banner_enabled           # true
  .banner お知らせ
</code></pre>
<p><strong>どちらも同じ動作</strong>: バナーが表示される</p>
<h3 id="パターン3-インスタンス変数が-false-の場合">パターン3: インスタンス変数が <code>false</code> の場合</h3>
<pre><code class="language-ruby"># コントローラー  
@banner_enabled = false
</code></pre>
<pre><code class="language-haml">&#x3C;!-- 冗長な書き方 -->
- if @banner_enabled || false  # false || false → false
  .banner お知らせ

&#x3C;!-- 簡潔な書き方 -->
- if @banner_enabled           # false  
  .banner お知らせ
</code></pre>
<p><strong>どちらも同じ動作</strong>: バナーが表示されない</p>
<h2 id="論理演算子--の動作原理">論理演算子 <code>||</code> の動作原理</h2>
<p><code>||</code>演算子の動作を詳しく理解しましょう。</p>
<h3 id="基本的な動作">基本的な動作</h3>
<pre><code class="language-ruby"># 左辺が真の場合、右辺は評価されず左辺を返す
true || false   # → true
true || nil     # → true  
"hello" || nil  # → "hello"

# 左辺が偽の場合、右辺を評価して返す
false || true   # → true
false || false  # → false
nil || "hello"  # → "hello"
nil || false    # → false
</code></pre>
<h3 id="-false-の場合の詳細"><code>|| false</code> の場合の詳細</h3>
<pre><code class="language-ruby"># Case 1: 左辺が真
@banner_enabled = true
result = @banner_enabled || false  # → true（右辺のfalseは評価されない）

# Case 2: 左辺が false
@banner_enabled = false  
result = @banner_enabled || false  # → false（右辺のfalseが返される）

# Case 3: 左辺が nil（変数が存在しない場合）
# @banner_enabled は定義されていない
result = @banner_enabled || false  # → false（右辺のfalseが返される）
</code></pre>
<p>つまり、どのケースでも<code>|| false</code>があってもなくても、<code>if</code>文での評価結果は変わりません。</p>
<h2 id="実際のコード例での比較">実際のコード例での比較</h2>
<h3 id="-冗長な書き方の例">❌ 冗長な書き方の例</h3>
<pre><code class="language-haml">&#x3C;!-- app/views/shared/_header.html.haml -->
- if @show_maintenance_notice || false
  .maintenance-notice
    = @maintenance_notice_text || "システムメンテナンス中"

- if @show_user_menu || false
  .user-menu
    = render 'user_menu'
    
- if @display_flash_messages || false
  .flash-messages
    - flash.each do |type, message|
      .flash{class: type}= message
</code></pre>
<h3 id="-簡潔で読みやすい書き方">✅ 簡潔で読みやすい書き方</h3>
<pre><code class="language-haml">&#x3C;!-- app/views/shared/_header.html.haml -->
- if @show_maintenance_notice
  .maintenance-notice
    = @maintenance_notice_text || "システムメンテナンス中"

- if @show_user_menu
  .user-menu
    = render 'user_menu'
    
- if @display_flash_messages
  .flash-messages
    - flash.each do |type, message|
      .flash{class: type}= message
</code></pre>
<h2 id="erbでの例">ERBでの例</h2>
<p>HamlだけでなくERBでも同様です：</p>
<h3 id="-冗長な書き方">❌ 冗長な書き方</h3>
<pre><code class="language-erb">&#x3C;!-- app/views/layouts/application.html.erb -->
&#x3C;% if @show_sidebar || false %>
  &#x3C;aside class="sidebar">
    &#x3C;%= render 'shared/sidebar' %>
  &#x3C;/aside>
&#x3C;% end %>

&#x3C;% if @enable_analytics || false %>
  &#x3C;%= render 'shared/analytics' %>
&#x3C;% end %>
</code></pre>
<h3 id="-簡潔な書き方">✅ 簡潔な書き方</h3>
<pre><code class="language-erb">&#x3C;!-- app/views/layouts/application.html.erb -->
&#x3C;% if @show_sidebar %>
  &#x3C;aside class="sidebar">
    &#x3C;%= render 'shared/sidebar' %>
  &#x3C;/aside>
&#x3C;% end %>

&#x3C;% if @enable_analytics %>
  &#x3C;%= render 'shared/analytics' %>
&#x3C;% end %>
</code></pre>
<h2 id="なぜ--false-を書いてしまうのか">なぜ <code>|| false</code> を書いてしまうのか？</h2>
<h3 id="よくある理由と誤解">よくある理由と誤解</h3>
<h4 id="1-他の言語からの影響">1. <strong>他の言語からの影響</strong></h4>
<pre><code class="language-javascript">// JavaScript
if (variable || false) {  // undefinedの場合にfalseにしたい
  // 処理
}
</code></pre>
<p>JavaScriptでは<code>undefined</code>や<code>null</code>を明示的に<code>false</code>に変換する意図がありますが、Rubyでは不要です。</p>
<h4 id="2-安全のためという誤った認識">2. <strong>「安全のため」という誤った認識</strong></h4>
<pre><code class="language-haml">&#x3C;!-- 「変数が存在しない場合のエラーを防ぐため」と思っている -->
- if @some_variable || false
</code></pre>
<p>しかし、Railsテンプレートでは存在しないインスタンス変数は自動的に<code>nil</code>として評価されるため、エラーにはなりません。</p>
<h4 id="3-デフォルト値の設定と混同">3. <strong>デフォルト値の設定と混同</strong></h4>
<pre><code class="language-ruby"># これは意味がある（デフォルト値の設定）
message = @user_message || "デフォルトメッセージ"

# これは意味がない（|| false）
if @show_banner || false
</code></pre>
<p>デフォルト値の設定では<code>||</code>演算子が有効ですが、<code>if</code>文の条件では不要です。</p>
<h2 id="正しいデフォルト値の扱い方">正しいデフォルト値の扱い方</h2>
<h3 id="コントローラーでの初期化">コントローラーでの初期化</h3>
<pre><code class="language-ruby">class ApplicationController &#x3C; ActionController::Base
  before_action :set_common_flags
  
  private
  
  def set_common_flags
    # 明示的にデフォルト値を設定
    @show_maintenance_notice = false
    @show_user_menu = true
    @enable_analytics = Rails.env.production?
  end
end
</code></pre>
<h3 id="ヘルパーメソッドの活用">ヘルパーメソッドの活用</h3>
<pre><code class="language-ruby"># app/helpers/application_helper.rb
module ApplicationHelper
  def show_maintenance_notice?
    @show_maintenance_notice || Rails.application.config.maintenance_mode
  end
  
  def show_user_menu?
    @show_user_menu.nil? ? user_signed_in? : @show_user_menu
  end
end
</code></pre>
<pre><code class="language-haml">&#x3C;!-- テンプレートで使用 -->
- if show_maintenance_notice?
  .maintenance-notice
    = maintenance_notice_text
    
- if show_user_menu?
  = render 'shared/user_menu'
</code></pre>
<h2 id="より高度なパターン">より高度なパターン</h2>
<h3 id="複数条件の組み合わせ">複数条件の組み合わせ</h3>
<pre><code class="language-haml">&#x3C;!-- ❌ 冗長 -->
- if (@user_signed_in || false) &#x26;&#x26; (@show_premium_features || false)
  .premium-section
    = render 'premium_features'

&#x3C;!-- ✅ 簡潔 -->
- if @user_signed_in &#x26;&#x26; @show_premium_features
  .premium-section  
    = render 'premium_features'
</code></pre>
<h3 id="否定条件の場合">否定条件の場合</h3>
<pre><code class="language-haml">&#x3C;!-- ❌ 冗長 -->
- unless @hide_footer || false
  = render 'shared/footer'

&#x3C;!-- ✅ 簡潔 -->
- unless @hide_footer
  = render 'shared/footer'
</code></pre>
<h2 id="パフォーマンスへの影響">パフォーマンスへの影響</h2>
<h3 id="微細だが意味のある改善">微細だが意味のある改善</h3>
<pre><code class="language-ruby"># 冗長な場合：|| false の評価コストが発生
# @banner_enabled || false

# 簡潔な場合：不要な評価がない  
# @banner_enabled
</code></pre>
<p>一回の実行では無視できるレベルですが、アクセス数の多いページでは積み重なります。</p>
<h3 id="メモリ使用量">メモリ使用量</h3>
<pre><code class="language-haml">&#x3C;!-- 1000個の条件がある大きなテンプレート -->
- 1000.times do |i|
  - if instance_variable_get("@flag_#{i}") || false  # 冗長
    .item= "Item #{i}"

&#x3C;!-- より効率的 -->
- 1000.times do |i|  
  - if instance_variable_get("@flag_#{i}")           # 簡潔
    .item= "Item #{i}"
</code></pre>
<h2 id="実際の開発現場での適用">実際の開発現場での適用</h2>
<h3 id="コードレビューでのチェックポイント">コードレビューでのチェックポイント</h3>
<pre><code class="language-ruby"># レビュー時にチェックすべきパターン
# ❌ 見つけたら修正を提案
if @variable || false
unless @variable || false  
@variable || false ? true : false

# ✅ 推奨パターン
if @variable
unless @variable
@variable ? true : false  # 明示的にboolean化が必要な場合のみ
</code></pre>
<h3 id="リファクタリングの進め方">リファクタリングの進め方</h3>
<ol>
<li><strong>一括置換で対応可能</strong></li>
</ol>
<pre><code class="language-bash"># 一括置換例（注意深く実行）
find app/views -name "*.haml" -exec sed -i 's/ || false//g' {} \;
</code></pre>
<ol start="2">
<li><strong>テストの実行</strong></li>
</ol>
<pre><code class="language-bash"># 置換後は必ずテストを実行
rails test
rspec
</code></pre>
<ol start="3">
<li><strong>段階的な修正</strong></li>
</ol>
<pre><code class="language-ruby"># ファイル単位で修正して動作確認
# 1. app/views/shared/ から開始
# 2. 各コントローラーのビューを順次修正
# 3. レイアウトファイルを最後に修正
</code></pre>
<h2 id="よくある質問faq">よくある質問（FAQ）</h2>
<h3 id="q--false-を書くことでエラーが防げるのでは">Q: <code>|| false</code> を書くことでエラーが防げるのでは？</h3>
<p><strong>A</strong>: Railsテンプレートでは、存在しないインスタンス変数は自動的に<code>nil</code>として評価されるため、エラーにはなりません。<code>|| false</code>は不要です。</p>
<h3 id="q-他の開発者が理解しやすいように明示的に書くべきでは">Q: 他の開発者が理解しやすいように明示的に書くべきでは？</h3>
<p><strong>A</strong>: Rubyらしいコードは簡潔性を重視します。<code>|| false</code>があることで、逆に「なぜこれが必要なのか？」と混乱を招く可能性があります。</p>
<h3 id="q--true-の場合はどうですか">Q: <code>|| true</code> の場合はどうですか？</h3>
<p><strong>A</strong>: <code>|| true</code>は意味があります。これは「変数が偽の場合に強制的に<code>true</code>にする」という明確な意図があるためです。</p>
<pre><code class="language-haml">&#x3C;!-- これは意味がある -->
- if @force_display || true
  .always-visible
    常に表示される内容
</code></pre>
<h3 id="q-nil-と-false-を区別したい場合は">Q: <code>nil</code> と <code>false</code> を区別したい場合は？</h3>
<p><strong>A</strong>: 明示的に区別が必要な場合は、以下のような書き方をします：</p>
<pre><code class="language-ruby"># コントローラー
@banner_status = :enabled   # :enabled, :disabled, nil

# ヘルパー
def show_banner?
  case @banner_status
  when :enabled then true
  when :disabled then false  
  else default_banner_setting  # nil の場合のデフォルト処理
  end
end
</code></pre>
<h2 id="まとめ">まとめ</h2>
<h3 id="重要なポイント">重要なポイント</h3>
<ol>
<li><strong><code>|| false</code> は冗長</strong>: Railsテンプレートでは<code>nil</code>も<code>false</code>も偽として評価される</li>
<li><strong>簡潔性を重視</strong>: Rubyらしいコードは不要な記述を避ける</li>
<li><strong>明確な意図を持つ</strong>: デフォルト値の設定と条件分岐は分けて考える</li>
<li><strong>一貫性を保つ</strong>: チーム全体で統一したスタイルを採用する</li>
</ol>
<h3 id="推奨事項">推奨事項</h3>
<pre><code class="language-haml">&#x3C;!-- ✅ 推奨 -->
- if @show_content
  .content= @content_text
  
- unless @hide_section  
  .section= render 'shared/section'

&#x3C;!-- ❌ 非推奨 -->  
- if @show_content || false
  .content= @content_text
  
- unless @hide_section || false
  .section= render 'shared/section'
</code></pre>
<h3 id="次のステップ">次のステップ</h3>
<ul>
<li>既存のコードベースで<code>|| false</code>パターンを検索して修正</li>
<li>チームのコーディングガイドラインに簡潔な書き方を追加</li>
<li>コードレビュー時にこのパターンをチェック項目に含める</li>
</ul>
<p>より簡潔で保守性の高いRailsアプリケーションを目指して、不要な冗長性を排除していきましょう！</p>
<h2 id="参考リンク">参考リンク</h2>
<ul>
<li><a href="https://railsguides.jp/layouts_and_rendering.html">Rails Guides - レイアウトとレンダリング</a></li>
<li><a href="https://docs.ruby-lang.org/ja/latest/doc/spec=2foperator.html">Ruby公式ドキュメント - 論理演算子</a></li>
<li><a href="https://haml.info/">Haml公式ドキュメント</a></li>
<li><a href="https://docs.ruby-lang.org/ja/latest/library/erb.html">ERB公式ドキュメント</a></li>
</ul>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",45]}]," ","Rails初心者が見落としがちな『|| false』の冗長性とテンプレートでの真偽値評価"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-09-05 11:59"]}],["$","li",null,{"className":"text-gray-500 text-sm","children":["更新日時: ","2025-09-05 11:59"]}],["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Rails"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Ruby"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"HAML"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"ERB"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Template"}],["$","span","5",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Best Practices"}],["$","span","6",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Code Quality"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
