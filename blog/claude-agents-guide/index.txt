1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"p3p38c87R5BfkPUNQY3w8","p":"","c":["","blog","claude-agents-guide",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","claude-agents-guide","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","claude-agents-guide","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","zPBsgMWoO81P8DDuTMw0q",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:T793d,<p>Claude Codeの最新機能「Agents」を使って、バックエンドエンジニア、フロントエンドエンジニア、データベース設計者など、専門性を持った複数のAIエージェントを構築し、チーム開発のような体験を実現する方法を解説します。</p>
<h2 id="-初心者向け解説">💡 初心者向け解説</h2>
<h3 id="agentsとは何か">Agentsとは何か？</h3>
<p><strong>簡単に言うと</strong>: AIに「役職」や「専門分野」を与える機能です。</p>
<pre><code>通常のAI: 「何でも答えるけど、広く浅い知識」
Agents: 「特定分野のエキスパートとして深い知識で回答」
</code></pre>
<h3 id="なぜagentsが必要">なぜAgentsが必要？</h3>
<p>実際の開発現場を想像してください：</p>
<ul>
<li><strong>フロントエンドの相談</strong> → フロントエンドエンジニアに聞く</li>
<li><strong>データベースの相談</strong> → DBAに聞く</li>
<li><strong>セキュリティの相談</strong> → セキュリティエンジニアに聞く</li>
</ul>
<p>Agentsを使うと、<strong>この「専門家に聞く」体験をAIで実現</strong>できます。</p>
<h2 id="-目次">📚 目次</h2>
<ul>
<li><a href="#claude-agents%E3%81%A8%E3%81%AF">Claude Agentsとは</a></li>
<li><a href="#agents%E3%81%AE%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">Agentsの基本概念</a></li>
<li><a href="#%E5%AE%9F%E8%A3%85%E4%BE%8B%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2agent">実装例：バックエンドエンジニアAgent</a></li>
<li><a href="#agents%E3%81%AE%E8%A8%AD%E5%AE%9A%E9%A0%85%E7%9B%AE%E8%A9%B3%E7%B4%B0">Agentsの設定項目詳細</a></li>
<li><a href="#%E8%A4%87%E6%95%B0agent%E3%81%AE%E9%80%A3%E6%90%BA">複数Agentの連携</a></li>
<li><a href="#%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E6%B4%BB%E7%94%A8%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">実践的な活用パターン</a></li>
<li><a href="#%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9">ベストプラクティス</a></li>
<li><a href="#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0">トラブルシューティング</a></li>
<li><a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ</a></li>
</ul>
<h2 id="claude-agentsとは">Claude Agentsとは</h2>
<p>Claude Code Agentsは、特定の専門性や役割を持ったAIエージェントを定義できる機能です。各エージェントは独自の知識、思考パターン、応答スタイルを持ち、まるで専門家チームと協働しているような開発体験を提供します。</p>
<h3 id="-agentsで実現できること">🎯 Agentsで実現できること</h3>
<h4 id="1-仮想的な専門家チームの構築">1. <strong>仮想的な専門家チームの構築</strong></h4>
<pre><code>実例：ECサイト開発プロジェクト
├── UI/UXデザイナーAgent → ユーザビリティ設計
├── フロントエンドAgent → React実装
├── バックエンドAgent → API設計
├── DBAAgent → データベース最適化
├── セキュリティAgent → 脆弱性診断
└── パフォーマンスAgent → 負荷テスト設計
</code></pre>
<h4 id="2-コンテキストに応じた専門的アドバイス">2. <strong>コンテキストに応じた専門的アドバイス</strong></h4>
<pre><code class="language-javascript">// 同じ「ログイン機能」でも、Agentによって視点が異なる

// Security Agent の回答
"SQLインジェクション対策、レート制限、2FA実装を推奨"

// UX Agent の回答
"ソーシャルログイン、パスワードレス認証でUX向上"

// Backend Agent の回答
"JWT実装、セッション管理、認証ミドルウェア設計"
</code></pre>
<h4 id="3-段階的な開発プロセスの自動化">3. <strong>段階的な開発プロセスの自動化</strong></h4>
<div class="mermaid">graph LR
    A[要件定義] --&gt; B[設計]
    B --&gt; C[実装]
    C --&gt; D[テスト]
    D --&gt; E[デプロイ]
    
    A -.-&gt; F[Product Manager Agent]
    B -.-&gt; G[Architect Agent]
    C -.-&gt; H[Developer Agent]
    D -.-&gt; I[QA Agent]
    E -.-&gt; J[DevOps Agent]</div>
<h4 id="4-プロジェクト固有の知識継承">4. <strong>プロジェクト固有の知識継承</strong></h4>
<pre><code class="language-markdown"># 新人開発者の立ち上がり支援
Day 1: Onboarding Agentがプロジェクト概要を説明
Day 2: Architecture Agentがシステム設計を解説
Day 3: Coding Standards Agentが規約を指導
Day 4: 各専門Agentと実践的な開発開始
</code></pre>
<h4 id="5-多角的なコードレビュー">5. <strong>多角的なコードレビュー</strong></h4>
<pre><code>1つのPRを複数の視点でレビュー：
✓ Performance Agent: "このループはO(n²)、最適化可能"
✓ Security Agent: "入力検証が不足、XSS脆弱性あり"
✓ Maintainability Agent: "複雑度が高い、リファクタリング推奨"
✓ Testing Agent: "エッジケースのテスト不足"
</code></pre>
<h3 id="従来の開発支援との違い">従来の開発支援との違い</h3>
<div class="mermaid">graph TB
    subgraph &quot;従来のAI支援&quot;
        A[単一のAI] --&gt; B[汎用的な回答]
    end
    
    subgraph &quot;Claude Agents&quot;
        C[ユーザー] --&gt; D[Agent選択]
        D --&gt; E[Backend Engineer]
        D --&gt; F[Frontend Engineer]
        D --&gt; G[DBA]
        D --&gt; H[Security Expert]
        E --&gt; I[専門的な回答]
        F --&gt; I
        G --&gt; I
        H --&gt; I
    end</div>
<h3 id="メリット">メリット</h3>
<ol>
<li><strong>専門性の高い回答</strong>: 各分野のエキスパートとして振る舞う</li>
<li><strong>コンテキストの明確化</strong>: エージェントごとに異なる視点</li>
<li><strong>効率的な問題解決</strong>: 適切な専門家に相談できる</li>
<li><strong>一貫性のある設計</strong>: 各エージェントが守るべき原則を定義</li>
</ol>
<h2 id="agentsの基本概念">Agentsの基本概念</h2>
<h3 id="ファイル構造">ファイル構造</h3>
<pre><code>プロジェクトルート/
├── .claude/
│   └── agents/
│       ├── backend-engineer.md
│       ├── frontend-engineer.md
│       ├── database-architect.md
│       ├── security-expert.md
│       └── devops-engineer.md
</code></pre>
<h3 id="agent定義ファイルの基本構造">Agent定義ファイルの基本構造</h3>
<pre><code class="language-markdown">---
name: agent-name
description: エージェントの説明と使用例
model: opus/sonnet/haiku
color: green/blue/red/yellow
---

# エージェントのプロンプト本文
ここに詳細な指示や専門知識を記述
</code></pre>
<h2 id="実装例バックエンドエンジニアagent">実装例：バックエンドエンジニアAgent</h2>
<p>実際のプロジェクトで使用されているバックエンドエンジニアAgentの例を見てみましょう。</p>
<h3 id="-初心者向けこのagentができること">🔰 初心者向け：このAgentができること</h3>
<ol>
<li>
<p><strong>API設計のアドバイス</strong></p>
<ul>
<li>「ユーザー情報を取得するAPIはどう設計すべき？」</li>
<li>→ RESTfulな設計原則に基づいた具体的な実装例を提供</li>
</ul>
</li>
<li>
<p><strong>パフォーマンス問題の解決</strong></p>
<ul>
<li>「データベースの検索が遅い」</li>
<li>→ インデックスの追加やクエリ最適化を提案</li>
</ul>
</li>
<li>
<p><strong>セキュリティの実装</strong></p>
<ul>
<li>「認証機能を実装したい」</li>
<li>→ JWT実装やセキュリティベストプラクティスを指導</li>
</ul>
</li>
</ol>
<h3 id="claudeagentsbackend-engineermd"><code>.claude/agents/backend-engineer.md</code></h3>
<pre><code class="language-markdown">---
name: backend-engineer
description: Use this agent when you need a Backend Engineer's expertise on the Drill Layer platform. This agent specializes in server-side architecture, database design, API development, and scalability for educational platforms.
model: opus
color: green
---

You are a Senior Backend Engineer specializing in scalable educational platforms, working on the **Drill Layer (ドリルレイヤー)** educational material sharing platform.

## Your Technical Expertise:
- 8+ years of Node.js/Express.js development
- Expert in PostgreSQL optimization and full-text search
- AWS services (S3, CloudFront, Lambda, RDS)
- Microservices architecture and API design
- Real-time systems and WebSocket implementation

## Technology Stack:

### Current Implementation:
- Runtime: Node.js v18+ with TypeScript
- Framework: Express.js
- Database: PostgreSQL 14+ with pg_trgm extension
- File Storage: AWS S3
- Cache: Redis (planned)
- Queue: Bull/BullMQ (planned)
- Search: PostgreSQL full-text search → ElasticSearch (future)

## Core Responsibilities:

### 1. **APIアーキテクチャ設計**
```typescript
// RESTful API設計原則
GET    /api/materials       // 一覧取得
GET    /api/materials/:id   // 詳細取得
POST   /api/materials       // 新規作成
PUT    /api/materials/:id   // 更新
DELETE /api/materials/:id   // 削除
</code></pre>
<h3 id="2-データベース設計と最適化">2. <strong>データベース設計と最適化</strong></h3>
<pre><code class="language-sql">-- 教材テーブルの最適化
CREATE INDEX idx_materials_search ON materials 
  USING gin(to_tsvector('japanese', title || ' ' || description));
</code></pre>
<h3 id="3-パフォーマンス最適化">3. <strong>パフォーマンス最適化</strong></h3>
<ul>
<li>N+1問題の解決: Eager loading、DataLoader実装</li>
<li>キャッシング戦略: Redis による頻繁アクセスデータのキャッシュ</li>
<li>クエリ最適化: EXPLAIN分析、インデックス設計</li>
</ul>
<pre><code>
## Agentsの設定項目詳細

### 1. メタデータセクション（YAMLフロントマター）

| 項目 | 必須 | 説明 | 値の例 |
|------|------|------|--------|
| `name` | ✅ | エージェントの識別子 | `backend-engineer`, `frontend-dev` |
| `description` | ✅ | エージェントの説明と使用例 | 具体的な使用シーンを含める |
| `model` | ❌ | 使用するClaudeモデル | `opus`, `sonnet`, `haiku` |
| `color` | ❌ | UIでの表示色 | `green`, `blue`, `red`, `yellow` |

### 2. descriptionの書き方

```markdown
description: |
  Use this agent when you need [専門分野] expertise. 
  This agent specializes in [具体的な技術や領域].
  &#x3C;example>
  Context: [使用シーン]
  user: "[ユーザーの質問例]"
  assistant: "[エージェント選択の理由]"
  &#x3C;commentary>
  [なぜこのエージェントが適切かの説明]
  &#x3C;/commentary>
  &#x3C;/example>
</code></pre>
<h3 id="3-プロンプト本文の構成要素">3. プロンプト本文の構成要素</h3>
<h4 id="役割定義">役割定義</h4>
<pre><code class="language-markdown">You are a [役職/専門性] specializing in [専門分野], working on [プロジェクト名].
</code></pre>
<h4 id="技術的専門性">技術的専門性</h4>
<pre><code class="language-markdown">## Your Technical Expertise:
- [経験年数]の[技術スタック]
- [専門分野]のエキスパート
- [使用ツール/フレームワーク]
</code></pre>
<h4 id="技術スタック">技術スタック</h4>
<pre><code class="language-markdown">## Technology Stack:
### Current Implementation:
- Language: [使用言語とバージョン]
- Framework: [フレームワーク]
- Database: [データベース]
- Infrastructure: [インフラ構成]
</code></pre>
<h4 id="責任範囲">責任範囲</h4>
<pre><code class="language-markdown">## Core Responsibilities:
### 1. **[責任領域1]**
[具体的な実装例やコード]

### 2. **[責任領域2]**
[具体的な実装例やコード]
</code></pre>
<h4 id="出力ガイドライン">出力ガイドライン</h4>
<pre><code class="language-markdown">## Output Guidelines:
1. **[出力形式1]**: [説明]
2. **[出力形式2]**: [説明]
3. **[言語設定]**: 日本語/英語の使い分け
</code></pre>
<h2 id="複数agentの連携">複数Agentの連携</h2>
<h3 id="実装例フルスタック開発チーム">実装例：フルスタック開発チーム</h3>
<pre><code>.claude/agents/
├── backend-engineer.md      # API設計、DB最適化
├── frontend-engineer.md     # UI/UX、React実装
├── database-architect.md    # DB設計、正規化
├── security-expert.md       # セキュリティ監査
└── devops-engineer.md      # CI/CD、インフラ
</code></pre>
<h3 id="フロントエンドエンジニアagent例">フロントエンドエンジニアAgent例</h3>
<pre><code class="language-markdown">---
name: frontend-engineer
description: Use this agent for React, TypeScript, and UI/UX implementation
model: sonnet
color: blue
---

You are a Senior Frontend Engineer specializing in React and TypeScript.

## Your Expertise:
- React 18+ with TypeScript
- Next.js App Router
- Tailwind CSS &#x26; Radix UI
- State Management (Zustand, TanStack Query)
- Performance optimization

## Design Principles:
- Mobile-first responsive design
- Accessibility (WCAG 2.1 AA)
- Core Web Vitals optimization
- Component-driven development

## Code Standards:
```typescript
// コンポーネント例
interface ButtonProps {
  variant: 'primary' | 'secondary';
  size: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
  onClick?: () => void;
  disabled?: boolean;
}

export const Button: React.FC&#x3C;ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  children,
  onClick,
  disabled = false
}) => {
  return (
    &#x3C;button
      className={cn(
        'rounded-lg font-medium transition-colors',
        variants[variant],
        sizes[size],
        disabled &#x26;&#x26; 'opacity-50 cursor-not-allowed'
      )}
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    &#x3C;/button>
  );
};
</code></pre>
<h2 id="実践的な活用パターン">実践的な活用パターン</h2>
<h3 id="-実際の開発シナリオ">🌟 実際の開発シナリオ</h3>
<h4 id="シナリオ1-ecサイトの商品検索機能を作りたい">シナリオ1: 「ECサイトの商品検索機能を作りたい」</h4>
<pre><code class="language-markdown">開発者: 「商品検索機能を実装したいです」

1. Database Agent に相談
   → 「検索用のインデックス設計とテーブル構造を提案」
   
2. Backend Agent に相談
   → 「検索APIのエンドポイント設計と実装」
   
3. Frontend Agent に相談
   → 「検索UIコンポーネントとUX設計」
   
4. Performance Agent に相談
   → 「大量データでの検索最適化」
</code></pre>
<h4 id="シナリオ2-アプリが遅い問題の解決">シナリオ2: 「アプリが遅い！」問題の解決</h4>
<pre><code class="language-markdown">症状: ページ読み込みに5秒かかる

1. Performance Agent が診断
   → 「N+1問題を検出、DBクエリが100回実行されている」
   
2. Database Agent が解決策提示
   → 「JOINを使った最適化クエリ」
   
3. Backend Agent が実装
   → 「DataLoaderパターンでバッチ処理」
   
結果: 5秒 → 0.5秒に改善！
</code></pre>
<h3 id="パターン1-機能開発フロー">パターン1: 機能開発フロー</h3>
<div class="mermaid">sequenceDiagram
    participant User as 開発者
    participant FE as Frontend Agent
    participant BE as Backend Agent
    participant DB as Database Agent
    
    User-&gt;&gt;DB: テーブル設計を相談
    DB--&gt;&gt;User: スキーマ設計提案
    User-&gt;&gt;BE: API設計を依頼
    BE--&gt;&gt;User: RESTful API仕様
    User-&gt;&gt;FE: UI実装を相談
    FE--&gt;&gt;User: Reactコンポーネント</div>
<h3 id="パターン2-トラブルシューティング">パターン2: トラブルシューティング</h3>
<pre><code class="language-bash"># パフォーマンス問題の解決
1. Backend Agent: "N+1問題を特定、クエリ最適化を提案"
2. Database Agent: "インデックス設計の見直し"
3. DevOps Agent: "キャッシング戦略の実装"
</code></pre>
<h3 id="パターン3-セキュリティレビュー">パターン3: セキュリティレビュー</h3>
<pre><code class="language-markdown">## Security Agentの活用
1. コードレビュー時にSecurity Agentを呼び出し
2. OWASP Top 10に基づく脆弱性チェック
3. 修正提案とベストプラクティスの提供
</code></pre>
<h2 id="ベストプラクティス">ベストプラクティス</h2>
<h3 id="-初心者が陥りやすい失敗と対策">🎓 初心者が陥りやすい失敗と対策</h3>
<h4 id="失敗例1-汎用的すぎるagent">失敗例1: 汎用的すぎるAgent</h4>
<pre><code class="language-markdown">❌ 悪い例: developer.md
「私は開発者です」→ 専門性がない

✅ 良い例: react-specialist.md
「私はReact専門のフロントエンドエンジニアです」→ 明確な専門性
</code></pre>
<h4 id="失敗例2-情報不足のagent">失敗例2: 情報不足のAgent</h4>
<pre><code class="language-markdown">❌ 悪い例:
「バックエンドを担当します」

✅ 良い例:
「Node.js/TypeScriptで5年の経験
PostgreSQL、Redis、AWSの専門知識
教育プラットフォーム開発の実績」
</code></pre>
<h3 id="1-agent設計の原則">1. Agent設計の原則</h3>
<h4 id="単一責任の原則">単一責任の原則</h4>
<pre><code class="language-markdown">❌ 悪い例: general-engineer.md (何でも屋)
✅ 良い例: api-designer.md (API設計特化)
</code></pre>
<h4 id="明確な専門性">明確な専門性</h4>
<pre><code class="language-markdown">## Your Expertise:
- 具体的な技術スタック
- 経験年数や認定資格
- 得意分野と制限事項
</code></pre>
<h4 id="コンテキスト情報">コンテキスト情報</h4>
<pre><code class="language-markdown">## Project Context:
- プロジェクト名: Drill Layer
- ドメイン: 教育プラットフォーム
- ユーザー: 教師と生徒
- 規模: 100万ユーザー想定
</code></pre>
<h3 id="2-実装パターンの定義">2. 実装パターンの定義</h3>
<pre><code class="language-markdown">## Implementation Patterns:

### Clean Architecture:
/src/
├── domain/       # ビジネスロジック
├── application/  # ユースケース
├── infrastructure/ # 外部サービス
└── presentation/ # UI層

### エラーハンドリング:
```typescript
class AppError extends Error {
  constructor(
    public statusCode: number,
    public message: string,
    public isOperational = true
  ) {
    super(message);
  }
}
</code></pre>
<h3 id="3-出力形式の統一">3. 出力形式の統一</h3>
<pre><code class="language-markdown">## Output Format:
1. **問題分析**: 現状の課題を箇条書き
2. **解決策提案**: 複数の選択肢を提示
3. **実装例**: 動作するコードサンプル
4. **注意事項**: セキュリティ・パフォーマンス考慮
5. **次のステップ**: 実装後の確認事項
</code></pre>
<h2 id="トラブルシューティング">トラブルシューティング</h2>
<h3 id="よくある問題と解決法">よくある問題と解決法</h3>
<h4 id="問題1-agentが認識されない">問題1: Agentが認識されない</h4>
<p><strong>症状</strong>: エージェントを呼び出してもデフォルトの応答になる</p>
<p><strong>原因と対策</strong>:</p>
<pre><code class="language-bash"># ファイル配置を確認
ls -la .claude/agents/

# ファイル名が正しいか確認
# ✅ backend-engineer.md
# ❌ backend-engineer.txt
# ❌ backend_engineer.md

# YAMLフロントマターの形式確認
head -n 6 .claude/agents/backend-engineer.md
</code></pre>
<h4 id="問題2-期待した専門性が発揮されない">問題2: 期待した専門性が発揮されない</h4>
<p><strong>原因</strong>: プロンプトが曖昧または一般的すぎる</p>
<p><strong>改善例</strong>:</p>
<pre><code class="language-markdown"># Before
You are a backend engineer.

# After
You are a Senior Backend Engineer with 8+ years of experience 
in Node.js/TypeScript, specializing in scalable microservices 
architecture for educational platforms. You have deep expertise 
in PostgreSQL optimization, Redis caching, and AWS services.
</code></pre>
<h4 id="問題3-agentの応答が一貫しない">問題3: Agentの応答が一貫しない</h4>
<p><strong>原因</strong>: ガイドラインが不明確</p>
<p><strong>解決策</strong>:</p>
<pre><code class="language-markdown">## Strict Guidelines:
- ALWAYS use TypeScript (never plain JavaScript)
- ALWAYS include error handling
- ALWAYS add Japanese comments
- NEVER use deprecated APIs
- NEVER suggest insecure implementations
</code></pre>
<h3 id="デバッグテクニック">デバッグテクニック</h3>
<h4 id="1-agent動作確認">1. Agent動作確認</h4>
<pre><code class="language-bash"># Agentリストの確認
ls .claude/agents/*.md | xargs -I {} basename {} .md

# Agent内容の検証
grep -E "^name:|^model:" .claude/agents/*.md
</code></pre>
<h4 id="2-プロンプトテスト">2. プロンプトテスト</h4>
<pre><code class="language-markdown">## Test Prompts:
1. "このエージェントの専門分野を教えて"
2. "使用する技術スタックを列挙して"
3. "典型的なタスクの例を3つ挙げて"
</code></pre>
<h2 id="高度な活用法">高度な活用法</h2>
<h3 id="1-チェーンエージェント">1. チェーンエージェント</h3>
<p>複数のエージェントを連携させる：</p>
<pre><code class="language-markdown">## Workflow Example:
1. Requirements Agent → 要件定義
2. Architecture Agent → システム設計
3. Backend Agent → API実装
4. Frontend Agent → UI実装
5. Testing Agent → テスト作成
6. Review Agent → コードレビュー
</code></pre>
<h3 id="2-ドメイン特化agent">2. ドメイン特化Agent</h3>
<p>業界特有の知識を持つエージェント：</p>
<pre><code class="language-markdown">---
name: education-domain-expert
description: Educational platform domain knowledge
---

You are an Education Technology Expert with deep understanding of:
- Learning Management Systems (LMS)
- SCORM/xAPI standards
- Adaptive learning algorithms
- Student engagement metrics
- Educational data mining
</code></pre>
<h3 id="3-コードレビューagent">3. コードレビューAgent</h3>
<pre><code class="language-markdown">---
name: code-reviewer
description: Thorough code review and quality assurance
---

## Review Checklist:
- [ ] コーディング規約準拠
- [ ] セキュリティ脆弱性
- [ ] パフォーマンス問題
- [ ] テストカバレッジ
- [ ] ドキュメント完備
- [ ] エラーハンドリング
</code></pre>
<h2 id="実装サンプル集">実装サンプル集</h2>
<h3 id="データベース設計agent">データベース設計Agent</h3>
<pre><code class="language-markdown">---
name: database-architect
description: Database design and optimization expert
model: opus
color: yellow
---

You are a Database Architect with 10+ years of experience.

## Expertise:
- PostgreSQL, MySQL, MongoDB
- Data modeling and normalization
- Query optimization and indexing
- Sharding and replication
- Data migration strategies

## Design Principles:
1. **正規化レベル**: 第3正規形を基本とし、必要に応じて非正規化
2. **インデックス戦略**: カーディナリティとクエリパターンに基づく設計
3. **パーティショニング**: 時系列データは月次パーティション

## Output Format:
```sql
-- テーブル定義
CREATE TABLE materials (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- インデックス
CREATE INDEX idx_materials_created_at ON materials(created_at DESC);

-- 制約
ALTER TABLE materials ADD CONSTRAINT check_title_length 
    CHECK (char_length(title) >= 1);
</code></pre>
<h3 id="devops-agent">DevOps Agent</h3>
<pre><code class="language-markdown">---
name: devops-engineer
description: CI/CD and infrastructure automation
model: sonnet
color: purple
---

You are a DevOps Engineer specializing in cloud-native applications.

## Tech Stack:
- Container: Docker, Kubernetes
- CI/CD: GitHub Actions, Jenkins
- IaC: Terraform, CloudFormation
- Monitoring: Prometheus, Grafana
- Cloud: AWS, GCP

## Best Practices:
```yaml
# GitHub Actions Example
name: Deploy
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and Push
        run: |
          docker build -t app:${{ github.sha }} .
          docker push app:${{ github.sha }}
</code></pre>
<h2 id="パフォーマンス測定">パフォーマンス測定</h2>
<h3 id="agent応答速度の最適化">Agent応答速度の最適化</h3>
<pre><code class="language-markdown">## Performance Tips:
1. **モデル選択**:
   - 複雑なタスク: opus
   - 一般的なタスク: sonnet
   - 簡単なタスク: haiku

2. **プロンプト最適化**:
   - 必要最小限の情報に絞る
   - 具体例は3つまで
   - 冗長な説明を避ける

3. **キャッシング活用**:
   - よくある質問はFAQセクション
   - 定型処理はテンプレート化
</code></pre>
<h2 id="-すぐに始められるスターターキット">🚀 すぐに始められる！スターターキット</h2>
<h3 id="最小構成で始める3つのagent">最小構成で始める（3つのAgent）</h3>
<pre><code class="language-bash"># 1. ディレクトリ作成
mkdir -p .claude/agents

# 2. 基本の3エージェント作成
touch .claude/agents/frontend.md
touch .claude/agents/backend.md
touch .claude/agents/reviewer.md
</code></pre>
<h3 id="frontend-agent最小構成">Frontend Agent（最小構成）</h3>
<pre><code class="language-markdown">---
name: frontend
description: UI実装とユーザー体験の専門家
model: sonnet
---

あなたはフロントエンドエンジニアです。
React、TypeScript、TailwindCSSが専門です。
ユーザビリティとアクセシビリティを重視します。
</code></pre>
<h3 id="使い方">使い方</h3>
<pre><code>1. VS CodeでClaude Codeを開く
2. コマンドパレット（Cmd+Shift+P）
3. 「Claude: Select Agent」を選択
4. 作成したAgentを選択
5. 専門的な回答を得る！
</code></pre>
<h2 id="まとめ">まとめ</h2>
<p>Claude Code Agentsを活用することで、以下が実現できます：</p>
<h3 id="-実現できること">🎯 実現できること</h3>
<ol>
<li><strong>専門家チームの構築</strong>: 各分野のエキスパートAIエージェント</li>
<li><strong>一貫性のある開発</strong>: 統一されたコーディング規約とパターン</li>
<li><strong>効率的な問題解決</strong>: 適材適所でエージェントを活用</li>
<li><strong>知識の体系化</strong>: プロジェクト固有の知識をエージェントに集約</li>
<li><strong>品質向上</strong>: 専門的な視点からのレビューと提案</li>
</ol>
<h3 id="-導入効果">📈 導入効果</h3>
<ul>
<li><strong>開発速度</strong>: 専門的な回答により意思決定が高速化</li>
<li><strong>コード品質</strong>: 一貫したパターンとベストプラクティス</li>
<li><strong>学習曲線</strong>: 新規メンバーの立ち上がりが早い</li>
<li><strong>ドキュメント</strong>: エージェント自体が生きたドキュメント</li>
</ul>
<h3 id="-次のステップ">🚀 次のステップ</h3>
<ol>
<li>プロジェクトに<code>.claude/agents/</code>ディレクトリを作成</li>
<li>最初のエージェント（backend-engineer.md）を定義</li>
<li>実際の開発タスクで活用</li>
<li>フィードバックを基に改善</li>
<li>チーム全体でエージェントを共有</li>
</ol>
<p>Claude Code Agentsは、AIペアプログラミングの新しい形を提供し、より専門的で効率的な開発を可能にします。</p>
<h2 id="-導入前後の比較">📊 導入前後の比較</h2>
<h3 id="beforeagents導入前">Before（Agents導入前）</h3>
<pre><code>開発者「データベース設計について聞きたい」
AI「一般的なデータベース設計では...」
→ 汎用的で表面的な回答
</code></pre>
<h3 id="afteragents導入後">After（Agents導入後）</h3>
<pre><code>開発者「データベース設計について聞きたい」
DBA Agent「教育プラットフォームの特性を考慮すると、
          教材テーブルは時系列パーティション、
          検索はpg_trgmでの全文検索、
          生徒の進捗は非正規化してパフォーマンス優先...」
→ プロジェクト特化の具体的な回答
</code></pre>
<h2 id="よくある質問faq">よくある質問（FAQ）</h2>
<h3 id="q1-agentsは有料機能">Q1: Agentsは有料機能？</h3>
<p><strong>A</strong>: Claude Codeを使用できる環境なら無料で利用可能です。</p>
<h3 id="q2-何個までagent作れる">Q2: 何個までAgent作れる？</h3>
<p><strong>A</strong>: 制限なし。プロジェクトに必要なだけ作成できます。</p>
<h3 id="q3-チームで共有できる">Q3: チームで共有できる？</h3>
<p><strong>A</strong>: はい。<code>.claude/agents/</code>をGitで管理すればチーム全体で共有できます。</p>
<h3 id="q4-既存プロジェクトにも導入できる">Q4: 既存プロジェクトにも導入できる？</h3>
<p><strong>A</strong>: はい。<code>.claude/agents/</code>ディレクトリを追加するだけです。</p>
<h2 id="参考リンク">参考リンク</h2>
<ul>
<li><a href="https://docs.anthropic.com/claude-code">Claude Code Documentation</a></li>
<li><a href="https://docs.anthropic.com/claude-code/agents">Agent Configuration Guide</a></li>
<li><a href="https://docs.anthropic.com/claude-code/best-practices">Best Practices for AI Agents</a></li>
<li><a href="https://github.com/mt114ran/claude-agents-examples">実装例リポジトリ</a></li>
</ul>
<hr>
<p><em>この記事で紹介したAgent設定は、実際のプロジェクト「Drill Layer」で使用されているものを基にしています。</em></p>
<p><em>初心者の方向け：まずは1つのAgentから始めて、徐々に増やしていくことをお勧めします。</em></p>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",35]}]," ","Claude Code Agentsの実践活用法：専門特化型AIエージェントでチーム開発を実現"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-08-15 00:44"]}],"$undefined",["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Claude Code"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"AI Agents"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"開発効率化"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"チーム開発"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"カスタムエージェント"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
