1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
5:I[9665,[],"MetadataBoundary"]
7:I[9665,[],"OutletBoundary"]
a:I[4911,[],"AsyncMetadataOutlet"]
c:I[9665,[],"ViewportBoundary"]
e:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/21fca20b31fba572.css","style"]
0:{"P":null,"b":"qVnS570rtJXUlrEGWJ0ZU","p":"","c":["","blog","remark-markdown-processor-guide",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","remark-markdown-processor-guide","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/21fca20b31fba572.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","remark-markdown-processor-guide","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","P9qwTocbKdL17Ui6cgeAo",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[4911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["874","static/chunks/874-8d3839f72fd80c3c.js","953","static/chunks/app/blog/%5Bslug%5D/page-677ab5ce4505fca7.js"],""]
13:T398c,<p>Markdownで書かれたブログ記事やドキュメントをWebサイトで表示するには、HTMLに変換する必要があります。本記事では、JavaScriptで最も人気のあるMarkdownプロセッサー「remark」の仕組みと使い方を、初心者にも分かりやすく解説します。</p>
<h2>remarkとは？</h2>
<p>remarkは、Markdownを処理するためのプラグイン可能なツールです。unifiedエコシステムの一部として、以下の特徴があります：</p>
<ul>
<li><strong>プラグインシステム</strong>：機能を自由に追加・拡張できる</li>
<li><strong>AST（抽象構文木）ベース</strong>：Markdownを構造化データとして扱う</li>
<li><strong>高速処理</strong>：効率的なパース処理</li>
<li><strong>エコシステム</strong>：豊富なプラグインが利用可能</li>
</ul>
<h2>Markdown変換の仕組み</h2>
<h3>基本的な変換フロー</h3>
<pre><code>Markdown → Parse → AST → Transform → AST → Stringify → HTML
</code></pre>
<ol>
<li><strong>Parse（解析）</strong>：MarkdownテキストをASTに変換</li>
<li><strong>Transform（変換）</strong>：プラグインでASTを加工</li>
<li><strong>Stringify（文字列化）</strong>：ASTをHTMLなどの形式に変換</li>
</ol>
<h3>AST（抽象構文木）とは？</h3>
<p>ASTは、Markdownの構造を木構造で表現したデータです。</p>
<p><strong>Markdownの例：</strong></p>
<pre><code class="language-markdown"># Hello World

これは**太字**のテキストです。
</code></pre>
<p><strong>ASTの例（簡略化）：</strong></p>
<pre><code class="language-json">{
  "type": "root",
  "children": [
    {
      "type": "heading",
      "depth": 1,
      "children": [
        {
          "type": "text",
          "value": "Hello World"
        }
      ]
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "text",
          "value": "これは"
        },
        {
          "type": "strong",
          "children": [
            {
              "type": "text",
              "value": "太字"
            }
          ]
        },
        {
          "type": "text",
          "value": "のテキストです。"
        }
      ]
    }
  ]
}
</code></pre>
<h2>基本的な使い方</h2>
<h3>1. インストール</h3>
<pre><code class="language-bash"># 基本パッケージ
npm install remark remark-html

# GitHub Flavored Markdown対応（表やチェックボックス）
npm install remark-gfm

# フロントマター対応
npm install gray-matter
</code></pre>
<h3>2. シンプルな変換</h3>
<pre><code class="language-javascript">import { remark } from 'remark';
import html from 'remark-html';

const markdown = `
# Hello World

これは**Markdown**です。

- リスト1
- リスト2
`;

async function convertMarkdown() {
  const result = await remark()
    .use(html)
    .process(markdown);
  
  console.log(result.toString());
}

convertMarkdown();
</code></pre>
<p><strong>出力結果：</strong></p>
<pre><code class="language-html">&#x3C;h1>Hello World&#x3C;/h1>
&#x3C;p>これは&#x3C;strong>Markdown&#x3C;/strong>です。&#x3C;/p>
&#x3C;ul>
&#x3C;li>リスト1&#x3C;/li>
&#x3C;li>リスト2&#x3C;/li>
&#x3C;/ul>
</code></pre>
<h3>3. プラグインを使った拡張</h3>
<pre><code class="language-javascript">import { remark } from 'remark';
import html from 'remark-html';
import remarkGfm from 'remark-gfm';

const markdown = `
# タスクリスト

- [x] 完了したタスク
- [ ] 未完了のタスク

## 表

| 項目 | 説明 |
|------|------|
| remark | Markdownプロセッサー |
| unified | テキスト処理フレームワーク |
`;

async function convertWithGfm() {
  const result = await remark()
    .use(remarkGfm)  // GitHub Flavored Markdown
    .use(html)
    .process(markdown);
  
  console.log(result.toString());
}
</code></pre>
<h2>Next.jsでの実装例</h2>
<h3>ブログシステムの実装</h3>
<pre><code class="language-typescript">// lib/posts.ts
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import { remark } from 'remark';
import html from 'remark-html';
import remarkGfm from 'remark-gfm';

const postsDirectory = path.join(process.cwd(), 'posts');

export async function getPostData(slug: string) {
  const fullPath = path.join(postsDirectory, `${slug}.md`);
  const fileContents = fs.readFileSync(fullPath, 'utf8');
  
  // フロントマターを解析
  const matterResult = matter(fileContents);
  
  // MarkdownをHTMLに変換
  const processedContent = await remark()
    .use(remarkGfm)           // GFM対応
    .use(html, { 
      sanitize: false         // HTMLタグを許可
    })
    .process(matterResult.content);
  
  const contentHtml = processedContent.toString();
  
  return {
    slug,
    contentHtml,
    ...matterResult.data
  };
}
</code></pre>
<h3>Markdownファイルの例</h3>
<pre><code class="language-markdown">---
title: "初めてのremark"
date: "2025-01-10"
tags: ["JavaScript", "Markdown"]
---

# remarkを使ってみよう

remarkは**強力な**Markdownプロセッサーです。

## 特徴

- 高速処理
- プラグインシステム
- AST変換

## コード例

\`\`\`javascript
const result = await remark()
  .use(html)
  .process(markdown);
\`\`\`

## 表のサポート

| 機能 | 対応 |
|------|------|
| 基本的なMarkdown | ✅ |
| GFM | ✅ |
| カスタムプラグイン | ✅ |
</code></pre>
<h2>主要なremarkプラグイン</h2>
<h3>1. remark-gfm</h3>
<p>GitHub Flavored Markdownのサポート</p>
<pre><code class="language-javascript">import remarkGfm from 'remark-gfm';

// 使用例
.use(remarkGfm)
</code></pre>
<p><strong>追加される機能：</strong></p>
<ul>
<li>表（テーブル）</li>
<li>タスクリスト</li>
<li>取り消し線</li>
<li>オートリンク</li>
<li>脚注</li>
</ul>
<h3>2. remark-prism / remark-highlight</h3>
<p>シンタックスハイライト</p>
<pre><code class="language-javascript">import remarkPrism from 'remark-prism';

.use(remarkPrism)
</code></pre>
<h3>3. remark-toc</h3>
<p>目次の自動生成</p>
<pre><code class="language-javascript">import remarkToc from 'remark-toc';

.use(remarkToc, {
  heading: '目次',
  maxDepth: 3
})
</code></pre>
<h3>4. remark-emoji</h3>
<p>絵文字のサポート</p>
<pre><code class="language-javascript">import remarkEmoji from 'remark-emoji';

.use(remarkEmoji)
// :smile: → 😄
</code></pre>
<h3>5. remark-math / remark-katex</h3>
<p>数式レンダリング</p>
<pre><code class="language-javascript">import remarkMath from 'remark-math';
import remarkKatex from 'remark-katex';

.use(remarkMath)
.use(remarkKatex)
</code></pre>
<h2>カスタムプラグインの作成</h2>
<h3>プラグインの基本構造</h3>
<pre><code class="language-javascript">function myRemarkPlugin(options = {}) {
  return (tree, file) => {
    // ASTを走査して変換
    visit(tree, 'text', (node) => {
      // テキストノードを処理
      node.value = node.value.replace(
        /\[重要\]/g,
        '⚠️ 重要'
      );
    });
  };
}

// 使用
.use(myRemarkPlugin)
</code></pre>
<h3>実践例：外部リンクに属性を追加</h3>
<pre><code class="language-javascript">import { visit } from 'unist-util-visit';

function remarkExternalLinks() {
  return (tree) => {
    visit(tree, 'link', (node) => {
      // 外部リンクかチェック
      if (node.url &#x26;&#x26; node.url.startsWith('http')) {
        node.data = node.data || {};
        node.data.hProperties = {
          target: '_blank',
          rel: 'noopener noreferrer'
        };
      }
    });
  };
}
</code></pre>
<h2>unifiedエコシステム</h2>
<p>remarkは「unified」という大きなエコシステムの一部です。</p>
<h3>エコシステムの構成</h3>
<pre><code>unified（コア）
├── remark（Markdown処理）
│   ├── remark-parse（Markdown → AST）
│   └── remark-stringify（AST → Markdown）
├── rehype（HTML処理）
│   ├── rehype-parse（HTML → AST）
│   └── rehype-stringify（AST → HTML）
└── retext（自然言語処理）
    ├── retext-english（英語解析）
    └── retext-japanese（日本語解析）
</code></pre>
<h3>remark + rehypeの連携</h3>
<pre><code class="language-javascript">import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import rehypeStringify from 'rehype-stringify';
import rehypeHighlight from 'rehype-highlight';

const processor = unified()
  .use(remarkParse)        // Markdown → mdast
  .use(remarkRehype)       // mdast → hast
  .use(rehypeHighlight)    // コードハイライト
  .use(rehypeStringify);   // hast → HTML

const html = await processor.process(markdown);
</code></pre>
<h2>パフォーマンス最適化</h2>
<h3>1. プロセッサーの再利用</h3>
<pre><code class="language-javascript">// ❌ 非効率：毎回新しいプロセッサーを作成
async function convertMarkdown(content) {
  return await remark()
    .use(remarkGfm)
    .use(html)
    .process(content);
}

// ✅ 効率的：プロセッサーを再利用
const processor = remark()
  .use(remarkGfm)
  .use(html);

async function convertMarkdown(content) {
  return await processor.process(content);
}
</code></pre>
<h3>2. ビルド時の事前処理</h3>
<pre><code class="language-javascript">// Next.jsのgetStaticProps
export async function getStaticProps({ params }) {
  // ビルド時にMarkdownを変換
  const postData = await getPostData(params.slug);
  
  return {
    props: {
      postData
    }
  };
}
</code></pre>
<h3>3. キャッシング</h3>
<pre><code class="language-javascript">const cache = new Map();

async function getPostWithCache(slug) {
  if (cache.has(slug)) {
    return cache.get(slug);
  }
  
  const post = await getPostData(slug);
  cache.set(slug, post);
  return post;
}
</code></pre>
<h2>トラブルシューティング</h2>
<h3>1. 表が正しく表示されない</h3>
<p><strong>問題：</strong> Markdown の表が HTMLのテーブルにならない</p>
<p><strong>解決方法：</strong></p>
<pre><code class="language-javascript">// remark-gfmを追加
import remarkGfm from 'remark-gfm';

.use(remarkGfm)  // これが必要
.use(html)
</code></pre>
<h3>2. HTMLタグが削除される</h3>
<p><strong>問題：</strong> MarkdownにHTMLを書いても表示されない</p>
<p><strong>解決方法：</strong></p>
<pre><code class="language-javascript">.use(html, {
  sanitize: false  // サニタイズを無効化
})
</code></pre>
<h3>3. 改行が反映されない</h3>
<p><strong>問題：</strong> Markdownの改行がHTMLに反映されない</p>
<p><strong>解決方法：</strong></p>
<pre><code class="language-javascript">import remarkBreaks from 'remark-breaks';

.use(remarkBreaks)  // 改行を&#x3C;br>に変換
</code></pre>
<h3>4. 日本語の見出しでIDが生成されない</h3>
<p><strong>問題：</strong> 見出しの自動ID生成で日本語が無視される</p>
<p><strong>解決方法：</strong></p>
<pre><code class="language-javascript">import remarkSlug from 'remark-slug';
import { slugify } from 'transliteration';

.use(remarkSlug, {
  slugify: (text) => slugify(text)
})
</code></pre>
<h2>実装チェックリスト</h2>
<p>remarkを使ったMarkdown処理を実装する際のチェックリスト：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> 必要なパッケージをインストール
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> remark</li>
<li class="task-list-item"><input type="checkbox" disabled> remark-html</li>
<li class="task-list-item"><input type="checkbox" disabled> remark-gfm（表やチェックボックスが必要な場合）</li>
<li class="task-list-item"><input type="checkbox" disabled> gray-matter（フロントマターが必要な場合）</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" disabled> プロセッサーの設定
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> 必要なプラグインを追加</li>
<li class="task-list-item"><input type="checkbox" disabled> オプションを適切に設定</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" disabled> パフォーマンス最適化
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> プロセッサーの再利用</li>
<li class="task-list-item"><input type="checkbox" disabled> ビルド時の事前処理</li>
<li class="task-list-item"><input type="checkbox" disabled> 必要に応じてキャッシング</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" disabled> エラーハンドリング
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> ファイル読み込みエラー</li>
<li class="task-list-item"><input type="checkbox" disabled> パース処理エラー</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" disabled> テスト
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> 基本的なMarkdown要素</li>
<li class="task-list-item"><input type="checkbox" disabled> GFM拡張（表、チェックボックス）</li>
<li class="task-list-item"><input type="checkbox" disabled> カスタムプラグイン</li>
</ul>
</li>
</ul>
<h2>まとめ</h2>
<p>remarkは、Markdownを扱うJavaScriptプロジェクトにおいて非常に強力なツールです：</p>
<ol>
<li><strong>柔軟性</strong>：プラグインシステムで機能を自由に拡張</li>
<li><strong>パフォーマンス</strong>：効率的なAST処理</li>
<li><strong>エコシステム</strong>：豊富なプラグインと関連ツール</li>
<li><strong>Next.js統合</strong>：静的サイト生成に最適</li>
</ol>
<p>基本的な使い方から始めて、必要に応じてプラグインを追加していくことで、理想的なMarkdown処理環境を構築できます。</p>
<h2>参考リンク</h2>
<ul>
<li><a href="https://github.com/remarkjs/remark">remark公式ドキュメント</a></li>
<li><a href="https://unifiedjs.com/">unified公式サイト</a></li>
<li><a href="https://github.com/remarkjs/remark/blob/main/doc/plugins.md">remark plugins一覧</a></li>
<li><a href="https://astexplorer.net/">AST Explorer</a> - ASTを視覚的に確認できるツール</li>
<li><a href="https://mdxjs.com/">MDX</a> - MarkdownにJSXを埋め込める拡張形式</li>
</ul>
4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",29]}]," ","remark完全ガイド：Next.jsでMarkdownをHTMLに変換する仕組み"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-08-10 17:15"]}],"$undefined",["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"remark"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Markdown"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Next.js"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"unified"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"AST"}],["$","span","5",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"初心者向け"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
