1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"KZrMisSdXyu7FDjuS9HOy","p":"","c":["","blog","firebase-phone-authentication-guide",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","firebase-phone-authentication-guide","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","firebase-phone-authentication-guide","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","vVNxzORIBfx-ELqTNXdRW",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:T8de0,<h1 id="firebase電話番号認証完全ガイドsigninwithphonenumberとlinkwithcredentialの使い方">Firebase電話番号認証完全ガイド：signInWithPhoneNumberとlinkWithCredentialの使い方</h1>
<p>Webアプリケーションでユーザー認証を実装する際、電話番号を使った認証は非常に重要な選択肢の一つです。FirebaseのAuthentication機能を使えば、SMS認証を簡単に実装できますが、<code>signInWithPhoneNumber</code>と<code>linkWithCredential</code>の使い分けに迷う初心者エンジニアも多いのではないでしょうか。</p>
<p>この記事では、Firebase電話番号認証の基本から、実際のコード例、よくあるユースケースまで詳しく解説します。</p>
<h2 id="前提条件">前提条件</h2>
<p>この記事のコード例を試すには、以下の準備が必要です：</p>
<ol>
<li>
<p><strong>Firebaseプロジェクトの作成</strong></p>
<ul>
<li><a href="https://console.firebase.google.com/">Firebase Console</a>でプロジェクトを作成</li>
<li>Webアプリの登録とFirebase SDKの設定</li>
</ul>
</li>
<li>
<p><strong>電話番号認証の有効化</strong></p>
<ul>
<li>Firebase Console > Authentication > Sign-in method</li>
<li>「電話」プロバイダーを有効化</li>
</ul>
</li>
<li>
<p><strong>ドメインの承認</strong>（本番環境の場合）</p>
<ul>
<li>Authentication > Settings > 承認済みドメイン</li>
<li>アプリのドメインを追加</li>
</ul>
</li>
</ol>
<p>詳細な設定手順は<a href="https://firebase.google.com/docs/web/setup">Firebase公式ドキュメント</a>を参照してください。</p>
<h2 id="この記事で学べること">この記事で学べること</h2>
<ul>
<li>✅ <strong>Firebase電話番号認証の基本概念と仕組み</strong></li>
<li>✅ <strong><code>signInWithPhoneNumber</code>の詳細な使い方</strong></li>
<li>✅ <strong><code>linkWithCredential</code>でアカウント連携する方法</strong></li>
<li>✅ <strong><code>PhoneAuthProvider.credential</code>の役割と重要性</strong></li>
<li>✅ <strong>実際の開発現場でよくあるユースケースとコード例</strong></li>
</ul>
<h2 id="firebase電話番号認証とは">Firebase電話番号認証とは</h2>
<p>Firebase Authenticationは、Googleが提供する認証サービスで、メール、パスワード、SNSログイン、電話番号など様々な認証方法をサポートしています。</p>
<p>電話番号認証について詳しくは、<a href="https://firebase.google.com/docs/auth/web/phone-auth">Firebase公式ドキュメント - 電話番号認証</a>をご覧ください。</p>
<h3 id="電話番号認証の仕組み">電話番号認証の仕組み</h3>
<div class="mermaid">sequenceDiagram
    participant U as ユーザー
    participant W as Webアプリ
    participant F as Firebase
    participant S as SMS

    U-&gt;&gt;W: 電話番号を入力
    W-&gt;&gt;F: signInWithPhoneNumber()
    F-&gt;&gt;S: SMS送信
    S-&gt;&gt;U: 認証コード
    U-&gt;&gt;W: 認証コード入力
    W-&gt;&gt;F: confirm(code)
    F-&gt;&gt;W: 認証成功</div>
<ol>
<li>ユーザーが電話番号を入力</li>
<li>Firebase が SMS で認証コードを送信</li>
<li>ユーザーが認証コードを入力</li>
<li>Firebase が認証を完了</li>
</ol>
<h2 id="基本概念firebaseのcredential認証情報システム">基本概念：FirebaseのCredential（認証情報）システム</h2>
<p>Firebase認証を理解する上で重要なのが**Credential（認証情報）**の概念です。</p>
<h3 id="credentialとは">Credentialとは</h3>
<p>Credentialは「この人が本当にその認証方法の持ち主である」という証明書のような役割を果たします。</p>
<pre><code class="language-javascript">// 各認証プロバイダーごとにCredentialを作成
const googleCredential = GoogleAuthProvider.credential(idToken, accessToken);
const githubCredential = GithubAuthProvider.credential(accessToken);
const phoneCredential = PhoneAuthProvider.credential(verificationId, smsCode);
</code></pre>
<h3 id="電話番号認証でのcredential">電話番号認証でのCredential</h3>
<p>電話番号認証では、以下の2つの要素でCredentialを作成します：</p>
<ul>
<li><strong>verificationId</strong>: Firebase が SMS 送信時に発行する一時的なID</li>
<li><strong>smsCode</strong>: ユーザーが受信した6桁の認証コード</li>
</ul>
<h2 id="signinwithphonenumber電話番号でサインイン">signInWithPhoneNumber：電話番号でサインイン</h2>
<p><code>signInWithPhoneNumber</code>は、電話番号を使って新規ユーザー登録または既存ユーザーのサインインを行う関数です。</p>
<h3 id="基本的な実装">基本的な実装</h3>
<pre><code class="language-javascript">import { getAuth, signInWithPhoneNumber, RecaptchaVerifier } from "firebase/auth";

const auth = getAuth();

// 1. reCAPTCHA の初期化
const initializeRecaptcha = () => {
  window.recaptchaVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', {
    'size': 'normal',
    'callback': (response) => {
      console.log('reCAPTCHA solved');
    },
    'expired-callback': () => {
      console.log('reCAPTCHA expired');
    }
  });
};

// 2. 電話番号認証の開始
const sendSMSCode = async (phoneNumber) => {
  try {
    // reCAPTCHA初期化
    if (!window.recaptchaVerifier) {
      initializeRecaptcha();
    }

    // SMS送信
    const confirmationResult = await signInWithPhoneNumber(
      auth, 
      phoneNumber, 
      window.recaptchaVerifier
    );
    
    // confirmationResultを保存（後で認証コード確認に使用）
    window.confirmationResult = confirmationResult;
    
    console.log('SMS sent successfully');
    return true;
  } catch (error) {
    console.error('SMS送信エラー:', error);
    return false;
  }
};

// 3. 認証コードの確認
const confirmSMSCode = async (code) => {
  try {
    if (!window.confirmationResult) {
      throw new Error('SMS確認プロセスが開始されていません');
    }

    const result = await window.confirmationResult.confirm(code);
    const user = result.user;
    
    console.log('認証成功:', user);
    return user;
  } catch (error) {
    console.error('認証コード確認エラー:', error);
    return null;
  }
};

// 使用例
const handlePhoneSignIn = async () => {
  const phoneNumber = '+819012345678'; // 国際形式で指定
  
  // SMS送信
  const smsSent = await sendSMSCode(phoneNumber);
  
  if (smsSent) {
    // ユーザーからの入力を待つ
    const code = prompt('SMSで送信された認証コードを入力してください:');
    
    // 認証コード確認
    const user = await confirmSMSCode(code);
    
    if (user) {
      alert('サインイン成功！');
    }
  }
};

// 注意：実際のアプリケーションでは、window.confirmationResultのような
// グローバル変数ではなく、ReactのuseStateやVueのrefなど、
// フレームワークが提供する状態管理を使用することを推奨します。
</code></pre>
<h3 id="htmlテンプレート例">HTMLテンプレート例</h3>
<pre><code class="language-html">&#x3C;!DOCTYPE html>
&#x3C;html>
&#x3C;head>
    &#x3C;title>Firebase電話番号認証&#x3C;/title>
&#x3C;/head>
&#x3C;body>
    &#x3C;div>
        &#x3C;h2>電話番号でサインイン&#x3C;/h2>
        &#x3C;input type="tel" id="phone-number" placeholder="+819012345678">
        &#x3C;button onclick="sendSMS()">SMS送信&#x3C;/button>
    &#x3C;/div>
    
    &#x3C;div id="sms-code-section" style="display:none;">
        &#x3C;h3>認証コードを入力&#x3C;/h3>
        &#x3C;input type="text" id="sms-code" placeholder="123456">
        &#x3C;button onclick="confirmCode()">認証&#x3C;/button>
    &#x3C;/div>
    
    &#x3C;!-- reCAPTCHA用のコンテナ -->
    &#x3C;div id="recaptcha-container">&#x3C;/div>

    &#x3C;script type="module">
        // ここに上記のJavaScriptコードを配置
        
        // グローバル関数の定義
        window.sendSMS = async () => {
            const phoneNumber = document.getElementById('phone-number').value;
            const success = await sendSMSCode(phoneNumber);
            
            if (success) {
                document.getElementById('sms-code-section').style.display = 'block';
            }
        };

        window.confirmCode = async () => {
            const code = document.getElementById('sms-code').value;
            const user = await confirmSMSCode(code);
            
            if (user) {
                alert(`サインイン成功: ${user.phoneNumber}`);
            }
        };
    &#x3C;/script>
&#x3C;/body>
&#x3C;/html>
</code></pre>
<h2 id="linkwithcredential既存アカウントに電話番号を追加">linkWithCredential：既存アカウントに電話番号を追加</h2>
<p><code>linkWithCredential</code>は、既にサインイン済みのユーザーアカウントに別の認証方法を追加する際に使用します。</p>
<p>アカウントの連携について詳しくは、<a href="https://firebase.google.com/docs/auth/web/account-linking">Firebase公式ドキュメント - アカウントのリンク</a>をご覧ください。</p>
<h3 id="使用ケース">使用ケース</h3>
<ul>
<li>Googleアカウントで登録したユーザーに電話番号認証を追加</li>
<li>メール＋パスワードで登録したユーザーに電話番号認証を追加</li>
<li>セキュリティ強化のための多要素認証</li>
</ul>
<h3 id="基本的な実装-1">基本的な実装</h3>
<pre><code class="language-javascript">import { 
  getAuth, 
  linkWithCredential, 
  PhoneAuthProvider,
  signInWithPhoneNumber 
} from "firebase/auth";

const auth = getAuth();

// 1. 既存ユーザーに電話番号を追加する関数
const linkPhoneNumber = async (phoneNumber) => {
  try {
    // 現在ログイン中のユーザーを取得
    const currentUser = auth.currentUser;
    
    if (!currentUser) {
      throw new Error('ユーザーがサインインしていません');
    }

    // reCAPTCHA初期化（前の例と同じ）
    if (!window.recaptchaVerifier) {
      initializeRecaptcha();
    }

    // SMS送信（電話番号認証の開始）
    const confirmationResult = await signInWithPhoneNumber(
      auth, 
      phoneNumber, 
      window.recaptchaVerifier
    );

    // ユーザーからSMSコードの入力を受ける
    const smsCode = prompt('SMSで受信した認証コードを入力してください:');

    // PhoneAuthProvider.credentialでCredentialを作成
    const phoneCredential = PhoneAuthProvider.credential(
      confirmationResult.verificationId,
      smsCode
    );

    // 既存アカウントにCredentialをリンク
    const result = await linkWithCredential(currentUser, phoneCredential);
    
    console.log('電話番号の追加成功:', result.user);
    return result.user;

  } catch (error) {
    console.error('電話番号追加エラー:', error);
    
    // よくあるエラーハンドリング
    if (error.code === 'auth/credential-already-in-use') {
      alert('この電話番号は既に他のアカウントで使用されています');
    } else if (error.code === 'auth/invalid-verification-code') {
      alert('認証コードが正しくありません');
    }
    
    return null;
  }
};

// 2. 実際の使用例
const handleAddPhoneNumber = async () => {
  // 現在のユーザー情報を表示
  const currentUser = auth.currentUser;
  if (!currentUser) {
    alert('先にサインインしてください');
    return;
  }

  console.log('現在のユーザー:', {
    uid: currentUser.uid,
    email: currentUser.email,
    phoneNumber: currentUser.phoneNumber,
    providers: currentUser.providerData.map(p => p.providerId)
  });

  // 電話番号追加
  const phoneNumber = prompt('追加する電話番号を入力してください（例: +819012345678）:');
  
  if (phoneNumber) {
    const updatedUser = await linkPhoneNumber(phoneNumber);
    
    if (updatedUser) {
      alert('電話番号の追加が完了しました！');
      
      // 更新後のユーザー情報を表示
      console.log('更新後のユーザー:', {
        uid: updatedUser.uid,
        email: updatedUser.email,
        phoneNumber: updatedUser.phoneNumber,
        providers: updatedUser.providerData.map(p => p.providerId)
      });
    }
  }
};
</code></pre>
<h2 id="phoneauthprovidercredentialの詳細解説">PhoneAuthProvider.credentialの詳細解説</h2>
<p><code>PhoneAuthProvider.credential</code>は、電話番号認証において最も重要な関数の一つです。この関数の役割と仕組みを詳しく見てみましょう。</p>
<h3 id="なぜcredentialが必要なのか">なぜCredentialが必要なのか？</h3>
<p>Firebase認証システムは、様々な認証プロバイダー（Google、GitHub、Phone等）を統一的に扱うため、それぞれの認証情報を<strong>Credential</strong>という標準形式に変換する必要があります。</p>
<pre><code class="language-javascript">// 各プロバイダーの認証情報を統一形式に変換
const googleCredential = GoogleAuthProvider.credential(idToken, accessToken);
const phoneCredential = PhoneAuthProvider.credential(verificationId, smsCode);

// どのCredentialも同じように使える
await signInWithCredential(auth, googleCredential);
await signInWithCredential(auth, phoneCredential);
</code></pre>
<h3 id="phoneauthprovidercredentialの動作原理">PhoneAuthProvider.credentialの動作原理</h3>
<pre><code class="language-javascript">// PhoneAuthProvider.credentialの使用例
const createPhoneCredential = (confirmationResult, userInputCode) => {
  // confirmationResult.verificationId: Firebase内部で生成される一意のID
  // userInputCode: ユーザーがSMSで受信した6桁のコード
  
  const credential = PhoneAuthProvider.credential(
    confirmationResult.verificationId,
    userInputCode
  );
  
  // このCredentialには以下の情報が含まれる
  console.log('Credential情報:', {
    providerId: credential.providerId,        // 'phone'
    signInMethod: credential.signInMethod     // 'phone'
  });
  
  return credential;
};
</code></pre>
<h3 id="verificationidとは">verificationIdとは</h3>
<p><code>verificationId</code>は、Firebase が SMS 送信時に内部で生成する一意のIDです：</p>
<pre><code class="language-javascript">// SMS送信時の内部的な流れ
const sendSMSInternally = async (phoneNumber) => {
  // 1. Firebaseが電話番号を検証
  // 2. SMS送信準備
  // 3. 一意のverificationIdを生成
  const verificationId = 'AMbdDl7...' // 実際は長い文字列
  
  // 4. SMSを送信
  // 5. confirmationResultとしてverificationIdを含む結果を返す
  return {
    verificationId: verificationId,
    confirm: async (code) => {
      // ここでPhoneAuthProvider.credentialが内部的に呼ばれる
      const credential = PhoneAuthProvider.credential(verificationId, code);
      return await signInWithCredential(auth, credential);
    }
  };
};
</code></pre>
<h3 id="手動でcredentialを作成するパターン">手動でCredentialを作成するパターン</h3>
<pre><code class="language-javascript">// 手動でCredentialを作成して使用する例
const manualPhoneAuth = async (phoneNumber, smsCode) => {
  try {
    // Step 1: SMS送信
    const confirmationResult = await signInWithPhoneNumber(
      auth, 
      phoneNumber, 
      recaptchaVerifier
    );
    
    // Step 2: 手動でCredentialを作成
    const phoneCredential = PhoneAuthProvider.credential(
      confirmationResult.verificationId,
      smsCode
    );
    
    // Step 3a: 新規サインインの場合
    const signInResult = await signInWithCredential(auth, phoneCredential);
    console.log('サインイン成功:', signInResult.user);
    
    // Step 3b: または、既存アカウントへのリンクの場合
    // const linkResult = await linkWithCredential(auth.currentUser, phoneCredential);
    // console.log('リンク成功:', linkResult.user);
    
  } catch (error) {
    console.error('認証エラー:', error);
  }
};
</code></pre>
<h2 id="実践的なユースケース">実践的なユースケース</h2>
<h3 id="ケース1電話番号のみでの認証システム">ケース1：電話番号のみでの認証システム</h3>
<pre><code class="language-javascript">// 電話番号専用認証システムの実装
class PhoneOnlyAuth {
  constructor() {
    this.auth = getAuth();
    this.setupRecaptcha();
  }

  setupRecaptcha() {
    this.recaptchaVerifier = new RecaptchaVerifier(this.auth, 'recaptcha-container', {
      'size': 'invisible', // 見えないreCAPTCHA
      'callback': () => console.log('reCAPTCHA solved')
    });
  }

  async signInWithPhone(phoneNumber) {
    try {
      const confirmationResult = await signInWithPhoneNumber(
        this.auth,
        phoneNumber,
        this.recaptchaVerifier
      );

      // 認証結果を保存
      this.pendingConfirmation = confirmationResult;
      return true;
    } catch (error) {
      console.error('電話番号認証開始エラー:', error);
      return false;
    }
  }

  async confirmCode(code) {
    try {
      if (!this.pendingConfirmation) {
        throw new Error('認証プロセスが開始されていません');
      }

      const result = await this.pendingConfirmation.confirm(code);
      const user = result.user;

      // 新規ユーザーの場合の追加処理
      if (result.additionalUserInfo?.isNewUser) {
        await this.setupNewUser(user);
      }

      return user;
    } catch (error) {
      console.error('認証コード確認エラー:', error);
      return null;
    }
  }

  async setupNewUser(user) {
    // 新規ユーザーのプロフィール設定
    try {
      await user.updateProfile({
        displayName: `User_${user.phoneNumber?.slice(-4) || 'Unknown'}`
      });
      console.log('新規ユーザーのセットアップ完了');
    } catch (error) {
      console.error('新規ユーザーセットアップエラー:', error);
    }
  }
}

// 使用例
const phoneAuth = new PhoneOnlyAuth();

// サインインフロー
document.getElementById('send-sms').addEventListener('click', async () => {
  const phoneNumber = document.getElementById('phone-input').value;
  const success = await phoneAuth.signInWithPhone(phoneNumber);
  
  if (success) {
    document.getElementById('code-section').style.display = 'block';
  }
});

document.getElementById('confirm-code').addEventListener('click', async () => {
  const code = document.getElementById('code-input').value;
  const user = await phoneAuth.confirmCode(code);
  
  if (user) {
    window.location.href = '/dashboard';
  }
});
</code></pre>
<h3 id="ケース2マルチプロバイダー認証システム">ケース2：マルチプロバイダー認証システム</h3>
<pre><code class="language-javascript">// 複数の認証方法をサポートするシステム
class MultiProviderAuth {
  constructor() {
    this.auth = getAuth();
    this.currentUser = null;
    
    // 認証状態の監視
    this.auth.onAuthStateChanged((user) => {
      this.currentUser = user;
      this.updateUI();
    });
  }

  // Googleサインイン
  async signInWithGoogle() {
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(this.auth, provider);
      return result.user;
    } catch (error) {
      console.error('Googleサインインエラー:', error);
      return null;
    }
  }

  // メール＋パスワードサインイン
  async signInWithEmail(email, password) {
    try {
      const result = await signInWithEmailAndPassword(this.auth, email, password);
      return result.user;
    } catch (error) {
      console.error('メールサインインエラー:', error);
      return null;
    }
  }

  // 既存アカウントに電話番号を追加
  async addPhoneToExistingAccount(phoneNumber) {
    if (!this.currentUser) {
      throw new Error('先にサインインしてください');
    }

    try {
      // 電話番号認証の開始
      const confirmationResult = await signInWithPhoneNumber(
        this.auth,
        phoneNumber,
        this.getRecaptchaVerifier()
      );

      return confirmationResult;
    } catch (error) {
      console.error('電話番号追加開始エラー:', error);
      throw error;
    }
  }

  async confirmPhoneLink(confirmationResult, code) {
    try {
      // Credentialを作成
      const phoneCredential = PhoneAuthProvider.credential(
        confirmationResult.verificationId,
        code
      );

      // 既存アカウントにリンク
      const result = await linkWithCredential(this.currentUser, phoneCredential);
      return result.user;
    } catch (error) {
      console.error('電話番号リンクエラー:', error);
      throw error;
    }
  }

  // 認証プロバイダーの一覧を取得
  getLinkedProviders() {
    if (!this.currentUser) return [];
    
    return this.currentUser.providerData.map(provider => ({
      providerId: provider.providerId,
      email: provider.email,
      phoneNumber: provider.phoneNumber
    }));
  }

  getRecaptchaVerifier() {
    if (!this.recaptchaVerifier) {
      this.recaptchaVerifier = new RecaptchaVerifier(this.auth, 'recaptcha-container', {
        'size': 'normal'
      });
    }
    return this.recaptchaVerifier;
  }

  updateUI() {
    const userInfo = document.getElementById('user-info');
    const authButtons = document.getElementById('auth-buttons');
    
    if (this.currentUser) {
      userInfo.innerHTML = `
        &#x3C;h3>サインイン済み&#x3C;/h3>
        &#x3C;p>UID: ${this.currentUser.uid}&#x3C;/p>
        &#x3C;p>メール: ${this.currentUser.email || 'なし'}&#x3C;/p>
        &#x3C;p>電話番号: ${this.currentUser.phoneNumber || 'なし'}&#x3C;/p>
        &#x3C;h4>連携済みプロバイダー:&#x3C;/h4>
        &#x3C;ul>
          ${this.getLinkedProviders().map(provider => 
            `&#x3C;li>${provider.providerId}: ${provider.email || provider.phoneNumber || 'データなし'}&#x3C;/li>`
          ).join('')}
        &#x3C;/ul>
      `;
      authButtons.style.display = 'none';
    } else {
      userInfo.innerHTML = '&#x3C;p>サインインしていません&#x3C;/p>';
      authButtons.style.display = 'block';
    }
  }
}

// 使用例
const multiAuth = new MultiProviderAuth();

// Googleサインイン
document.getElementById('google-signin').addEventListener('click', async () => {
  await multiAuth.signInWithGoogle();
});

// 電話番号追加
document.getElementById('add-phone').addEventListener('click', async () => {
  const phoneNumber = prompt('電話番号を入力:');
  
  try {
    const confirmationResult = await multiAuth.addPhoneToExistingAccount(phoneNumber);
    const code = prompt('SMSコードを入力:');
    
    const user = await multiAuth.confirmPhoneLink(confirmationResult, code);
    alert('電話番号の追加が完了しました！');
  } catch (error) {
    alert('エラーが発生しました: ' + error.message);
  }
});
</code></pre>
<h2 id="テスト環境での開発">テスト環境での開発</h2>
<h3 id="テスト用電話番号の設定">テスト用電話番号の設定</h3>
<p>開発中に実際のSMSを送信せずにテストを行うには、Firebase Consoleでテスト用電話番号を設定できます：</p>
<ol>
<li>Firebase Console > Authentication > Sign-in method</li>
<li>「電話」プロバイダーの設定画面で「テスト用の電話番号」を追加</li>
<li>電話番号と固定の認証コードを設定</li>
</ol>
<pre><code class="language-javascript">// テスト用電話番号の例
const testPhoneNumbers = {
  '+81901234567': '123456',  // テスト用番号：固定コード
  '+81987654321': '654321'   // テスト用番号：固定コード
};

// 開発環境では、これらの番号を使用すると実際のSMS送信なしで認証をテストできます
const handleTestAuth = async () => {
  const testPhone = '+81901234567';
  const testCode = '123456';
  
  try {
    const confirmationResult = await signInWithPhoneNumber(auth, testPhone, recaptchaVerifier);
    const result = await confirmationResult.confirm(testCode);
    console.log('テスト認証成功:', result.user);
  } catch (error) {
    console.error('テスト認証エラー:', error);
  }
};
</code></pre>
<h2 id="エラーハンドリングとベストプラクティス">エラーハンドリングとベストプラクティス</h2>
<h3 id="よくあるエラーとその対処法">よくあるエラーとその対処法</h3>
<pre><code class="language-javascript">// 包括的なエラーハンドリングの実装
const handlePhoneAuthError = (error) => {
  console.error('Firebase認証エラー:', error);
  
  switch (error.code) {
    case 'auth/invalid-phone-number':
      return '電話番号の形式が正しくありません。国番号を含めて入力してください。';
      
    case 'auth/missing-phone-number':
      return '電話番号が入力されていません。';
      
    case 'auth/quota-exceeded':
      return 'SMS送信の制限に達しました。しばらく時間をおいてからお試しください。';
      
    case 'auth/user-disabled':
      return 'このアカウントは無効化されています。';
      
    case 'auth/invalid-verification-code':
      return '認証コードが正しくありません。';
      
    case 'auth/code-expired':
      return '認証コードの有効期限が切れています。もう一度SMS送信からやり直してください。';
      
    case 'auth/credential-already-in-use':
      return 'この電話番号は既に他のアカウントで使用されています。';
      
    case 'auth/requires-recent-login':
      return 'セキュリティのため、再度サインインしてください。';
      
    case 'auth/provider-already-linked':
      return 'この認証プロバイダーは既にアカウントに連携されています。';
      
    case 'auth/captcha-check-failed':
      return 'reCAPTCHAの認証に失敗しました。ページを再読み込みしてお試しください。';
      
    default:
      return `認証エラーが発生しました: ${error.message}`;
  }
};

// 使用例
const safePhoneAuth = async (phoneNumber, code) => {
  try {
    const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, recaptchaVerifier);
    const result = await confirmationResult.confirm(code);
    return { success: true, user: result.user };
  } catch (error) {
    const userFriendlyMessage = handlePhoneAuthError(error);
    return { success: false, error: userFriendlyMessage };
  }
};
</code></pre>
<h3 id="セキュリティ考慮事項">セキュリティ考慮事項</h3>
<pre><code class="language-javascript">// セキュリティを考慮した実装例
class SecurePhoneAuth {
  constructor() {
    this.auth = getAuth();
    this.maxRetries = 3;
    this.retryCount = 0;
    this.lastSMSSent = null;
    this.rateLimitDelay = 60000; // 1分
  }

  // レート制限チェック
  canSendSMS() {
    if (!this.lastSMSSent) return true;
    
    const timeSinceLastSMS = Date.now() - this.lastSMSSent;
    return timeSinceLastSMS >= this.rateLimitDelay;
  }

  // 電話番号の形式チェック
  validatePhoneNumber(phoneNumber) {
    // 国際形式かチェック
    const phoneRegex = /^\+[1-9]\d{1,14}$/;
    return phoneRegex.test(phoneNumber);
  }

  async sendSMS(phoneNumber) {
    // 入力値検証
    if (!this.validatePhoneNumber(phoneNumber)) {
      throw new Error('電話番号は国際形式（+81...）で入力してください');
    }

    // レート制限チェック
    if (!this.canSendSMS()) {
      const remainingTime = Math.ceil((this.rateLimitDelay - (Date.now() - this.lastSMSSent)) / 1000);
      throw new Error(`SMS送信は${remainingTime}秒後に可能です`);
    }

    try {
      const confirmationResult = await signInWithPhoneNumber(
        this.auth,
        phoneNumber,
        this.getRecaptchaVerifier()
      );

      this.lastSMSSent = Date.now();
      this.retryCount = 0;
      
      return confirmationResult;
    } catch (error) {
      console.error('SMS送信エラー:', error);
      throw error;
    }
  }

  async confirmCode(confirmationResult, code) {
    // リトライ制限チェック
    if (this.retryCount >= this.maxRetries) {
      throw new Error('認証試行回数の上限に達しました。最初からやり直してください。');
    }

    try {
      const result = await confirmationResult.confirm(code);
      this.retryCount = 0; // 成功時にリセット
      return result;
    } catch (error) {
      this.retryCount++;
      
      if (error.code === 'auth/invalid-verification-code') {
        const remainingTries = this.maxRetries - this.retryCount;
        if (remainingTries > 0) {
          throw new Error(`認証コードが正しくありません。残り${remainingTries}回試行可能です。`);
        }
      }
      
      throw error;
    }
  }

  getRecaptchaVerifier() {
    if (!this.recaptchaVerifier) {
      this.recaptchaVerifier = new RecaptchaVerifier(this.auth, 'recaptcha-container', {
        'size': 'normal',
        'callback': () => {
          console.log('reCAPTCHA認証完了');
        },
        'expired-callback': () => {
          console.log('reCAPTCHA期限切れ');
          this.recaptchaVerifier = null; // 再作成を促す
        }
      });
    }
    return this.recaptchaVerifier;
  }
}
</code></pre>
<h2 id="パフォーマンス最適化">パフォーマンス最適化</h2>
<h3 id="recaptchaの効率的な管理">reCAPTCHAの効率的な管理</h3>
<pre><code class="language-javascript">// reCAPTCHAを効率的に管理するクラス
class RecaptchaManager {
  constructor(auth) {
    this.auth = auth;
    this.verifier = null;
    this.isRendered = false;
  }

  getVerifier() {
    if (!this.verifier || this.verifier.destroyed) {
      this.createVerifier();
    }
    return this.verifier;
  }

  createVerifier() {
    this.verifier = new RecaptchaVerifier(this.auth, 'recaptcha-container', {
      'size': 'invisible', // UIを邪魔しない - UX改善のため
      'callback': () => {
        console.log('reCAPTCHA solved');
      },
      'expired-callback': () => {
        console.log('reCAPTCHA expired, recreating...');
        this.cleanup();
        this.createVerifier();
      }
    });
  }

  cleanup() {
    if (this.verifier) {
      this.verifier.clear();
      this.verifier = null;
      this.isRendered = false;
    }
  }

  // コンポーネントのアンマウント時に呼ぶ
  destroy() {
    this.cleanup();
  }
}

// React での使用例
const useFirebasePhoneAuth = () => {
  const [auth] = useState(() => getAuth());
  const [recaptchaManager] = useState(() => new RecaptchaManager(auth));

  useEffect(() => {
    // コンポーネントのクリーンアップ
    return () => {
      recaptchaManager.destroy();
    };
  }, [recaptchaManager]);

  const signInWithPhone = async (phoneNumber) => {
    try {
      const verifier = recaptchaManager.getVerifier();
      const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, verifier);
      return confirmationResult;
    } catch (error) {
      console.error('Phone auth error:', error);
      throw error;
    }
  };

  return { signInWithPhone };
};
</code></pre>
<h2 id="テストとデバッグ">テストとデバッグ</h2>
<h3 id="テスト環境での設定">テスト環境での設定</h3>
<pre><code class="language-javascript">// テスト用の電話番号認証設定
const setupTestPhoneAuth = () => {
  // テスト環境でのみ有効
  if (process.env.NODE_ENV === 'test') {
    const auth = getAuth();
    
    // テスト用の電話番号を設定
    auth.settings.appVerificationDisabledForTesting = true;
    
    // テスト用電話番号の設定
    const testPhoneNumbers = {
      '+819012345678': '123456',
      '+819087654321': '654321'
    };

    // Firebase Admin SDKでテスト用設定
    Object.entries(testPhoneNumbers).forEach(([phoneNumber, code]) => {
      auth.settings.setAutoRetrievalSMSCode(phoneNumber, code);
    });
  }
};

// Jest でのテスト例
describe('Firebase電話番号認証', () => {
  beforeEach(() => {
    setupTestPhoneAuth();
  });

  test('電話番号認証が正常に動作する', async () => {
    const auth = getAuth();
    const testPhone = '+819012345678';
    const testCode = '123456';

    // モックreCAPTCHA
    const mockRecaptcha = {
      verify: jest.fn().mockResolvedValue('mock-token')
    };

    const confirmationResult = await signInWithPhoneNumber(auth, testPhone, mockRecaptcha);
    const result = await confirmationResult.confirm(testCode);

    expect(result.user).toBeDefined();
    expect(result.user.phoneNumber).toBe(testPhone);
  });
});
</code></pre>
<h2 id="まとめ">まとめ</h2>
<h3 id="重要なポイント">重要なポイント</h3>
<ol>
<li><strong><code>signInWithPhoneNumber</code></strong>: 新規サインインや既存ユーザーの認証に使用</li>
<li><strong><code>linkWithCredential</code></strong>: 既存アカウントに電話番号認証を追加する際に使用</li>
<li><strong><code>PhoneAuthProvider.credential</code></strong>: SMS認証コードからFirebase Credentialを作成する重要な橋渡し役</li>
<li><strong>セキュリティ考慮</strong>: レート制限、入力値検証、エラーハンドリングを適切に実装</li>
</ol>
<h3 id="ベストプラクティス">ベストプラクティス</h3>
<ul>
<li>✅ <strong>適切なエラーハンドリング</strong>を実装する</li>
<li>✅ <strong>reCAPTCHA</strong>を適切に管理し、リークを防ぐ</li>
<li>✅ <strong>レート制限</strong>を設けてスパムを防ぐ</li>
<li>✅ <strong>電話番号の形式検証</strong>を行う</li>
<li>✅ <strong>テスト環境での設定</strong>を適切に行う</li>
<li>✅ <strong>状態管理のベストプラクティス</strong>：本番アプリケーションではグローバル変数ではなく、適切な状態管理を使用する</li>
<li>✅ <strong>Invisible reCAPTCHA</strong>の採用でUX改善を図る</li>
</ul>
<h3 id="次のステップ">次のステップ</h3>
<ul>
<li>実際のアプリケーションに電話番号認証を実装してみる</li>
<li>マルチファクタ認証（MFA）の実装を検討する</li>
<li>Firebase Admin SDKを使った管理機能の実装を学ぶ</li>
<li>セキュリティルールの設定を学習する</li>
</ul>
<p>Firebase電話番号認証をマスターして、より安全で使いやすいWebアプリケーションを作りましょう！</p>
<h2 id="参考リンク">参考リンク</h2>
<h3 id="firebase公式ドキュメント">Firebase公式ドキュメント</h3>
<ul>
<li><a href="https://firebase.google.com/docs/auth">Firebase Authentication 公式ドキュメント</a></li>
<li><a href="https://firebase.google.com/docs/auth/web/phone-auth">Firebase JavaScript SDK - 電話番号認証</a></li>
<li><a href="https://firebase.google.com/docs/web/setup">FirebaseをJavaScriptプロジェクトに追加する</a></li>
<li><a href="https://firebase.google.com/docs/auth/web/account-linking">ユーザー アカウントのリンク</a></li>
<li><a href="https://firebase.google.com/docs/rules">Firebase セキュリティルール</a></li>
<li><a href="https://firebase.google.com/docs/admin/setup">Firebase Admin SDK</a></li>
</ul>
<h3 id="関連技術">関連技術</h3>
<ul>
<li><a href="https://developers.google.com/recaptcha/docs/v3">reCAPTCHA v3 ドキュメント</a></li>
<li><a href="https://en.wikipedia.org/wiki/E.164">国際電話番号フォーマット (E.164)</a></li>
</ul>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",46]}]," ","Firebase電話番号認証完全ガイド：signInWithPhoneNumberとlinkWithCredentialの使い方"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-09-10 01:14"]}],["$","li",null,{"className":"text-gray-500 text-sm","children":["更新日時: ","2025-09-10 01:24"]}],["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Firebase"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Authentication"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"JavaScript"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Web Development"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Phone Auth"}],["$","span","5",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Security"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
