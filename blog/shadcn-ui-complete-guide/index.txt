1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"_7bJRY6qUoW0OKfxXCT1j","p":"","c":["","blog","shadcn-ui-complete-guide",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","shadcn-ui-complete-guide","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","shadcn-ui-complete-guide","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","8oPhrvcyWdmJBZX-CgBid",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:Tba3f,<h2 id="はじめになぜshadcnuiが注目されているのか">はじめに：なぜshadcn/uiが注目されているのか？</h2>
<p>2023年、JavaScriptエコシステムで異例の現象が起きました。「<strong>shadcn/ui</strong>」が、<a href="https://risingstars.js.org/2023/ja">JavaScript Rising Stars</a>で総合1位を獲得。2位のBunに10,000スター以上の差をつけての圧勝でした。さらに2024年も連続で1位を獲得し、その勢いは止まりません。</p>
<p>なぜこれほどまでに注目されているのでしょうか？</p>
<p>その答えは、<a href="https://ui.shadcn.com/">shadcn/uiの公式サイト</a>に明確に示されています：</p>
<blockquote>
<p>"This is NOT a component library. It's a collection of re-usable components that you can copy and paste into your apps."
（これはコンポーネントライブラリではありません。アプリにコピー＆ペーストできる再利用可能なコンポーネントのコレクションです。）</p>
</blockquote>
<p>今回は、このshadcn/uiが従来のUIライブラリとどう違うのか、なぜ開発者から支持されているのか、そして実際にどう使うのかを、初心者エンジニアにもわかりやすく解説していきます。</p>
<h2 id="shadcnuiとは何か基本概念の理解">shadcn/uiとは何か？基本概念の理解</h2>
<h3 id="読み方と名前の由来">読み方と名前の由来</h3>
<p>まず、「shadcn/ui」は「<strong>シャドシーエヌ・ユーアイ</strong>」と読みます。開発者のShad氏（@shadcn）の名前から取られています。</p>
<h3 id="従来のuiライブラリとの決定的な違い">従来のUIライブラリとの決定的な違い</h3>
<h4 id="従来のuiライブラリmaterial-uiant-designchakra-uiなどの仕組み">従来のUIライブラリ（Material-UI、Ant Design、Chakra UIなど）の仕組み</h4>
<pre><code class="language-bash"># 従来のUIライブラリのインストール
npm install @mui/material @emotion/react @emotion/styled
</code></pre>
<pre><code class="language-javascript">// 使用例：Material-UI
import { Button } from '@mui/material';

function App() {
  return &#x3C;Button variant="contained">Click me&#x3C;/Button>;
}
</code></pre>
<p><strong>特徴：</strong></p>
<ul>
<li>npmパッケージとしてインストール</li>
<li>node_modulesに依存</li>
<li>カスタマイズは限定的（テーマやpropsで調整）</li>
<li>ライブラリ全体のバンドルサイズが大きい</li>
</ul>
<p><strong>バンドルサイズとは？</strong>
バンドル（Bundle）とは、複数のJavaScriptファイルやCSSファイル、その他のリソースを1つまたは少数のファイルにまとめたものです。WebpackやRollupなどの「バンドラー」と呼ばれるツールが、開発時に分かれている多数のファイルを本番環境用に結合・圧縮します。</p>
<p>バンドルサイズとは、このまとめられたファイルの容量のことで、ユーザーがWebサイトを開く際にダウンロードする必要があるデータ量を指します。バンドルサイズが大きいと：</p>
<ul>
<li>ページの読み込みが遅くなる</li>
<li>モバイル環境では特に影響が大きい</li>
<li>データ通信量が増える</li>
</ul>
<p><strong>Material-UIのimportについて</strong>
<code>import { Button } from '@mui/material'</code>のように特定のコンポーネントだけをimportしても、実はMaterial-UI全体が読み込まれるわけではありません。現代のバンドラーは「Tree Shaking」という機能を持っており、使用されていないコードを自動的に除外します。</p>
<p>ただし、Material-UIの場合：</p>
<ul>
<li>Buttonコンポーネント自体が依存する共通コード（テーマシステム、スタイルエンジンなど）も含まれる</li>
<li>これらの基盤となるコードが約30-40KBある</li>
<li>結果として、1つのコンポーネントを使うだけでも相当なサイズになる</li>
</ul>
<h4 id="shadcnuiの仕組み">shadcn/uiの仕組み</h4>
<pre><code class="language-bash"># shadcn/uiのコンポーネント追加
npx shadcn-ui@latest add button
</code></pre>
<pre><code class="language-javascript">// 使用例：shadcn/ui
// components/ui/button.tsx（自動生成されたファイル）
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium...",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes&#x3C;HTMLButtonElement>,
    VariantProps&#x3C;typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef&#x3C;HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      &#x3C;Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)

// 使用側
import { Button } from "@/components/ui/button"

function App() {
  return (
    &#x3C;div className="space-y-4">
      {/* デフォルトのボタン */}
      &#x3C;Button>Click me&#x3C;/Button>
      
      {/* バリアントを指定 */}
      &#x3C;Button variant="destructive">削除&#x3C;/Button>
      &#x3C;Button variant="outline">キャンセル&#x3C;/Button>
      &#x3C;Button variant="secondary">サブアクション&#x3C;/Button>
      &#x3C;Button variant="ghost">ゴースト&#x3C;/Button>
      &#x3C;Button variant="link">リンク&#x3C;/Button>
      
      {/* サイズを指定 */}
      &#x3C;Button size="sm">小さいボタン&#x3C;/Button>
      &#x3C;Button size="lg">大きいボタン&#x3C;/Button>
      
      {/* 組み合わせも可能 */}
      &#x3C;Button variant="outline" size="lg">大きいアウトライン&#x3C;/Button>
    &#x3C;/div>
  )
}
</code></pre>
<p><strong>buttonVariantsの仕組み：</strong>
<code>cva</code>（Class Variance Authority）を使って、ボタンのバリアント（種類）を定義しています。これにより：</p>
<ul>
<li><code>variant</code>プロパティで見た目のスタイルを切り替え可能</li>
<li><code>size</code>プロパティでサイズを調整可能</li>
<li>TypeScriptの型安全性が保証される（存在しないvariantを指定するとエラーになる）</li>
</ul>
<p><strong>特徴：</strong></p>
<ul>
<li>コンポーネントのコードをプロジェクトに直接コピー</li>
<li>完全にカスタマイズ可能（コードを直接編集できる）</li>
<li>必要なコンポーネントだけを追加</li>
<li>バンドルサイズを最小限に抑えられる</li>
</ul>
<h2 id="shadcnuiの技術スタック">shadcn/uiの技術スタック</h2>
<h3 id="1-radix-uiラディックスユーアイ">1. Radix UI（ラディックス・ユーアイ）</h3>
<p><strong><a href="https://www.radix-ui.com/">Radix UI</a>とは？</strong></p>
<ul>
<li>スタイルを持たない（Unstyled/Headless）UIコンポーネントライブラリ</li>
<li>アクセシビリティ（障害を持つ人でも使いやすい設計）が組み込まれている</li>
<li><a href="https://www.w3.org/WAI/ARIA/apg/">WAI-ARIA</a>（Web Accessibility Initiative - Accessible Rich Internet Applications）準拠</li>
</ul>
<p><strong>アクセシビリティとは？</strong>
Webアクセシビリティとは、障害の有無や年齢、利用環境などに関わらず、すべての人がWebサイトやアプリケーションを利用できるようにすることです。Radix UIは以下のような機能を自動的に提供します：</p>
<pre><code class="language-javascript">// Radix UIの例（スタイルなし）
import * as Dialog from '@radix-ui/react-dialog';

&#x3C;Dialog.Root>
  &#x3C;Dialog.Trigger>開く&#x3C;/Dialog.Trigger>  {/* ← キーボード操作対応 */}
  &#x3C;Dialog.Portal>
    &#x3C;Dialog.Overlay />  {/* ← 背景のクリックで閉じる */}
    &#x3C;Dialog.Content>
      {/* ↓ スクリーンリーダー用のタイトル（role="heading"が自動付与） */}
      &#x3C;Dialog.Title>タイトル&#x3C;/Dialog.Title>
      {/* ↓ 説明文（aria-describedbyで関連付け） */}
      &#x3C;Dialog.Description>説明文&#x3C;/Dialog.Description>
      {/* ↓ Escキーで閉じる、フォーカストラップ対応 */}
      &#x3C;Dialog.Close>閉じる&#x3C;/Dialog.Close>
    &#x3C;/Dialog.Content>
  &#x3C;/Dialog.Portal>
&#x3C;/Dialog.Root>
</code></pre>
<p><strong>Radix UIが自動的に処理してくれること：</strong></p>
<ul>
<li><strong>キーボード操作</strong>: Tab、Enter、Escape、矢印キーなどの適切な処理</li>
<li><strong>フォーカス管理</strong>: ダイアログを開いた時のフォーカス移動、閉じた時の復帰</li>
<li><strong>ARIA属性</strong>: <code>role</code>、<code>aria-label</code>、<code>aria-describedby</code>などの自動付与</li>
<li><strong>スクリーンリーダー対応</strong>: 視覚障害者向けの読み上げソフトへの対応</li>
</ul>
<p>これらを自分で実装すると非常に複雑になりますが、Radix UIを使えば自動的に対応されます。</p>
<h3 id="2-tailwind-cssテイルウィンドシーエスエス">2. Tailwind CSS（テイルウィンド・シーエスエス）</h3>
<p><strong><a href="https://tailwindcss.com/">Tailwind CSS</a>とは？</strong></p>
<ul>
<li>ユーティリティファーストのCSSフレームワーク</li>
<li>クラス名を組み合わせてスタイリングする</li>
</ul>
<pre><code class="language-html">&#x3C;!-- 従来のCSS -->
&#x3C;button class="btn btn-primary">Click&#x3C;/button>
&#x3C;style>
  .btn { padding: 8px 16px; border-radius: 4px; }
  .btn-primary { background-color: blue; color: white; }
&#x3C;/style>

&#x3C;!-- Tailwind CSS -->
&#x3C;button class="px-4 py-2 rounded bg-blue-500 text-white">Click&#x3C;/button>
</code></pre>
<h3 id="3-class-variance-authority-cva">3. Class Variance Authority (CVA)</h3>
<p><strong><a href="https://cva.style/docs">CVA</a>とは？</strong></p>
<ul>
<li>コンポーネントのバリアント（種類）を管理するライブラリ</li>
<li>TypeScript対応で型安全</li>
</ul>
<pre><code class="language-javascript">const buttonVariants = cva(
  // ベーススタイル
  "inline-flex items-center justify-center rounded-md",
  {
    variants: {
      // バリアント定義
      variant: {
        default: "bg-primary text-white",
        secondary: "bg-secondary text-black",
        ghost: "hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        sm: "h-9 px-3 text-xs",
        md: "h-10 px-4 py-2",
        lg: "h-11 px-8",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "md",
    },
  }
)
</code></pre>
<h2 id="なぜshadcnuiを使うのか解決される問題と恩恵">なぜshadcn/uiを使うのか？解決される問題と恩恵</h2>
<h3 id="問題1カスタマイズの制限">問題1：カスタマイズの制限</h3>
<p><strong>従来のUIライブラリの問題点：</strong></p>
<pre><code class="language-javascript">// Material-UIでボタンをカスタマイズしたい場合
import { Button } from '@mui/material';
import { styled } from '@mui/material/styles';

// スタイルのオーバーライドが必要
const CustomButton = styled(Button)(({ theme }) => ({
  backgroundColor: '#custom-color',
  '&#x26;:hover': {
    backgroundColor: '#hover-color',
  },
  // !importantを使わざるを得ない場合も...
  padding: '12px 24px !important',
}));
</code></pre>
<p><strong>shadcn/uiの解決策：</strong></p>
<pre><code class="language-javascript">// button.tsxを直接編集
const buttonVariants = cva(
  "...",
  {
    variants: {
      variant: {
        // 新しいバリアントを追加
        custom: "bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg",
      },
    },
  }
)

// 使用
&#x3C;Button variant="custom">カスタムボタン&#x3C;/Button>
</code></pre>
<p><strong>なぜこれで問題が解決するのか？</strong></p>
<ul>
<li><strong>直接編集可能</strong>: コンポーネントのソースコードがプロジェクト内にあるため、自由に編集できる</li>
<li><strong>!important不要</strong>: ライブラリのスタイルを上書きする必要がないため、CSSの優先順位で悩まない</li>
<li><strong>TypeScript対応</strong>: 新しいバリアントを追加すると、自動的に型定義も更新される</li>
<li><strong>バージョン依存なし</strong>: ライブラリのアップデートでカスタマイズが壊れる心配がない</li>
</ul>
<h3 id="問題2バンドルサイズの肥大化">問題2：バンドルサイズの肥大化</h3>
<p><strong>従来のUIライブラリ：</strong></p>
<ul>
<li>Material-UI：約100KB</li>
<li>Ant Design：約300KB+</li>
<li>Bootstrap：約81KB</li>
</ul>
<p><strong>shadcn/uiの場合：</strong></p>
<ul>
<li>必要なコンポーネントだけを含める</li>
<li>Button componentのみ：約2-3KB</li>
<li>使わない機能は含まれない</li>
</ul>
<h3 id="問題3デザインの画一化">問題3：デザインの画一化</h3>
<p><strong>従来の問題：</strong></p>
<pre><code class="language-javascript">// どのサイトも似たようなMaterial Designに...
import { Button, Card, TextField } from '@mui/material';

// カスタマイズが難しく、結果的に似たデザインになりがち
</code></pre>
<p><strong>shadcn/uiの解決：</strong></p>
<pre><code class="language-javascript">// colors.cssで独自のカラースキームを定義
:root {
  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;
  --secondary: 217.2 32.6% 17.5%;
  // 完全にオリジナルのデザインシステムを構築可能
}
</code></pre>
<h2 id="実践shadcnuiの導入とカスタマイズ">実践！shadcn/uiの導入とカスタマイズ</h2>
<h3 id="step-1-プロジェクトのセットアップ">Step 1: プロジェクトのセットアップ</h3>
<pre><code class="language-bash"># Next.jsプロジェクトの作成
npx create-next-app@latest my-app --typescript --tailwind --app

cd my-app

# shadcn/uiの初期化
npx shadcn-ui@latest init
</code></pre>
<p><strong>npx shadcn-ui@latest initの仕組み</strong>
<code>npx</code>は、npmパッケージを一時的にダウンロードして実行するコマンドです。<code>shadcn-ui</code>はnpmに公開されているCLI（コマンドラインインターフェース）ツールで、以下の処理を行います：</p>
<ol>
<li>プロジェクトの設定ファイルを分析</li>
<li>必要な設定ファイルを生成（components.json）</li>
<li>ユーティリティ関数を作成（lib/utils.ts）</li>
<li>TailwindCSSの設定を更新</li>
<li>グローバルCSSにベーススタイルを追加</li>
</ol>
<p>つまり、shadcn-ui自体はプロジェクトに残らず、初期設定だけを行って終了します。</p>
<p>初期化時の質問：</p>
<pre><code class="language-bash">✔ Would you like to use TypeScript (recommended)? … yes
# TypeScriptを使用するか（推奨）

✔ Which style would you like to use? › Default
# スタイルテーマの選択（Default/New York）
# Defaultは角が丸く、New Yorkはより角張ったデザイン

✔ Which color would you like to use as base color? › Slate
# ベースカラーの選択（Slate/Gray/Zinc/Neutral/Stone）

✔ Where is your global CSS file? … app/globals.css
# グローバルCSSファイルの場所（ベーススタイルを追加する場所）

✔ Do you want to use CSS variables for colors? … yes
# CSS変数を使用するか（ダークモード対応などが簡単になる）

✔ Where is your tailwind.config.js located? … tailwind.config.js
# Tailwind設定ファイルの場所

✔ Configure the import alias for components? … @/components
# コンポーネントのインポートエイリアス（import時のパス）

✔ Configure the import alias for utils? … @/lib/utils
# ユーティリティ関数のインポートエイリアス
</code></pre>
<h3 id="step-2-コンポーネントの追加">Step 2: コンポーネントの追加</h3>
<pre><code class="language-bash"># よく使うコンポーネントを追加
npx shadcn-ui@latest add button
npx shadcn-ui@latest add card
npx shadcn-ui@latest add dialog
npx shadcn-ui@latest add form
npx shadcn-ui@latest add input
</code></pre>
<p><strong>コンポーネント追加時の動作</strong>
<code>npx shadcn-ui@latest add button</code>を実行すると：</p>
<ol>
<li>shadcn/uiのGitHubリポジトリから最新のButtonコンポーネントのコードを取得</li>
<li><code>components/ui/button.tsx</code>ファイルを作成</li>
<li>必要な依存関係（Radix UIなど）があれば自動的にnpm installを実行</li>
<li>完了後、<code>import { Button } from "@/components/ui/button"</code>で使用可能になる</li>
</ol>
<p>実際に作成されるファイルの例：</p>
<pre><code>components/
  ui/
    button.tsx      # ← ここにコンポーネントのコードがコピーされる
    card.tsx
    dialog.tsx
    form.tsx
    input.tsx
</code></pre>
<p>重要な点は、これらのファイルは<strong>あなたのプロジェクトの一部</strong>になることです。外部ライブラリへの依存ではなく、プロジェクト内のソースコードとして存在します。</p>
<h3 id="step-3-実際のコンポーネント作成例">Step 3: 実際のコンポーネント作成例</h3>
<h4 id="例1ログインフォームの作成">例1：ログインフォームの作成</h4>
<pre><code class="language-tsx">// app/login/page.tsx
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

export default function LoginPage() {
  return (
    &#x3C;div className="min-h-screen flex items-center justify-center bg-gray-50">
      &#x3C;Card className="w-[400px]">
        &#x3C;CardHeader>
          &#x3C;CardTitle>ログイン&#x3C;/CardTitle>
          &#x3C;CardDescription>
            アカウントにログインしてください
          &#x3C;/CardDescription>
        &#x3C;/CardHeader>
        &#x3C;CardContent className="space-y-4">
          &#x3C;div className="space-y-2">
            &#x3C;Label htmlFor="email">メールアドレス&#x3C;/Label>
            &#x3C;Input 
              id="email" 
              type="email" 
              placeholder="example@email.com"
            />
          &#x3C;/div>
          &#x3C;div className="space-y-2">
            &#x3C;Label htmlFor="password">パスワード&#x3C;/Label>
            &#x3C;Input 
              id="password" 
              type="password"
            />
          &#x3C;/div>
        &#x3C;/CardContent>
        &#x3C;CardFooter className="flex justify-between">
          &#x3C;Button variant="outline">キャンセル&#x3C;/Button>
          &#x3C;Button>ログイン&#x3C;/Button>
        &#x3C;/CardFooter>
      &#x3C;/Card>
    &#x3C;/div>
  )
}
</code></pre>
<h4 id="例2ダークモード対応のダッシュボード">例2：ダークモード対応のダッシュボード</h4>
<pre><code class="language-tsx">// components/Dashboard.tsx
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Moon, Sun } from "lucide-react"

export default function Dashboard() {
  const [isDark, setIsDark] = useState(false)

  const toggleTheme = () => {
    setIsDark(!isDark)
    document.documentElement.classList.toggle('dark')
  }

  return (
    &#x3C;div className={`min-h-screen ${isDark ? 'dark' : ''}`}>
      &#x3C;div className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
        &#x3C;header className="p-4 border-b dark:border-gray-700">
          &#x3C;div className="flex justify-between items-center">
            &#x3C;h1 className="text-2xl font-bold">ダッシュボード&#x3C;/h1>
            &#x3C;Button 
              variant="ghost" 
              size="icon"
              onClick={toggleTheme}
            >
              {isDark ? &#x3C;Sun /> : &#x3C;Moon />}
            &#x3C;/Button>
          &#x3C;/div>
        &#x3C;/header>
        
        &#x3C;main className="p-6 grid grid-cols-1 md:grid-cols-3 gap-6">
          &#x3C;Card>
            &#x3C;CardHeader>
              &#x3C;CardTitle>売上&#x3C;/CardTitle>
            &#x3C;/CardHeader>
            &#x3C;CardContent>
              &#x3C;p className="text-3xl font-bold">¥1,234,567&#x3C;/p>
              &#x3C;p className="text-sm text-gray-500 dark:text-gray-400">
                前月比 +12.5%
              &#x3C;/p>
            &#x3C;/CardContent>
          &#x3C;/Card>
          
          &#x3C;Card>
            &#x3C;CardHeader>
              &#x3C;CardTitle>ユーザー数&#x3C;/CardTitle>
            &#x3C;/CardHeader>
            &#x3C;CardContent>
              &#x3C;p className="text-3xl font-bold">8,934&#x3C;/p>
              &#x3C;p className="text-sm text-gray-500 dark:text-gray-400">
                前月比 +8.2%
              &#x3C;/p>
            &#x3C;/CardContent>
          &#x3C;/Card>
          
          &#x3C;Card>
            &#x3C;CardHeader>
              &#x3C;CardTitle>コンバージョン率&#x3C;/CardTitle>
            &#x3C;/CardHeader>
            &#x3C;CardContent>
              &#x3C;p className="text-3xl font-bold">3.45%&#x3C;/p>
              &#x3C;p className="text-sm text-gray-500 dark:text-gray-400">
                前月比 +0.3%
              &#x3C;/p>
            &#x3C;/CardContent>
          &#x3C;/Card>
        &#x3C;/main>
      &#x3C;/div>
    &#x3C;/div>
  )
}
</code></pre>
<h3 id="step-4-カスタマイズ例">Step 4: カスタマイズ例</h3>
<h4 id="カスタムボタンバリアントの追加">カスタムボタンバリアントの追加</h4>
<pre><code class="language-tsx">// components/ui/button.tsx を編集
const buttonVariants = cva(
  "...",
  {
    variants: {
      variant: {
        // 既存のバリアント
        default: "...",
        destructive: "...",
        
        // 新しいグラデーションバリアントを追加
        gradient: "bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 shadow-lg",
        
        // ネオンエフェクトバリアント
        neon: "bg-transparent border-2 border-cyan-400 text-cyan-400 hover:bg-cyan-400 hover:text-gray-900 transition-all duration-300 shadow-[0_0_10px_rgba(34,211,238,0.5)]",
      },
    },
  }
)

// 使用例
&#x3C;Button variant="gradient">グラデーションボタン&#x3C;/Button>
&#x3C;Button variant="neon">ネオンボタン&#x3C;/Button>
</code></pre>
<h4 id="カスタムカラーテーマの作成">カスタムカラーテーマの作成</h4>
<pre><code class="language-css">/* app/globals.css */
@layer base {
  :root {
    /* カスタムカラーパレット */
    --primary: 259 94% 51%;           /* 紫 */
    --primary-foreground: 0 0% 100%;  /* 白 */
    
    --secondary: 199 89% 48%;         /* 青 */
    --secondary-foreground: 0 0% 100%;
    
    --accent: 339 90% 51%;            /* ピンク */
    --accent-foreground: 0 0% 100%;
    
    --success: 142 71% 45%;           /* 緑 */
    --warning: 45 93% 47%;            /* オレンジ */
    --error: 0 84% 60%;               /* 赤 */
  }
  
  .dark {
    /* ダークモード用のカラー */
    --primary: 263 70% 65%;
    --secondary: 199 70% 65%;
    --accent: 339 70% 65%;
  }
}
</code></pre>
<h2 id="高度な使い方フォームとバリデーション">高度な使い方：フォームとバリデーション</h2>
<p>shadcn/uiは、React Hook FormとZodと組み合わせて、型安全なフォームを作成できます。</p>
<p><strong>React Hook Formとは？</strong>
<a href="https://react-hook-form.com/">React Hook Form</a>は、Reactでフォームを扱うためのライブラリです。以下の特徴があります：</p>
<ul>
<li>非制御コンポーネント（Uncontrolled Components）ベースで高パフォーマンス</li>
<li>再レンダリングを最小限に抑える</li>
<li>バリデーション機能が組み込まれている</li>
<li>TypeScriptとの相性が良い</li>
</ul>
<p><strong>Zodとは？</strong>
<a href="https://zod.dev/">Zod</a>は、TypeScriptファーストのスキーマ宣言・バリデーションライブラリです：</p>
<ul>
<li>型定義とバリデーションルールを同時に定義</li>
<li>実行時の型チェックが可能</li>
<li>エラーメッセージのカスタマイズが簡単</li>
</ul>
<p><strong>バリデーションスキーマとは？</strong>
バリデーションスキーマとは、データが満たすべき条件（ルール）を定義したものです。例えば：</p>
<ul>
<li>メールアドレスの形式が正しいか</li>
<li>パスワードが8文字以上か</li>
<li>年齢が18歳以上か</li>
</ul>
<p>これらのルールをコードで表現したものがバリデーションスキーマです。</p>
<pre><code class="language-tsx">// 必要なパッケージをインストール
// npm install react-hook-form zod @hookform/resolvers

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { toast } from "@/components/ui/use-toast"

// バリデーションスキーマの定義
const formSchema = z.object({
  username: z.string()
    .min(2, { message: "ユーザー名は2文字以上である必要があります" })
    .max(50, { message: "ユーザー名は50文字以下である必要があります" }),
  email: z.string()
    .email({ message: "有効なメールアドレスを入力してください" }),
  age: z.number()
    .min(18, { message: "18歳以上である必要があります" })
    .max(120, { message: "年齢が正しくありません" }),
})

export function ProfileForm() {
  // フォームの初期化
  const form = useForm&#x3C;z.infer&#x3C;typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
      email: "",
      age: 18,
    },
  })

  // フォーム送信処理
  function onSubmit(values: z.infer&#x3C;typeof formSchema>) {
    toast({
      title: "フォームが送信されました",
      description: (
        &#x3C;pre className="mt-2 w-[340px] rounded-md bg-slate-950 p-4">
          &#x3C;code className="text-white">
            {JSON.stringify(values, null, 2)}
          &#x3C;/code>
        &#x3C;/pre>
      ),
    })
  }

  return (
    &#x3C;Form {...form}>
      &#x3C;form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        &#x3C;FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            &#x3C;FormItem>
              &#x3C;FormLabel>ユーザー名&#x3C;/FormLabel>
              &#x3C;FormControl>
                &#x3C;Input placeholder="john_doe" {...field} />
              &#x3C;/FormControl>
              &#x3C;FormDescription>
                公開プロフィールに表示される名前です
              &#x3C;/FormDescription>
              &#x3C;FormMessage />
            &#x3C;/FormItem>
          )}
        />
        
        &#x3C;FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            &#x3C;FormItem>
              &#x3C;FormLabel>メールアドレス&#x3C;/FormLabel>
              &#x3C;FormControl>
                &#x3C;Input type="email" placeholder="example@email.com" {...field} />
              &#x3C;/FormControl>
              &#x3C;FormMessage />
            &#x3C;/FormItem>
          )}
        />
        
        &#x3C;FormField
          control={form.control}
          name="age"
          render={({ field }) => (
            &#x3C;FormItem>
              &#x3C;FormLabel>年齢&#x3C;/FormLabel>
              &#x3C;FormControl>
                &#x3C;Input 
                  type="number" 
                  {...field} 
                  onChange={(e) => field.onChange(parseInt(e.target.value))}
                />
              &#x3C;/FormControl>
              &#x3C;FormMessage />
            &#x3C;/FormItem>
          )}
        />
        
        &#x3C;Button type="submit">送信&#x3C;/Button>
      &#x3C;/form>
    &#x3C;/Form>
  )
}
</code></pre>
<h2 id="ai時代の開発v0devとの連携">AI時代の開発：v0.devとの連携</h2>
<p>Vercel社が開発した「<strong><a href="https://v0.dev">v0.dev</a></strong>」は、shadcn/uiを使用したUI生成に特化したAIツールです。</p>
<p><strong>v0.devとは？</strong>
v0.devは、自然言語（普通の文章）でUIの要望を伝えると、それに応じたReactコンポーネントを自動生成するAIサービスです。特徴：</p>
<ul>
<li>shadcn/uiのコンポーネントを使用</li>
<li>Tailwind CSSでスタイリング</li>
<li>TypeScript対応</li>
<li>レスポンシブデザイン対応</li>
</ul>
<p><strong>料金について</strong></p>
<ul>
<li>無料プラン：月10回まで生成可能</li>
<li>有料プラン（$20/月）：無制限の生成、プライベートプロジェクト</li>
</ul>
<h3 id="v0devの使い方">v0.devの使い方</h3>
<ol>
<li><a href="https://v0.dev">v0.dev</a>にアクセス</li>
<li>作りたいUIを自然言語で説明</li>
<li>AIが生成したコードをコピー</li>
<li>プロジェクトにペースト</li>
</ol>
<p><strong>例：プロンプト</strong></p>
<pre><code>"価格プランを表示するカード3つ並べたセクションを作って。
Basic、Pro、Enterpriseの3つのプランで、それぞれ価格と機能リストを含む"
</code></pre>
<p>生成されるコード例：</p>
<pre><code class="language-tsx">export function PricingCards() {
  return (
    &#x3C;div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
      &#x3C;Card>
        &#x3C;CardHeader>
          &#x3C;CardTitle>Basic&#x3C;/CardTitle>
          &#x3C;CardDescription>個人利用に最適&#x3C;/CardDescription>
        &#x3C;/CardHeader>
        &#x3C;CardContent>
          &#x3C;p className="text-3xl font-bold">¥0&#x3C;/p>
          &#x3C;p className="text-sm text-gray-500">永久無料&#x3C;/p>
          &#x3C;ul className="mt-4 space-y-2">
            &#x3C;li>✓ 基本機能&#x3C;/li>
            &#x3C;li>✓ 5GBストレージ&#x3C;/li>
            &#x3C;li>✓ メールサポート&#x3C;/li>
          &#x3C;/ul>
        &#x3C;/CardContent>
        &#x3C;CardFooter>
          &#x3C;Button className="w-full">始める&#x3C;/Button>
        &#x3C;/CardFooter>
      &#x3C;/Card>
      {/* Pro、Enterpriseプランも同様 */}
    &#x3C;/div>
  )
}
</code></pre>
<h2 id="shadcnuiを選ぶべきケース-vs-選ばないべきケース">shadcn/uiを選ぶべきケース vs 選ばないべきケース</h2>
<h3 id="shadcnuiが適している場合">shadcn/uiが適している場合</h3>
<p>✅ <strong>カスタマイズ性を重視する場合</strong></p>
<ul>
<li>独自のデザインシステムを構築したい</li>
<li>ブランドガイドラインに厳密に従う必要がある</li>
</ul>
<p>✅ <strong>パフォーマンスを重視する場合</strong></p>
<ul>
<li>バンドルサイズを最小限に抑えたい</li>
<li>不要な機能を含めたくない</li>
</ul>
<p>✅ <strong>長期的なメンテナンスを考慮する場合</strong></p>
<ul>
<li>ライブラリの更新に依存したくない</li>
<li>コードの完全な制御権を持ちたい</li>
</ul>
<p><strong>従来のUIライブラリの長期メンテナンス問題：</strong>
Material-UIなどの外部ライブラリを使用していると、以下のような問題が発生することがあります：</p>
<ul>
<li><strong>破壊的変更</strong>: メジャーバージョンアップで既存コードが動かなくなる（Material-UI v4→v5でAPIが大幅変更）</li>
<li><strong>依存関係の競合</strong>: 他のライブラリとの依存関係で更新できない</li>
<li><strong>サポート終了</strong>: 古いバージョンのセキュリティアップデートが提供されなくなる</li>
<li><strong>カスタマイズの破損</strong>: ライブラリ更新でカスタマイズ部分が動作しなくなる</li>
</ul>
<p>shadcn/uiならコードを所有しているため、これらの問題を回避できます。</p>
<p>✅ <strong>Tailwind CSSを既に使用している場合</strong></p>
<ul>
<li>既存のTailwindプロジェクトとの親和性が高い</li>
</ul>
<h3 id="shadcnuiが適さない場合">shadcn/uiが適さない場合</h3>
<p>❌ <strong>すぐに使えるデザインが欲しい場合</strong></p>
<ul>
<li>Material DesignやAnt Designのような完成されたデザインシステムが必要</li>
<li>デザインにこだわりがない</li>
</ul>
<p>❌ <strong>Tailwind CSSを使いたくない場合</strong></p>
<ul>
<li>CSS-in-JSを好む</li>
<li>既存のCSSフレームワークを使用している</li>
</ul>
<p>❌ <strong>チーム全員がTailwindに慣れていない場合</strong></p>
<ul>
<li>学習コストを考慮する必要がある</li>
</ul>
<h2 id="よくある質問と回答">よくある質問と回答</h2>
<h3 id="q1-shadcnuiは無料ですか">Q1: shadcn/uiは無料ですか？</h3>
<p><strong>A:</strong> はい、完全に無料でオープンソースです。MITライセンスで提供されています。</p>
<p><strong>MITライセンスとは？</strong>
MITライセンスは最も制限の少ないオープンソースライセンスの1つです：</p>
<ul>
<li><strong>商用利用OK</strong>: 企業のプロダクトでも無料で使用可能</li>
<li><strong>改変OK</strong>: 自由に修正・カスタマイズ可能</li>
<li><strong>再配布OK</strong>: 修正したコードを公開・販売も可能</li>
<li><strong>著作権表示のみ必要</strong>: ライセンス文と著作権表示を含めるだけ</li>
<li><strong>保証なし</strong>: 作者は一切の責任を負わない</li>
</ul>
<p>つまり、ほぼ何でも自由にできるライセンスです。</p>
<h3 id="q2-react以外でも使えますか">Q2: React以外でも使えますか？</h3>
<p><strong>A:</strong> 現在はReact専用です。ただし、Vue版の「shadcn-vue」やSvelte版の開発も進んでいます。</p>
<h3 id="q3-既存のプロジェクトに導入できますか">Q3: 既存のプロジェクトに導入できますか？</h3>
<p><strong>A:</strong> はい、可能です。ただし、Tailwind CSSの設定が必要です。</p>
<p><strong>なぜTailwind CSSの設定が必要なのか？</strong>
shadcn/uiのコンポーネントは、Tailwind CSSのクラス名を使ってスタイリングされているためです。例えば：</p>
<ul>
<li><code>bg-primary</code> → 背景色の指定</li>
<li><code>text-sm</code> → 文字サイズの指定</li>
<li><code>hover:bg-primary/90</code> → ホバー時のスタイル</li>
</ul>
<p>これらのクラスが動作するには、Tailwind CSSがプロジェクトに設定されている必要があります。</p>
<p><strong>すでにTailwind CSSを使っているプロジェクトの場合：</strong></p>
<pre><code class="language-bash"># Tailwind CSSがすでに設定されている場合は、shadcn/uiの初期化のみでOK
npx shadcn-ui@latest init
</code></pre>
<p><strong>Tailwind CSSが未導入の場合：</strong></p>
<pre><code class="language-bash"># Tailwind CSSのインストールと設定
npm install tailwindcss postcss autoprefixer
npx tailwindcss init -p  # tailwind.config.jsとpostcss.config.jsを生成

# その後、shadcn/uiを初期化
npx shadcn-ui@latest init
</code></pre>
<h3 id="q4-コンポーネントの更新はどうすればいいですか">Q4: コンポーネントの更新はどうすればいいですか？</h3>
<p><strong>A:</strong> shadcn/uiはコピー＆ペースト方式なので、自動更新はありません。必要に応じて手動で最新版をコピーするか、gitで差分を確認して更新します。</p>
<h3 id="q5-typescriptは必須ですか">Q5: TypeScriptは必須ですか？</h3>
<p><strong>A:</strong> 必須ではありませんが、強く推奨されています。型安全性のメリットが大きいためです。</p>
<h2 id="パフォーマンス比較">パフォーマンス比較</h2>
<h3 id="バンドルサイズの実測値">バンドルサイズの実測値</h3>
<pre><code class="language-javascript">// 実際のプロジェクトでの計測結果
{
  "Material-UI (全体)": "約300KB (gzip: 90KB)",
  "Ant Design (全体)": "約380KB (gzip: 120KB)",
  "Chakra UI (全体)": "約210KB (gzip: 70KB)",
  "shadcn/ui (Button + Card + Dialog)": "約15KB (gzip: 5KB)"
}
</code></pre>
<h3 id="lighthouse-スコアの比較">Lighthouse スコアの比較</h3>
<p><strong>Lighthouseとは？</strong>
Lighthouseは、Googleが提供するWebページの品質測定ツールです。Chrome DevToolsに組み込まれており、以下の項目を0-100点で評価します（高いほど良い）：</p>
<ul>
<li>
<p><strong>Performance（パフォーマンス）</strong>: ページの読み込み速度</p>
<ul>
<li>First Contentful Paint（最初のコンテンツ表示時間）</li>
<li>Largest Contentful Paint（最大コンテンツ表示時間）</li>
<li>Total Blocking Time（メインスレッドのブロック時間）</li>
<li>Speed Index（ページ表示速度）</li>
</ul>
</li>
<li>
<p><strong>Accessibility（アクセシビリティ）</strong>: 障害者への配慮</p>
<ul>
<li>適切なARIA属性の使用</li>
<li>十分なカラーコントラスト</li>
<li>キーボード操作への対応</li>
<li>スクリーンリーダーへの対応</li>
</ul>
</li>
<li>
<p><strong>Best Practices（ベストプラクティス）</strong>: Web標準への準拠</p>
<ul>
<li>HTTPS使用</li>
<li>安全なJavaScriptライブラリ</li>
<li>適切な画像形式</li>
<li>コンソールエラーの有無</li>
</ul>
</li>
<li>
<p><strong>SEO（検索エンジン最適化）</strong>: 検索エンジンへの最適化</p>
<ul>
<li>メタタグの設定</li>
<li>構造化データ</li>
<li>モバイル対応</li>
<li>クロール可能性</li>
</ul>
</li>
</ul>
<pre><code class="language-javascript">// 同じレイアウトを各UIライブラリで実装した場合
{
  "shadcn/ui": {
    "Performance": 98,     // 軽量なため高速
    "Accessibility": 100,  // Radix UIによる完璧な対応
    "Best Practices": 100, // 最新のWeb標準に準拠
    "SEO": 100            // 軽量で高速なため評価が高い
  },
  "Material-UI": {
    "Performance": 89,     // バンドルサイズが大きいため若干低下
    "Accessibility": 98,   // 高いが一部カスタマイズで問題が出ることも
    "Best Practices": 100,
    "SEO": 100
  }
}
</code></pre>
<h2 id="実践的なtips集">実践的なTips集</h2>
<h3 id="tip-1-エイリアスの設定">Tip 1: エイリアスの設定</h3>
<pre><code class="language-json">// tsconfig.json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/ui/*": ["./src/components/ui/*"]
    }
  }
}
</code></pre>
<h3 id="tip-2-カスタムフックの作成">Tip 2: カスタムフックの作成</h3>
<pre><code class="language-typescript">// hooks/use-theme.ts
import { useEffect, useState } from 'react'

export function useTheme() {
  const [theme, setTheme] = useState&#x3C;'light' | 'dark'>('light')

  useEffect(() => {
    const stored = localStorage.getItem('theme') as 'light' | 'dark'
    if (stored) {
      setTheme(stored)
      document.documentElement.classList.toggle('dark', stored === 'dark')
    }
  }, [])

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light'
    setTheme(newTheme)
    localStorage.setItem('theme', newTheme)
    document.documentElement.classList.toggle('dark')
  }

  return { theme, toggleTheme }
}
</code></pre>
<h3 id="tip-3-コンポーネントの組み合わせパターン">Tip 3: コンポーネントの組み合わせパターン</h3>
<pre><code class="language-tsx">// components/composite/DataTable.tsx
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useState } from "react"

interface DataTableProps&#x3C;T> {
  data: T[]
  columns: {
    key: keyof T
    label: string
    sortable?: boolean
  }[]
}

export function DataTable&#x3C;T>({ data, columns }: DataTableProps&#x3C;T>) {
  const [filter, setFilter] = useState('')
  const [sortKey, setSortKey] = useState&#x3C;keyof T | null>(null)
  const [sortOrder, setSortOrder] = useState&#x3C;'asc' | 'desc'>('asc')

  const filteredData = data.filter(item =>
    Object.values(item as any).some(value =>
      String(value).toLowerCase().includes(filter.toLowerCase())
    )
  )

  const sortedData = sortKey
    ? [...filteredData].sort((a, b) => {
        const aVal = a[sortKey] as any
        const bVal = b[sortKey] as any
        const order = sortOrder === 'asc' ? 1 : -1
        return aVal > bVal ? order : -order
      })
    : filteredData

  return (
    &#x3C;div className="space-y-4">
      &#x3C;Input
        placeholder="検索..."
        value={filter}
        onChange={(e) => setFilter(e.target.value)}
        className="max-w-sm"
      />
      
      &#x3C;Table>
        &#x3C;TableCaption>データテーブル&#x3C;/TableCaption>
        &#x3C;TableHeader>
          &#x3C;TableRow>
            {columns.map(column => (
              &#x3C;TableHead key={String(column.key)}>
                {column.sortable ? (
                  &#x3C;Button
                    variant="ghost"
                    onClick={() => {
                      if (sortKey === column.key) {
                        setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
                      } else {
                        setSortKey(column.key)
                        setSortOrder('asc')
                      }
                    }}
                  >
                    {column.label}
                    {sortKey === column.key &#x26;&#x26; (
                      &#x3C;span className="ml-2">
                        {sortOrder === 'asc' ? '↑' : '↓'}
                      &#x3C;/span>
                    )}
                  &#x3C;/Button>
                ) : (
                  column.label
                )}
              &#x3C;/TableHead>
            ))}
          &#x3C;/TableRow>
        &#x3C;/TableHeader>
        &#x3C;TableBody>
          {sortedData.map((item, index) => (
            &#x3C;TableRow key={index}>
              {columns.map(column => (
                &#x3C;TableCell key={String(column.key)}>
                  {String(item[column.key])}
                &#x3C;/TableCell>
              ))}
            &#x3C;/TableRow>
          ))}
        &#x3C;/TableBody>
      &#x3C;/Table>
    &#x3C;/div>
  )
}
</code></pre>
<h2 id="まとめshadcnuiがもたらす新しい開発体験">まとめ：shadcn/uiがもたらす新しい開発体験</h2>
<p>shadcn/uiは、従来のUIライブラリとは全く異なるアプローチで、開発者に次のような価値を提供しています：</p>
<h3 id="-主なメリット">🎯 <strong>主なメリット</strong></h3>
<ol>
<li><strong>完全な制御権</strong> - コードを直接所有し、自由にカスタマイズ</li>
<li><strong>最小限のバンドルサイズ</strong> - 必要なものだけを含める</li>
<li><strong>アクセシビリティ</strong> - Radix UIによる堅牢な実装
<ul>
<li>すべてのコンポーネントがキーボード操作可能</li>
<li>スクリーンリーダー対応（NVDA、JAWS、VoiceOver）</li>
<li>WAI-ARIA仕様に準拠</li>
<li>フォーカス管理の自動化</li>
</ul>
</li>
<li><strong>型安全性</strong> - TypeScriptファーストな設計</li>
<li><strong>モダンな開発体験</strong> - Tailwind CSSとの完璧な統合</li>
</ol>
<h3 id="-これからの展望">🚀 <strong>これからの展望</strong></h3>
<ul>
<li>AI（v0.dev）との統合がさらに進化</li>
<li>Vue、Svelte版の充実</li>
<li>コンポーネントの種類がさらに増加</li>
<li>エンタープライズ向け機能の充実</li>
</ul>
<h3 id="-導入を検討すべきタイミング">💡 <strong>導入を検討すべきタイミング</strong></h3>
<ul>
<li>新規プロジェクトの立ち上げ時</li>
<li>デザインシステムの刷新時</li>
<li>パフォーマンス改善が必要な時</li>
<li>Tailwind CSSへの移行を検討している時</li>
</ul>
<p>shadcn/uiは「ライブラリ」ではなく「哲学」です。コンポーネントを「使う」のではなく「所有する」という考え方は、長期的なプロジェクトの保守性と拡張性を大きく向上させます。</p>
<p>2025年のフロントエンド開発において、shadcn/uiは単なるトレンドではなく、新しいスタンダードになりつつあります。この記事を参考に、ぜひあなたのプロジェクトでもshadcn/uiを試してみてください。</p>
<h2 id="参考リンク">参考リンク</h2>
<ul>
<li><a href="https://ui.shadcn.com/">shadcn/ui 公式サイト</a></li>
<li><a href="https://www.radix-ui.com/">Radix UI</a></li>
<li><a href="https://tailwindcss.com/">Tailwind CSS</a></li>
<li><a href="https://v0.dev/">v0.dev</a></li>
<li><a href="https://github.com/shadcn-ui/ui">shadcn/ui GitHub</a></li>
<li><a href="https://risingstars.js.org/2023/ja">JavaScript Rising Stars 2023</a></li>
</ul>
<hr>
<p><strong>Happy Coding with shadcn/ui! 🎨✨</strong></p>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",16]}]," ","shadcn/uiが変えるフロントエンド開発！従来のUIライブラリとは一線を画す新アプローチの全貌"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-08-04 21:00"]}],"$undefined",["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"React"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"shadcn/ui"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Tailwind CSS"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"UI Components"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"フロントエンド"}],["$","span","5",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Web開発"}],["$","span","6",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"デザインシステム"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
