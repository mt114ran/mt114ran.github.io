1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"KZrMisSdXyu7FDjuS9HOy","p":"","c":["","blog","dotenv-file-complete-guide",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","dotenv-file-complete-guide","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","dotenv-file-complete-guide","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","kXesZazKIqqmvadT9WAg8",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:T45f8,<p>開発中に「APIキーはどこに保存すればいい？」「本番環境と開発環境で設定を分けたい」と悩んだことはありませんか？<code>.env</code>ファイルは、これらの問題を解決する重要な仕組みです。本記事では、<code>.env</code>ファイルの基本から、セキュリティ上の注意点、よくある失敗例まで詳しく解説します。</p>
<h2 id="-目次">📚 目次</h2>
<ul>
<li><a href="#env%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A8%E3%81%AF">.envファイルとは？</a></li>
<li><a href="#%E3%81%AA%E3%81%9Cenv%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B">なぜ.envファイルが必要なのか</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9">基本的な使い方</a></li>
<li><a href="#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E8%A8%AD%E5%AE%9A%E3%81%A8%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E8%A8%AD%E5%AE%9A">グローバル設定とプロジェクト設定</a></li>
<li><a href="#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E7%B5%B6%E5%AF%BE%E3%81%AB%E5%AE%88%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%AB%E3%83%BC%E3%83%AB">セキュリティ：絶対に守るべきルール</a></li>
<li><a href="#%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E5%A4%B1%E6%95%97%E3%81%A8%E5%AF%BE%E5%87%A6%E6%B3%95">よくある失敗と対処法</a></li>
<li><a href="#%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E5%88%A5%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9">フレームワーク別の使い方</a></li>
<li><a href="#%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9">ベストプラクティス</a></li>
</ul>
<h2 id="envファイルとは">.envファイルとは？</h2>
<p><code>.env</code>ファイルは、環境変数を定義するためのテキストファイルです。プロジェクトの設定値や秘密情報を安全に管理するために使用されます。</p>
<h3 id="基本的な構造">基本的な構造</h3>
<pre><code class="language-bash"># .envファイルの例
DATABASE_URL=postgresql://localhost:5432/myapp
API_KEY=sk-1234567890abcdef
NODE_ENV=development
PORT=3000
</code></pre>
<h3 id="特徴">特徴</h3>
<ul>
<li><strong>シンプルな形式</strong>: <code>KEY=VALUE</code>の形式で記述</li>
<li><strong>コメント対応</strong>: <code>#</code>で始まる行はコメント</li>
<li><strong>改行区切り</strong>: 1行に1つの環境変数</li>
<li><strong>クォート不要</strong>: 通常は値をクォートで囲む必要なし（スペースを含む場合は必要）</li>
</ul>
<h2 id="なぜenvファイルが必要なのか">なぜ.envファイルが必要なのか</h2>
<h3 id="1-秘密情報の保護">1. 秘密情報の保護</h3>
<pre><code class="language-javascript">// ❌ 悪い例：コードに直接記述
const apiKey = "sk-1234567890abcdef";  // GitHubに公開される！

// ✅ 良い例：環境変数から取得
const apiKey = process.env.API_KEY;  // .envから読み込み
</code></pre>
<h3 id="2-環境ごとの設定切り替え">2. 環境ごとの設定切り替え</h3>
<pre><code class="language-bash"># .env.development
DATABASE_URL=postgresql://localhost:5432/dev_db
API_ENDPOINT=http://localhost:3000

# .env.production
DATABASE_URL=postgresql://prod-server:5432/prod_db
API_ENDPOINT=https://api.example.com
</code></pre>
<h3 id="3-チーム開発での設定共有">3. チーム開発での設定共有</h3>
<pre><code class="language-bash"># .env.example（GitHubにコミット）
DATABASE_URL=your_database_url_here
API_KEY=your_api_key_here
PORT=3000

# .env（各開発者がローカルで作成）
DATABASE_URL=postgresql://localhost:5432/myapp
API_KEY=sk-actual-key-123456
PORT=3000
</code></pre>
<h2 id="基本的な使い方">基本的な使い方</h2>
<h3 id="1-nodejsでの使用dotenvパッケージ">1. Node.jsでの使用（dotenvパッケージ）</h3>
<pre><code class="language-bash"># インストール
npm install dotenv
</code></pre>
<pre><code class="language-javascript">// index.js の最初に記述
require('dotenv').config();

// または ES6
import dotenv from 'dotenv';
dotenv.config();

// 環境変数の使用
console.log(process.env.DATABASE_URL);
console.log(process.env.API_KEY);
</code></pre>
<h3 id="2-複数のenvファイルの管理">2. 複数の.envファイルの管理</h3>
<pre><code class="language-javascript">// 環境に応じて読み込むファイルを変更
const dotenv = require('dotenv');

if (process.env.NODE_ENV === 'production') {
  dotenv.config({ path: '.env.production' });
} else {
  dotenv.config({ path: '.env.development' });
}
</code></pre>
<h3 id="3-デフォルト値の設定">3. デフォルト値の設定</h3>
<pre><code class="language-javascript">// 環境変数が未定義の場合のデフォルト値
const port = process.env.PORT || 3000;
const dbUrl = process.env.DATABASE_URL || 'postgresql://localhost:5432/default';
</code></pre>
<h2 id="グローバル設定とプロジェクト設定">グローバル設定とプロジェクト設定</h2>
<h3 id="ファイルの配置と優先順位">ファイルの配置と優先順位</h3>
<pre><code>~/.env                       # グローバル設定（すべてのプロジェクト）
~/project1/.env             # プロジェクト1専用
~/project1/src/.env         # サブディレクトリ（通常は使わない）
</code></pre>
<h3 id="読み込み優先順位">読み込み優先順位</h3>
<p>多くのツールは以下の順序で.envを探します：</p>
<ol>
<li><strong>カレントディレクトリ</strong> の<code>.env</code></li>
<li><strong>親ディレクトリ</strong> を順に探索</li>
<li><strong>ホームディレクトリ</strong> の<code>.env</code></li>
</ol>
<h3 id="グローバル-vs-プロジェクト設定の使い分け">グローバル vs プロジェクト設定の使い分け</h3>
<pre><code class="language-bash"># ~/.env（グローバル - 個人の認証情報）
GITHUB_TOKEN=ghp_xxxxxxxxxxxx
GEMINI_API_KEY=AIxxxxxxxxxxxxxxx
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxx
NPM_TOKEN=npm_xxxxxxxxxxxx

# project/.env（プロジェクト固有 - アプリ設定）
DATABASE_URL=postgresql://localhost:5432/myapp
REDIS_URL=redis://localhost:6379
API_BASE_URL=http://localhost:3000
FEATURE_FLAG_NEW_UI=true
</code></pre>
<h2 id="セキュリティ絶対に守るべきルール">セキュリティ：絶対に守るべきルール</h2>
<h3 id="-rule-1-envファイルは絶対にgitにコミットしない">🚨 Rule 1: .envファイルは絶対にGitにコミットしない</h3>
<pre><code class="language-bash"># .gitignore に必ず追加
.env
.env.*
!.env.example  # exampleファイルは除外
</code></pre>
<h3 id="-rule-2-envexampleを用意する">🚨 Rule 2: .env.exampleを用意する</h3>
<pre><code class="language-bash"># .env.example（これはGitにコミットOK）
# データベース接続
DATABASE_URL=postgresql://username:password@localhost:5432/dbname

# 外部API
STRIPE_API_KEY=sk_test_xxxxxxxxxxxxx
SENDGRID_API_KEY=SG.xxxxxxxxxxxxx

# アプリケーション設定
PORT=3000
NODE_ENV=development
</code></pre>
<h3 id="-rule-3-本番環境ではenvファイルを使わない">🚨 Rule 3: 本番環境では.envファイルを使わない</h3>
<pre><code class="language-bash"># 本番環境では環境変数を直接設定
# Heroku
heroku config:set API_KEY=production_key

# AWS ECS
aws ecs update-service --environment API_KEY=production_key

# Docker
docker run -e API_KEY=production_key myapp
</code></pre>
<h3 id="-rule-4-apiキーの権限は最小限に">🚨 Rule 4: APIキーの権限は最小限に</h3>
<pre><code class="language-javascript">// APIキーごとに権限を分ける
STRIPE_PUBLISHABLE_KEY=pk_test_xxx  // フロントエンド用（公開可能）
STRIPE_SECRET_KEY=sk_test_xxx       // バックエンド用（秘密）

// 環境ごとにキーを分ける
DEV_API_KEY=dev_xxx    // 開発環境（制限付き）
PROD_API_KEY=prod_xxx  // 本番環境（必要最小限の権限）
</code></pre>
<h2 id="よくある失敗と対処法">よくある失敗と対処法</h2>
<h3 id="-ケース1-envをgithubに公開してしまった">❌ ケース1: .envをGitHubに公開してしまった</h3>
<pre><code class="language-bash"># 誤ってコミットしてしまった場合の対処法

# 1. まず.gitignoreに追加
echo ".env" >> .gitignore

# 2. キャッシュから削除
git rm --cached .env

# 3. コミット
git commit -m "Remove .env from tracking"

# 4. 【重要】履歴から完全に削除
# BFG Repo-Cleanerを使用
bfg --delete-files .env
git push --force

# 5. 【最重要】流出したAPIキーは即座に無効化・再発行！
</code></pre>
<h3 id="-ケース2-環境変数が読み込まれない">❌ ケース2: 環境変数が読み込まれない</h3>
<pre><code class="language-javascript">// よくある原因と解決法

// 1. dotenvの読み込み位置が間違っている
// ❌ 悪い例
const apiKey = process.env.API_KEY;  // undefined
require('dotenv').config();

// ✅ 良い例
require('dotenv').config();  // 最初に読み込む
const apiKey = process.env.API_KEY;

// 2. ファイルパスが間違っている
// デバッグ方法
const result = dotenv.config();
if (result.error) {
  console.error('Error loading .env file:', result.error);
}
</code></pre>
<h3 id="-ケース3-スペースや特殊文字の扱い">❌ ケース3: スペースや特殊文字の扱い</h3>
<pre><code class="language-bash"># .envファイルでの注意点

# ❌ 悪い例
API_KEY = sk-123456  # スペースが含まれる
DATABASE_URL=postgresql://user:pass word@localhost  # パスワードにスペース

# ✅ 良い例
API_KEY=sk-123456  # スペースなし
DATABASE_URL="postgresql://user:pass word@localhost"  # クォートで囲む

# 特殊文字を含む場合
PASSWORD="p@$$w0rd!"  # 特殊文字はクォートで囲む
MULTILINE="line1\nline2\nline3"  # 改行も可能
</code></pre>
<h3 id="-ケース4-変数の上書き">❌ ケース4: 変数の上書き</h3>
<pre><code class="language-javascript">// .envと環境変数の優先順位

// dotenvのデフォルト動作：既存の環境変数を上書きしない
process.env.API_KEY = 'original';
require('dotenv').config();  // .envのAPI_KEYは無視される

// 強制的に上書きする場合
require('dotenv').config({ override: true });
</code></pre>
<h2 id="フレームワーク別の使い方">フレームワーク別の使い方</h2>
<h3 id="nextjs">Next.js</h3>
<pre><code class="language-bash"># Next.jsは自動的に.envを読み込む
.env                # すべての環境
.env.local          # ローカル設定（gitignore推奨）
.env.development    # 開発環境
.env.production     # 本番環境
</code></pre>
<pre><code class="language-javascript">// Next.jsでの使用
// サーバーサイド
console.log(process.env.SECRET_KEY);

// クライアントサイド（NEXT_PUBLIC_プレフィックス必須）
console.log(process.env.NEXT_PUBLIC_API_URL);
</code></pre>
<h3 id="create-react-app">Create React App</h3>
<pre><code class="language-bash"># CRAも自動的に.envを読み込む
# REACT_APP_プレフィックスが必須
REACT_APP_API_URL=http://localhost:3000
REACT_APP_VERSION=$npm_package_version
</code></pre>
<h3 id="docker">Docker</h3>
<pre><code class="language-dockerfile"># Dockerfile
FROM node:18
WORKDIR /app
COPY . .

# ビルド時の環境変数
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# 実行時の環境変数（docker-compose.yml）
</code></pre>
<pre><code class="language-yaml"># docker-compose.yml
version: '3.8'
services:
  app:
    build: .
    env_file:
      - .env  # .envファイルから読み込み
    environment:
      - NODE_ENV=production  # 直接指定も可能
</code></pre>
<h3 id="cli-ツールgemini-cliの例">CLI ツール（Gemini CLIの例）</h3>
<pre><code class="language-bash"># ~/.env（ホームディレクトリ）
GEMINI_API_KEY=AIxxxxxxxxxxxxx

# CLIツールは通常、以下の優先順位で読み込む
# 1. 環境変数（export GEMINI_API_KEY=xxx）
# 2. カレントディレクトリの.env
# 3. ホームディレクトリの.env
</code></pre>
<h2 id="ベストプラクティス">ベストプラクティス</h2>
<h3 id="1-命名規則">1. 命名規則</h3>
<pre><code class="language-bash"># 大文字とアンダースコア
DATABASE_URL=xxx        # ✅ 推奨
database-url=xxx        # ❌ 避ける

# プレフィックスでグループ化
DB_HOST=localhost
DB_PORT=5432
DB_NAME=myapp

AWS_ACCESS_KEY_ID=xxx
AWS_SECRET_ACCESS_KEY=xxx
AWS_REGION=ap-northeast-1
</code></pre>
<h3 id="2-値の検証">2. 値の検証</h3>
<pre><code class="language-javascript">// 必須環境変数のチェック
const requiredEnvVars = [
  'DATABASE_URL',
  'API_KEY',
  'JWT_SECRET'
];

requiredEnvVars.forEach(varName => {
  if (!process.env[varName]) {
    console.error(`Error: ${varName} is not set`);
    process.exit(1);
  }
});
</code></pre>
<h3 id="3-型安全な環境変数">3. 型安全な環境変数</h3>
<pre><code class="language-typescript">// TypeScriptでの型定義
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      NODE_ENV: 'development' | 'production' | 'test';
      DATABASE_URL: string;
      API_KEY: string;
      PORT?: string;  // オプショナル
    }
  }
}

// zodを使った検証
import { z } from 'zod';

const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production', 'test']),
  DATABASE_URL: z.string().url(),
  PORT: z.string().regex(/^\d+$/).transform(Number).default('3000'),
});

const env = envSchema.parse(process.env);
</code></pre>
<h3 id="4-環境変数のドキュメント化">4. 環境変数のドキュメント化</h3>
<pre><code class="language-markdown"># 環境変数一覧（README.md）

## 必須環境変数

| 変数名 | 説明 | 例 | デフォルト値 |
|--------|------|-----|------------|
| DATABASE_URL | PostgreSQL接続URL | postgresql://localhost:5432/myapp | なし |
| JWT_SECRET | JWT署名用の秘密鍵 | random-string-here | なし |

## オプション環境変数

| 変数名 | 説明 | 例 | デフォルト値 |
|--------|------|-----|------------|
| PORT | サーバーポート | 3000 | 3000 |
| LOG_LEVEL | ログレベル | debug | info |
</code></pre>
<h2 id="トラブルシューティング">トラブルシューティング</h2>
<h3 id="q-envファイルが読み込まれない">Q: .envファイルが読み込まれない</h3>
<pre><code class="language-javascript">// デバッグ方法
const path = require('path');
const dotenv = require('dotenv');

// 明示的にパスを指定
const result = dotenv.config({
  path: path.resolve(__dirname, '.env')
});

console.log('Loaded:', result.parsed);
console.log('Error:', result.error);
</code></pre>
<h3 id="q-windowsで環境変数が設定できない">Q: Windowsで環境変数が設定できない</h3>
<pre><code class="language-bash"># cross-envを使用
npm install --save-dev cross-env

# package.json
{
  "scripts": {
    "dev": "cross-env NODE_ENV=development node app.js"
  }
}
</code></pre>
<h3 id="q-dockerコンテナでenvが見つからない">Q: Dockerコンテナで.envが見つからない</h3>
<pre><code class="language-dockerfile"># .dockerignoreに.envが含まれていないか確認
# .dockerignore
node_modules
.git
# .env  ← コメントアウトまたは削除

# またはCOPY命令で明示的にコピー
COPY .env .env
</code></pre>
<h2 id="セキュリティチェックリスト">セキュリティチェックリスト</h2>
<p>開発を始める前に、以下の項目を確認してください：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> <code>.gitignore</code>に<code>.env</code>が含まれている</li>
<li class="task-list-item"><input type="checkbox" disabled> <code>.env.example</code>を作成した</li>
<li class="task-list-item"><input type="checkbox" disabled> APIキーは最小権限になっている</li>
<li class="task-list-item"><input type="checkbox" disabled> 本番環境の秘密情報は別管理</li>
<li class="task-list-item"><input type="checkbox" disabled> チームメンバーに.envの扱い方を共有した</li>
<li class="task-list-item"><input type="checkbox" disabled> 定期的にAPIキーをローテーションする計画がある</li>
<li class="task-list-item"><input type="checkbox" disabled> 流出時の対応手順を決めている</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p><code>.env</code>ファイルは、現代の開発において欠かせない環境変数管理ツールです。正しく使えば開発効率が大幅に向上しますが、誤った使い方をするとセキュリティリスクになります。</p>
<h3 id="覚えておくべき3つのポイント">覚えておくべき3つのポイント</h3>
<ol>
<li><strong>絶対にGitにコミットしない</strong> - .gitignoreに必ず追加</li>
<li><strong>環境ごとに分ける</strong> - 開発/本番で異なる設定を使用</li>
<li><strong>最小権限の原則</strong> - APIキーは必要最小限の権限のみ</li>
</ol>
<p>これらの基本を守ることで、安全で効率的な開発環境を構築できます。</p>
<h2 id="参考リンク">参考リンク</h2>
<ul>
<li><a href="https://github.com/motdotla/dotenv">dotenv公式ドキュメント</a></li>
<li><a href="https://12factor.net/config">The Twelve-Factor App - Config</a></li>
<li><a href="https://nextjs.org/docs/basic-features/environment-variables">Next.js環境変数</a></li>
<li><a href="https://docs.docker.com/compose/environment-variables/">Docker環境変数のベストプラクティス</a></li>
</ul>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",30]}]," ",".envファイル完全ガイド：環境変数管理のベストプラクティスとセキュリティ"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-08-11 03:15"]}],"$undefined",["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":".env"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"環境変数"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"セキュリティ"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"dotenv"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"Node.js"}],["$","span","5",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"初心者向け"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
