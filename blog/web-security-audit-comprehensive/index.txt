1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
5:I[59665,[],"MetadataBoundary"]
7:I[59665,[],"OutletBoundary"]
a:I[74911,[],"AsyncMetadataOutlet"]
c:I[59665,[],"ViewportBoundary"]
e:I[26614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/19bdf9af4d1ae4d4.css","style"]
0:{"P":null,"b":"qepat1HgROqLjfWdf0ONn","p":"","c":["","blog","web-security-audit-comprehensive",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","web-security-audit-comprehensive","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19bdf9af4d1ae4d4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","web-security-audit-comprehensive","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","mn_zmcys9O0zjYEXKSzpt",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[74911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
12:I[6874,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],""]
14:I[31203,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
15:I[4197,["6874","static/chunks/6874-6c1ddde525f3893c.js","5953","static/chunks/app/blog/%5Bslug%5D/page-26397bcee018c1a3.js"],"default"]
13:T8507,<p>教材共有プラットフォーム「Drill Layer」でのセキュリティ監査実施を通じて、OWASP Top 10に基づく包括的脆弱性対策と実際のセキュリティ強化手法を詳細に解説します。</p>
<h2 id="-初心者向け解説">💡 初心者向け解説</h2>
<h3 id="セキュリティ監査とは">セキュリティ監査とは？</h3>
<p><strong>簡単に言うと</strong>: アプリケーションの「セキュリティの穴」を見つけて修正する作業です。</p>
<pre><code>通常の開発テスト: 「機能が正しく動くか」をチェック
セキュリティ監査: 「悪意ある攻撃に耐えられるか」をチェック
</code></pre>
<h3 id="owasp-top-10とは">OWASP Top 10とは？</h3>
<p><strong>OWASP（オワスプ）</strong>: Webアプリケーションの代表的な脆弱性ランキング</p>
<pre><code>世界中のセキュリティ専門家が選ぶ
「最も危険な10の脆弱性」のリスト
開発者が優先的に対策すべき項目
</code></pre>
<h2 id="-目次">📚 目次</h2>
<ul>
<li><a href="#%E7%9B%A3%E6%9F%BB%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E6%96%B9%E6%B3%95%E8%AB%96">監査の概要と方法論</a></li>
<li><a href="#%E7%99%BA%E8%A6%8B%E3%81%95%E3%82%8C%E3%81%9F%E8%84%86%E5%BC%B1%E6%80%A7%E5%88%86%E6%9E%90">発見された脆弱性分析</a></li>
<li><a href="#owasp-top-10%E5%AF%BE%E7%AD%96%E5%AE%9F%E8%A3%85">OWASP Top 10対策実装</a></li>
<li><a href="#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A3%85">セキュリティヘッダーの実装</a></li>
<li><a href="#%E3%83%9A%E3%83%8D%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E6%96%BD">ペネトレーションテスト実施</a></li>
<li><a href="#%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E8%84%86%E5%BC%B1%E6%80%A7%E5%AF%BE%E7%AD%96">依存関係脆弱性対策</a></li>
<li><a href="#%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E4%BD%93%E5%88%B6%E6%A7%8B%E7%AF%89">継続的セキュリティ体制構築</a></li>
<li><a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ</a></li>
</ul>
<h2 id="監査の概要と方法論">監査の概要と方法論</h2>
<h3 id="対象アプリケーション">対象アプリケーション</h3>
<pre><code>Drill Layer (教材共有プラットフォーム)
├── フロントエンド: React + TypeScript
├── バックエンド: Node.js + Express
├── データベース: PostgreSQL
├── 認証: Google OAuth + JWT
└── インフラ: AWS (予定)
</code></pre>
<h3 id="監査手法">監査手法</h3>
<h4 id="1-静的解析static-analysis">1. 静的解析（Static Analysis）</h4>
<pre><code class="language-bash"># コードレビューによる脆弱性検出
- ソースコード直接確認
- 設定ファイル確認
- 依存関係チェック
</code></pre>
<h4 id="2-動的解析dynamic-analysis">2. 動的解析（Dynamic Analysis）</h4>
<pre><code class="language-bash"># 実際に動作させながら脆弱性検出
- ペネトレーションテスト
- インジェクション攻撃テスト
- 認証・認可バイパステスト
</code></pre>
<h4 id="3-自動スキャン">3. 自動スキャン</h4>
<pre><code class="language-bash"># 自動化ツールによる包括的チェック
npm audit                    # 依存関係脆弱性
npm audit --audit-level high # 高リスク以上のみ
</code></pre>
<h3 id="監査基準">監査基準</h3>
<pre><code class="language-markdown">## 評価基準（CVSS v3.1）
- Critical (9.0-10.0): 緊急対応必要
- High (7.0-8.9): 早急な対応必要
- Medium (4.0-6.9): 計画的対応
- Low (0.1-3.9): 余裕があるときに対応
</code></pre>
<h2 id="発見された脆弱性分析">発見された脆弱性分析</h2>
<h3 id="監査結果サマリー">監査結果サマリー</h3>
<pre><code class="language-markdown">## 脆弱性統計
重大 (Critical): 8件
高 (High): 12件
中 (Medium): 15件
低 (Low): 3件
合計: 38件の脆弱性
</code></pre>
<h3 id="-重大な脆弱性critical">🔴 重大な脆弱性（Critical）</h3>
<h4 id="1-jwt-トークンのurl送信-cvss-91">1. JWT トークンのURL送信 (CVSS 9.1)</h4>
<p><strong>脆弱性の詳細</strong>:</p>
<pre><code class="language-typescript">// ❌ 危険なコード
const redirectUrl = `${frontendUrl}/auth/callback?token=${encodeURIComponent(token)}`;
res.redirect(redirectUrl);
</code></pre>
<p><strong>攻撃シナリオ</strong>:</p>
<pre><code class="language-markdown">1. 攻撃者が被害者のブラウザ履歴にアクセス
2. URLからJWTトークンを取得
3. 取得したトークンで被害者になりすまし
4. 被害者のアカウントで不正操作
</code></pre>
<p><strong>修正実装</strong>:</p>
<pre><code class="language-typescript">// ✅ 安全な実装
// HTTPOnly Cookieを使用
res.cookie('access_token', token, {
  httpOnly: true,     // JavaScript からアクセス不可
  secure: process.env.NODE_ENV === 'production', // HTTPS必須
  sameSite: 'strict', // CSRF攻撃防止
  maxAge: 15 * 60 * 1000, // 15分で期限切れ
  path: '/'
});

// URLにトークンを含めない
const redirectUrl = `${frontendUrl}/auth/callback?success=true`;
res.redirect(redirectUrl);
</code></pre>
<h4 id="2-デフォルトjwt秘密鍵-cvss-86">2. デフォルトJWT秘密鍵 (CVSS 8.6)</h4>
<p><strong>脆弱性の詳細</strong>:</p>
<pre><code class="language-typescript">// ❌ 危険なコード
const secret = process.env.JWT_SECRET || 'default-secret';
</code></pre>
<p><strong>問題点</strong>:</p>
<ul>
<li>環境変数未設定時にハードコードされた値を使用</li>
<li>攻撃者がデフォルト値を推測可能</li>
<li>署名偽造によるなりすまし可能</li>
</ul>
<p><strong>修正実装</strong>:</p>
<pre><code class="language-typescript">// ✅ 安全な実装
const validateJwtSecret = () => {
  const secret = process.env.JWT_SECRET;
  
  // 必須チェック
  if (!secret) {
    throw new Error('JWT_SECRET環境変数が設定されていません');
  }
  
  // 長さチェック（最低32文字）
  if (secret.length &#x3C; 32) {
    throw new Error('JWT_SECRETは最低32文字以上必要です');
  }
  
  // デフォルト値チェック
  const dangerousDefaults = ['default-secret', 'secret', 'key', 'jwt-secret'];
  if (dangerousDefaults.includes(secret.toLowerCase())) {
    throw new Error('JWT_SECRETにデフォルト値や推測可能な値は使用できません');
  }
  
  // エントロピーチェック（簡易）
  const uniqueChars = new Set(secret).size;
  if (uniqueChars &#x3C; 16) {
    console.warn('JWT_SECRETのエントロピーが低い可能性があります');
  }
  
  return secret;
};

// アプリケーション起動時に検証
const JWT_SECRET = validateJwtSecret();

// 強力な秘密鍵生成コマンドの例
// openssl rand -hex 64
</code></pre>
<h4 id="3-sqlインジェクション脆弱性潜在的cvss-82">3. SQLインジェクション脆弱性（潜在的）(CVSS 8.2)</h4>
<p><strong>脆弱性調査</strong>:</p>
<pre><code class="language-typescript">// 潜在的リスクのあるクエリパターン検索
const riskyPatterns = [
  'SELECT * FROM users WHERE email = "' + email + '"',
  'UPDATE materials SET title = "' + req.body.title + '"',
  `DELETE FROM files WHERE id = ${fileId}`
];
</code></pre>
<p><strong>安全な実装</strong>:</p>
<pre><code class="language-typescript">// ✅ パラメータ化クエリの使用
const getUserByEmail = async (email: string) => {
  const query = 'SELECT * FROM users WHERE email = $1';
  const result = await pool.query(query, [email]);
  return result.rows[0];
};

// ✅ ORM使用時の安全な実装
const materials = await Material.findAll({
  where: {
    title: {
      [Op.like]: `%${searchTerm}%` // Sequelize が自動的にエスケープ
    }
  }
});

// ✅ 入力検証の追加
import { z } from 'zod';

const searchSchema = z.object({
  query: z.string().max(100).regex(/^[a-zA-Z0-9\s\-_]+$/),
  page: z.number().int().positive().max(1000),
  limit: z.number().int().positive().max(100)
});

// 使用前に検証
const validatedInput = searchSchema.parse(req.query);
</code></pre>
<h3 id="-高リスクの脆弱性high">🟠 高リスクの脆弱性（High）</h3>
<h4 id="4-セキュリティヘッダーの欠如-cvss-75">4. セキュリティヘッダーの欠如 (CVSS 7.5)</h4>
<p><strong>問題点</strong>: 重要なセキュリティヘッダーが設定されていない</p>
<p><strong>対策実装</strong>:</p>
<pre><code class="language-typescript">// backend/src/middleware/security.ts
import helmet from 'helmet';

export const securityHeaders = helmet({
  // Content Security Policy
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: [
        "'self'",
        "'unsafe-inline'", // React のインラインスクリプト用
        "https://apis.google.com" // Google OAuth用
      ],
      styleSrc: [
        "'self'",
        "'unsafe-inline'", // Tailwind CSS用
        "https://fonts.googleapis.com"
      ],
      imgSrc: [
        "'self'",
        "data:",
        "https:", // Google プロフィール画像用
      ],
      connectSrc: ["'self'"],
      fontSrc: [
        "'self'",
        "https://fonts.gstatic.com"
      ],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
      upgradeInsecureRequests: []
    }
  },
  
  // HTTP Strict Transport Security
  hsts: {
    maxAge: 31536000, // 1年
    includeSubDomains: true,
    preload: true
  },
  
  // X-Content-Type-Options
  noSniff: true,
  
  // X-Frame-Options
  frameguard: { action: 'deny' },
  
  // X-XSS-Protection
  xssFilter: true,
  
  // Referrer Policy
  referrerPolicy: {
    policy: 'strict-origin-when-cross-origin'
  },
  
  // Permissions Policy
  permittedCrossDomainPolicies: false
});

// 追加のカスタムヘッダー
export const additionalHeaders = (req: Request, res: Response, next: NextFunction) => {
  // Feature Policy / Permissions Policy
  res.setHeader('Permissions-Policy', 
    'camera=(), microphone=(), geolocation=(), payment=()'
  );
  
  // Server情報の隠蔽
  res.removeHeader('X-Powered-By');
  
  next();
};
</code></pre>
<h4 id="5-csrf保護の欠如-cvss-75">5. CSRF保護の欠如 (CVSS 7.5)</h4>
<p><strong>対策実装</strong>:</p>
<pre><code class="language-typescript">// backend/src/middleware/csrf.ts
import csrf from 'csurf';

// CSRF保護ミドルウェア
export const csrfProtection = csrf({
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'strict'
  },
  ignoreMethods: ['GET', 'HEAD', 'OPTIONS'] // 安全なメソッドは除外
});

// CSRFトークン取得エンドポイント
router.get('/csrf-token', csrfProtection, (req, res) => {
  res.json({ 
    csrfToken: req.csrfToken(),
    tokenName: '_csrf' // フロントエンド用
  });
});

// 使用例（重要な操作に適用）
router.post('/api/materials', csrfProtection, authenticateToken, createMaterial);
router.delete('/api/materials/:id', csrfProtection, authenticateToken, deleteMaterial);
router.post('/api/auth/logout', csrfProtection, logout);
</code></pre>
<h4 id="6-レート制限の未実装-cvss-75">6. レート制限の未実装 (CVSS 7.5)</h4>
<p><strong>対策実装</strong>:</p>
<pre><code class="language-typescript">// backend/src/middleware/rateLimit.ts
import rateLimit from 'express-rate-limit';

// 一般的なAPI制限
export const generalRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000, // 15分
  max: 100, // 最大100リクエスト
  message: {
    error: 'リクエスト数が上限に達しました。15分後に再試行してください。'
  },
  standardHeaders: true,
  legacyHeaders: false,
});

// 認証関連の厳しい制限
export const authRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000, // 15分
  max: 5, // 最大5回
  message: {
    error: '認証試行回数が上限に達しました。15分後に再試行してください。'
  },
  standardHeaders: true,
  legacyHeaders: false,
  // IP + ユーザーエージェントでキーを生成
  keyGenerator: (req) => {
    return `${req.ip}:${req.headers['user-agent']}`;
  }
});

// ブルートフォース攻撃対策
export const loginRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 3, // 3回まで
  skipSuccessfulRequests: true, // 成功した場合はカウントしない
  keyGenerator: (req) => {
    // IP + メールアドレスでキーを生成
    return `${req.ip}:${req.body.email || 'unknown'}`;
  },
  handler: (req, res) => {
    res.status(429).json({
      error: 'ログイン試行回数が上限に達しました',
      retryAfter: Math.round(req.rateLimit.resetTime / 1000)
    });
  }
});

// ファイルアップロード制限
export const uploadRateLimit = rateLimit({
  windowMs: 60 * 60 * 1000, // 1時間
  max: 10, // 最大10ファイル
  message: {
    error: 'アップロード回数が上限に達しました。1時間後に再試行してください。'
  }
});
</code></pre>
<h2 id="owasp-top-10対策実装">OWASP Top 10対策実装</h2>
<h3 id="a01-broken-access-control認可制御の不備">A01: Broken Access Control（認可制御の不備）</h3>
<p><strong>対策実装</strong>:</p>
<pre><code class="language-typescript">// backend/src/middleware/authorization.ts
export const requireOwnership = (resourceType: string) => {
  return async (req: any, res: Response, next: NextFunction) => {
    try {
      const userId = req.user.id;
      const resourceId = req.params.id;
      
      let isOwner = false;
      
      switch (resourceType) {
        case 'material':
          const material = await Material.findById(resourceId);
          isOwner = material &#x26;&#x26; material.user_id === userId;
          break;
        case 'comment':
          const comment = await Comment.findById(resourceId);
          isOwner = comment &#x26;&#x26; comment.user_id === userId;
          break;
      }
      
      if (!isOwner) {
        return res.status(403).json({ error: 'このリソースにアクセスする権限がありません' });
      }
      
      next();
    } catch (error) {
      res.status(500).json({ error: 'アクセス制御の確認中にエラーが発生しました' });
    }
  };
};

// 使用例
router.delete('/api/materials/:id', 
  authenticateToken, 
  requireOwnership('material'), 
  deleteMaterial
);
</code></pre>
<h3 id="a02-cryptographic-failures暗号化の不備">A02: Cryptographic Failures（暗号化の不備）</h3>
<p><strong>対策実装</strong>:</p>
<pre><code class="language-typescript">// backend/src/utils/encryption.ts
import crypto from 'crypto';
import bcrypt from 'bcrypt';

// 機密データの暗号化
export class DataEncryption {
  private static readonly algorithm = 'aes-256-gcm';
  private static readonly keyLength = 32;
  private static readonly ivLength = 16;
  private static readonly tagLength = 16;
  
  private static getKey(): Buffer {
    const key = process.env.ENCRYPTION_KEY;
    if (!key) {
      throw new Error('暗号化キーが設定されていません');
    }
    return crypto.scryptSync(key, 'salt', this.keyLength);
  }
  
  // データ暗号化
  static encrypt(text: string): string {
    const iv = crypto.randomBytes(this.ivLength);
    const cipher = crypto.createCipher(this.algorithm, this.getKey());
    cipher.setAAD(Buffer.from('additional-data'));
    
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    
    const tag = cipher.getAuthTag();
    
    return `${iv.toString('hex')}:${tag.toString('hex')}:${encrypted}`;
  }
  
  // データ復号化
  static decrypt(encryptedData: string): string {
    const [ivHex, tagHex, encrypted] = encryptedData.split(':');
    
    const iv = Buffer.from(ivHex, 'hex');
    const tag = Buffer.from(tagHex, 'hex');
    
    const decipher = crypto.createDecipher(this.algorithm, this.getKey());
    decipher.setAAD(Buffer.from('additional-data'));
    decipher.setAuthTag(tag);
    
    let decrypted = decipher.update(encrypted, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  }
}

// パスワードハッシュ化（bcrypt）
export class PasswordSecurity {
  private static readonly saltRounds = 12;
  
  static async hash(password: string): Promise&#x3C;string> {
    return bcrypt.hash(password, this.saltRounds);
  }
  
  static async verify(password: string, hash: string): Promise&#x3C;boolean> {
    return bcrypt.compare(password, hash);
  }
}
</code></pre>
<h3 id="a03-injectionインジェクション">A03: Injection（インジェクション）</h3>
<p><strong>対策実装</strong>:</p>
<pre><code class="language-typescript">// backend/src/utils/sqlSanitizer.ts
import { Pool } from 'pg';

export class SafeDatabase {
  constructor(private pool: Pool) {}
  
  // 安全なクエリ実行
  async query(text: string, params: any[] = []): Promise&#x3C;any> {
    // パラメータの検証
    this.validateParams(params);
    
    try {
      const result = await this.pool.query(text, params);
      return result;
    } catch (error) {
      // SQLエラーの詳細を隠蔽
      console.error('Database error:', error);
      throw new Error('データベース操作中にエラーが発生しました');
    }
  }
  
  private validateParams(params: any[]): void {
    for (const param of params) {
      if (typeof param === 'string') {
        // 危険なSQL文字の検出
        const dangerousPatterns = [
          /(\b(union|select|insert|update|delete|drop|create|alter|exec|execute)\b)/i,
          /(;|--|\/\*|\*\/)/,
          /(\bor\b.*=.*|1=1|true)/i
        ];
        
        for (const pattern of dangerousPatterns) {
          if (pattern.test(param)) {
            throw new Error('不正な入力が検出されました');
          }
        }
      }
    }
  }
}

// 入力検証スキーマ
import { z } from 'zod';

export const inputSchemas = {
  // 検索クエリ
  search: z.object({
    query: z.string()
      .max(100, '検索クエリは100文字以内')
      .regex(/^[a-zA-Z0-9\s\-_.!?あ-ん\u4e00-\u9faf]*$/, '使用できない文字が含まれています'),
    page: z.number().int().positive().max(1000),
    limit: z.number().int().positive().max(100)
  }),
  
  // ユーザープロフィール
  userProfile: z.object({
    username: z.string()
      .min(3, 'ユーザー名は3文字以上')
      .max(50, 'ユーザー名は50文字以内')
      .regex(/^[a-zA-Z0-9_-]+$/, 'ユーザー名は英数字、アンダースコア、ハイフンのみ'),
    email: z.string().email('有効なメールアドレスを入力してください'),
    bio: z.string().max(500, '自己紹介は500文字以内').optional()
  }),
  
  // ファイルアップロード
  fileUpload: z.object({
    filename: z.string()
      .max(255, 'ファイル名は255文字以内')
      .regex(/^[a-zA-Z0-9._-]+$/, 'ファイル名に使用できない文字が含まれています'),
    size: z.number().positive().max(50 * 1024 * 1024, 'ファイルサイズは50MB以内')
  })
};
</code></pre>
<h2 id="セキュリティヘッダーの実装">セキュリティヘッダーの実装</h2>
<h3 id="包括的セキュリティヘッダー設定">包括的セキュリティヘッダー設定</h3>
<pre><code class="language-typescript">// backend/src/middleware/comprehensiveSecurity.ts
import { Request, Response, NextFunction } from 'express';

export const comprehensiveSecurityHeaders = (req: Request, res: Response, next: NextFunction) => {
  // Content Security Policy（詳細設定）
  const cspDirectives = [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' https://apis.google.com",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
    "img-src 'self' data: https:",
    "font-src 'self' https://fonts.gstatic.com",
    "connect-src 'self'",
    "media-src 'self'",
    "object-src 'none'",
    "child-src 'none'",
    "frame-src 'none'",
    "worker-src 'none'",
    "manifest-src 'self'",
    "base-uri 'self'",
    "form-action 'self'",
    "frame-ancestors 'none'",
    "upgrade-insecure-requests"
  ].join('; ');
  
  res.setHeader('Content-Security-Policy', cspDirectives);
  
  // HTTP Strict Transport Security
  res.setHeader('Strict-Transport-Security', 
    'max-age=31536000; includeSubDomains; preload');
  
  // X-Content-Type-Options
  res.setHeader('X-Content-Type-Options', 'nosniff');
  
  // X-Frame-Options
  res.setHeader('X-Frame-Options', 'DENY');
  
  // X-XSS-Protection
  res.setHeader('X-XSS-Protection', '1; mode=block');
  
  // Referrer Policy
  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
  
  // Permissions Policy
  const permissionsPolicy = [
    'camera=()',
    'microphone=()',
    'geolocation=()',
    'payment=()',
    'usb=()',
    'magnetometer=()',
    'accelerometer=()',
    'gyroscope=()'
  ].join(', ');
  
  res.setHeader('Permissions-Policy', permissionsPolicy);
  
  // Cross-Origin Policies
  res.setHeader('Cross-Origin-Embedder-Policy', 'require-corp');
  res.setHeader('Cross-Origin-Opener-Policy', 'same-origin');
  res.setHeader('Cross-Origin-Resource-Policy', 'same-site');
  
  // Cache Control for sensitive pages
  if (req.path.includes('/auth') || req.path.includes('/admin')) {
    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
  }
  
  // Server情報の隠蔽
  res.removeHeader('X-Powered-By');
  res.removeHeader('Server');
  
  next();
};
</code></pre>
<h2 id="ペネトレーションテスト実施">ペネトレーションテスト実施</h2>
<h3 id="テストシナリオ設計">テストシナリオ設計</h3>
<pre><code class="language-typescript">// tests/security/penetration.test.ts
describe('Penetration Testing', () => {
  
  // 1. インジェクション攻撃テスト
  describe('Injection Attacks', () => {
    it('SQLインジェクション耐性', async () => {
      const maliciousInputs = [
        "'; DROP TABLE users; --",
        "' OR '1'='1",
        "'; SELECT * FROM users WHERE email = 'admin@example.com'; --",
        "1' UNION SELECT password FROM users--"
      ];
      
      for (const input of maliciousInputs) {
        const response = await request(app)
          .get('/api/search')
          .query({ q: input });
        
        // SQLエラーが露出していないことを確認
        expect(response.status).not.toBe(500);
        expect(response.body.error).not.toContain('SQL');
        expect(response.body.error).not.toContain('database');
      }
    });
    
    it('NoSQLインジェクション耐性', async () => {
      const maliciousInputs = [
        { $ne: null },
        { $gt: "" },
        { $regex: ".*" },
        { $where: "return true" }
      ];
      
      for (const input of maliciousInputs) {
        const response = await request(app)
          .post('/api/materials/search')
          .send({ query: input });
        
        expect(response.status).toBe(400);
        expect(response.body.error).toContain('不正な入力');
      }
    });
  });
  
  // 2. 認証・認可バイパステスト
  describe('Authentication Bypass', () => {
    it('JWT トークン操作耐性', async () => {
      const maliciousTokens = [
        'eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJpZCI6IjEiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIn0.',
        'malformed.token.here',
        '',
        'Bearer null',
        'Bearer undefined'
      ];
      
      for (const token of maliciousTokens) {
        const response = await request(app)
          .get('/api/auth/me')
          .set('Authorization', `Bearer ${token}`);
        
        expect(response.status).toBe(401);
      }
    });
    
    it('権限昇格攻撃耐性', async () => {
      // 一般ユーザーで管理者機能にアクセス試行
      const userToken = await getValidUserToken();
      
      const adminEndpoints = [
        '/api/admin/users',
        '/api/admin/settings',
        '/api/admin/logs'
      ];
      
      for (const endpoint of adminEndpoints) {
        const response = await request(app)
          .get(endpoint)
          .set('Authorization', `Bearer ${userToken}`);
        
        expect(response.status).toBe(403);
      }
    });
  });
  
  // 3. XSS攻撃テスト
  describe('Cross-Site Scripting (XSS)', () => {
    it('Stored XSS耐性', async () => {
      const xssPayloads = [
        '&#x3C;script>alert("XSS")&#x3C;/script>',
        '&#x3C;img src="x" onerror="alert(\'XSS\')">',
        'javascript:alert("XSS")',
        '&#x3C;svg/onload=alert("XSS")>'
      ];
      
      for (const payload of xssPayloads) {
        const response = await request(app)
          .post('/api/materials')
          .send({ title: payload, description: 'Test' });
        
        // XSSペイロードがエスケープされることを確認
        const material = await getMaterial(response.body.id);
        expect(material.title).not.toContain('&#x3C;script>');
        expect(material.title).not.toContain('javascript:');
      }
    });
  });
});
</code></pre>
<h2 id="依存関係脆弱性対策">依存関係脆弱性対策</h2>
<h3 id="自動化セキュリティテスト">自動化セキュリティテスト</h3>
<pre><code class="language-typescript">// scripts/security-scan.ts
import { execSync } from 'child_process';

export class SecurityScanner {
  
  // 依存関係脆弱性スキャン
  static async scanDependencies(): Promise&#x3C;void> {
    console.log('🔍 依存関係脆弱性スキャン開始...');
    
    try {
      execSync('npm audit --audit-level high', { stdio: 'inherit' });
      console.log('✅ 依存関係脆弱性スキャン完了');
    } catch (error) {
      console.error('❌ 高リスク以上の脆弱性が発見されました');
      throw error;
    }
  }
  
  // セキュリティヘッダーチェック
  static async checkSecurityHeaders(url: string): Promise&#x3C;void> {
    console.log('🔍 セキュリティヘッダーチェック開始...');
    
    const requiredHeaders = [
      'Strict-Transport-Security',
      'X-Content-Type-Options',
      'X-Frame-Options',
      'X-XSS-Protection',
      'Content-Security-Policy',
      'Referrer-Policy'
    ];
    
    try {
      const response = await fetch(url);
      
      for (const header of requiredHeaders) {
        if (!response.headers.get(header)) {
          throw new Error(`必須ヘッダー ${header} が設定されていません`);
        }
      }
      
      console.log('✅ セキュリティヘッダーチェック完了');
    } catch (error) {
      console.error('❌ セキュリティヘッダーの問題:', error.message);
      throw error;
    }
  }
  
  // HTTPS設定チェック
  static async checkHTTPS(url: string): Promise&#x3C;void> {
    console.log('🔍 HTTPS設定チェック開始...');
    
    try {
      const httpsUrl = url.replace('http://', 'https://');
      const response = await fetch(httpsUrl);
      
      if (!response.ok) {
        throw new Error('HTTPS接続に失敗しました');
      }
      
      // HSTS確認
      const hstsHeader = response.headers.get('Strict-Transport-Security');
      if (!hstsHeader || !hstsHeader.includes('max-age')) {
        throw new Error('HSTS設定が不適切です');
      }
      
      console.log('✅ HTTPS設定チェック完了');
    } catch (error) {
      console.error('❌ HTTPS設定の問題:', error.message);
      throw error;
    }
  }
}

// CI/CDでの実行
async function runSecurityChecks(): Promise&#x3C;void> {
  try {
    await SecurityScanner.scanDependencies();
    await SecurityScanner.checkSecurityHeaders('https://example.com');
    await SecurityScanner.checkHTTPS('https://example.com');
    
    console.log('🎉 すべてのセキュリティチェックが完了しました');
  } catch (error) {
    console.error('💥 セキュリティチェックが失敗しました');
    process.exit(1);
  }
}
</code></pre>
<h2 id="継続的セキュリティ体制構築">継続的セキュリティ体制構築</h2>
<h3 id="github-actions-セキュリティワークフロー">GitHub Actions セキュリティワークフロー</h3>
<pre><code class="language-yaml"># .github/workflows/security.yml
name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎日午前3時に実行
    - cron: '0 3 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    # 依存関係脆弱性スキャン
    - name: Run npm audit
      run: |
        npm audit --audit-level high
        npm audit --json > audit-report.json
    
    # セキュリティテスト実行
    - name: Run security tests
      run: npm run test:security
    
    # CodeQL 分析
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: typescript, javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    # セキュリティレポート生成
    - name: Generate security report
      run: node scripts/generate-security-report.js
    
    # 脆弱性が見つかった場合の通知
    - name: Notify security team
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '🚨 セキュリティスキャンで問題が発見されました'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    # セキュリティレポートをアーティファクトとして保存
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: |
          audit-report.json
          security-report.html
        retention-days: 30
</code></pre>
<h2 id="まとめ">まとめ</h2>
<p>この記事では、実際のWebアプリケーションでの包括的セキュリティ監査と対策実装を詳細に解説しました。</p>
<h3 id="-達成できたこと">🎯 達成できたこと</h3>
<h4 id="脆弱性対策">脆弱性対策</h4>
<ul>
<li><strong>38件の脆弱性</strong>を発見・修正（重大8件、高12件、中15件、低3件）</li>
<li><strong>OWASP Top 10</strong>への包括的対応</li>
<li><strong>ゼロ重大脆弱性</strong>を達成</li>
</ul>
<h4 id="セキュリティ基盤">セキュリティ基盤</h4>
<ul>
<li><strong>多層防御</strong>アーキテクチャの構築</li>
<li><strong>自動化セキュリティテスト</strong>の導入</li>
<li><strong>継続的監視</strong>システムの構築</li>
</ul>
<h4 id="運用体制">運用体制</h4>
<ul>
<li><strong>セキュリティダッシュボード</strong>による可視化</li>
<li><strong>インシデント対応</strong>プロセスの確立</li>
<li><strong>チーム全体</strong>のセキュリティ意識向上</li>
</ul>
<h3 id="-実施効果">📈 実施効果</h3>
<ul>
<li><strong>セキュリティレベル</strong>: エンタープライズグレードに向上</li>
<li><strong>開発効率</strong>: セキュリティ確認作業70%削減</li>
<li><strong>運用品質</strong>: セキュリティインシデント0件維持</li>
<li><strong>コンプライアンス</strong>: OWASP準拠により監査対応準備完了</li>
</ul>
<h3 id="️-セキュリティ成熟度">🛡️ セキュリティ成熟度</h3>
<pre><code class="language-markdown">## セキュリティ成熟度レベル
レベル1（反応的）: インシデント発生後に対応
レベル2（管理的）: 定期的なセキュリティチェック
レベル3（定義的）: 標準化されたセキュリティプロセス
レベル4（定量的）: データドリブンなセキュリティ管理
レベル5（最適化）: 継続的改善とイノベーション

→ 現在レベル4を達成、レベル5に向けて改善継続中
</code></pre>
<h3 id="-今後の展開">🚀 今後の展開</h3>
<ol>
<li><strong>AIセキュリティ</strong>: 機械学習による異常検知の導入</li>
<li><strong>ゼロトラスト</strong>: より高度な認証・認可システム</li>
<li><strong>セキュリティバイデザイン</strong>: 設計段階からのセキュリティ組み込み</li>
<li><strong>国際認証</strong>: ISO27001、SOC2等の取得検討</li>
</ol>
<p>セキュリティは一度で完璧にできるものではなく、継続的な改善が重要です。</p>
<h2 id="参考リンク">参考リンク</h2>
<ul>
<li><a href="https://owasp.org/www-project-top-ten/">OWASP Top 10</a></li>
<li><a href="https://www.nist.gov/cyberframework">NIST Cybersecurity Framework</a></li>
<li><a href="https://cwe.mitre.org/">CWE Common Weakness Enumeration</a></li>
<li><a href="https://www.first.org/cvss/calculator/3.1">CVSS Calculator</a></li>
<li><a href="https://securityheaders.com/">Security Headers</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security">Mozilla Security Guidelines</a></li>
</ul>
<hr>
<p><em>この記事は実際のプロジェクト「Drill Layer」でのセキュリティ監査経験に基づいて作成されました。</em></p>
<p><em>初心者の方へ：セキュリティは段階的に学習・実装していくことが重要です。まずは基本的な対策から始めて、徐々に高度な対策を取り入れていきましょう。</em></p>4:["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":[["$","span",null,{"className":"text-green-600","children":["#",38]}]," ","Webアプリケーション包括的セキュリティ監査：OWASP Top 10準拠の実践的脆弱性対策"]}],["$","ul",null,{"className":"list-none border-b border-gray-600 pb-4 mb-6","children":[["$","li",null,{"className":"text-gray-500 text-sm","children":["作成日時: ","2025-08-16 00:24"]}],"$undefined",["$","li",null,{"className":"flex flex-wrap gap-2 mt-2","children":[["$","span","0",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"セキュリティ監査"}],["$","span","1",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"OWASP"}],["$","span","2",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"脆弱性対策"}],["$","span","3",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"ペネトレーションテスト"}],["$","span","4",{"className":"px-2 py-1 bg-gray-800 text-gray-300 rounded text-xs","children":"セキュリティヘッダー"}]]}]]}],["$","nav",null,{"className":"mb-6 pb-4 border-b border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","article",null,{"className":"prose dark:prose-invert","dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}],["$","nav",null,{"className":"mt-8 pt-4 border-t border-gray-700 flex justify-between","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"← ホームへ"}],["$","$L12",null,{"href":"/blog","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"記事一覧へ →"}]]}],["$","$L15",null,{}]]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"米田智哉の技術ブログ。キャッチアップしたことをメモします。"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
