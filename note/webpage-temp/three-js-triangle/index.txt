1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
5:I[9665,[],"MetadataBoundary"]
7:I[9665,[],"OutletBoundary"]
a:I[4911,[],"AsyncMetadataOutlet"]
c:I[9665,[],"ViewportBoundary"]
e:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/21fca20b31fba572.css","style"]
0:{"P":null,"b":"h8nVJqgG2LdrtDCd0TWQX","p":"","c":["","note","webpage-temp","three-js-triangle",""],"i":false,"f":[[["",{"children":["note",{"children":["webpage-temp",{"children":[["id","three-js-triangle","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/21fca20b31fba572.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/favicon.png","type":"image/png"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["note",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["webpage-temp",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","three-js-triangle","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","2yyMfvB1xTCjHRkmvErkg",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[4911,[],"AsyncMetadata"]
12:I[6874,["874","static/chunks/874-8d3839f72fd80c3c.js","588","static/chunks/app/note/webpage-temp/%5Bid%5D/page-4b841b09f124fe29.js"],""]
13:I[8863,["874","static/chunks/874-8d3839f72fd80c3c.js","588","static/chunks/app/note/webpage-temp/%5Bid%5D/page-4b841b09f124fe29.js"],"default"]
14:I[9320,["874","static/chunks/874-8d3839f72fd80c3c.js","588","static/chunks/app/note/webpage-temp/%5Bid%5D/page-4b841b09f124fe29.js"],"default"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
15:T93c,<!-- Three.js CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

<div class="container">
    <div class="header">
        <h1>‚ú® Three.js Triangle Demo</h1>
        <p class="subtitle">Interactive 3D Triangle with Particles</p>
    </div>

    <div class="canvas-container">
        <canvas id="triangleCanvas"></canvas>
        
        <div class="controls">
            <div class="control-group">
                <label>ÂõûËª¢ÈÄüÂ∫¶</label>
                <input type="range" id="rotationSpeed" min="0" max="100" value="50">
                <span id="speedValue">50</span>
            </div>
            
            <div class="control-group">
                <label>‰∏âËßíÂΩ¢„Çµ„Ç§„Ç∫</label>
                <input type="range" id="triangleSize" min="50" max="200" value="100">
                <span id="sizeValue">100</span>
            </div>
            
            <div class="control-group">
                <label>„Éë„Éº„ÉÜ„Ç£„ÇØ„É´Êï∞</label>
                <input type="range" id="particleCount" min="0" max="500" value="200">
                <span id="particleValue">200</span>
            </div>
            
            <div class="button-group">
                <button id="resetBtn">üîÑ „É™„Çª„ÉÉ„Éà</button>
                <button id="randomColorBtn">üé® „É©„É≥„ÉÄ„É†„Ç´„É©„Éº</button>
                <button id="toggleParticlesBtn">‚ú® „Éë„Éº„ÉÜ„Ç£„ÇØ„É´ÂàáÊõø</button>
            </div>
        </div>
    </div>

    <div class="info-section">
        <h2>üéÆ Êìç‰ΩúÊñπÊ≥ï</h2>
        <div class="info-grid">
            <div class="info-card">
                <span class="icon">üñ±Ô∏è</span>
                <h3>„Éû„Ç¶„ÇπÊìç‰Ωú</h3>
                <p>„Éâ„É©„ÉÉ„Ç∞„ÅßË¶ñÁÇπ„ÇíÂõûËª¢<br>„Çπ„ÇØ„É≠„Éº„É´„Åß„Ç∫„Éº„É†</p>
            </div>
            <div class="info-card">
                <span class="icon">‚ö°</span>
                <h3>„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</h3>
                <p>60 FPS<br>GPUÊúÄÈÅ©Âåñ</p>
            </div>
            <div class="info-card">
                <span class="icon">üé®</span>
                <h3>„Ç´„É©„Éï„É´</h3>
                <p>È†ÇÁÇπ„Ç´„É©„Éº<br>„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥ÂäπÊûú</p>
            </div>
        </div>
    </div>
</div>16:Tfe5,* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: white;
    overflow-x: hidden;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.header {
    text-align: center;
    margin-bottom: 2rem;
    animation: fadeInDown 0.8s ease;
}

h1 {
    font-size: 3rem;
    margin-bottom: 0.5rem;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
}

.canvas-container {
    position: relative;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    margin-bottom: 2rem;
    animation: fadeInUp 0.8s ease;
}

#triangleCanvas {
    width: 100%;
    height: 500px;
    border-radius: 10px;
    display: block;
}

.controls {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 15px;
    padding: 1.5rem;
    margin-top: 1.5rem;
}

.control-group {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
}

.control-group label {
    width: 120px;
    font-size: 0.9rem;
}

.control-group input[type="range"] {
    flex: 1;
    height: 6px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
    outline: none;
    -webkit-appearance: none;
}

.control-group input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 18px;
    height: 18px;
    background: white;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
}

.control-group input[type="range"]::-moz-range-thumb {
    width: 18px;
    height: 18px;
    background: white;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
}

.control-group span {
    width: 40px;
    text-align: right;
}

.button-group {
    display: flex;
    gap: 1rem;
    margin-top: 1.5rem;
}

.button-group button {
    flex: 1;
    padding: 0.8rem;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}

.button-group button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.3);
}

.button-group button:active {
    transform: translateY(0);
}

.info-section {
    animation: fadeInUp 0.8s ease 0.2s both;
}

.info-section h2 {
    text-align: center;
    margin-bottom: 1.5rem;
    font-size: 2rem;
}

.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.info-card {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    padding: 1.5rem;
    text-align: center;
    backdrop-filter: blur(10px);
    transition: transform 0.3s, box-shadow 0.3s;
}

.info-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
}

.info-card .icon {
    font-size: 2.5rem;
    display: block;
    margin-bottom: 1rem;
}

.info-card h3 {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
}

.info-card p {
    opacity: 0.9;
    font-size: 0.9rem;
}

@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@media (max-width: 768px) {
    .container {
        padding: 1rem;
    }
    
    h1 {
        font-size: 2rem;
    }
    
    #triangleCanvas {
        height: 350px;
    }
    
    .control-group {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .control-group label {
        width: 100%;
    }
    
    .button-group {
        flex-direction: column;
    }
}17:T298f,// Three.js Triangle Demo
class TriangleDemo {
    constructor() {
        this.canvas = document.getElementById('triangleCanvas');
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.triangle = null;
        this.particles = null;
        this.controls = null;
        this.rotationSpeed = 0.5;
        this.triangleSize = 1;
        this.particlesEnabled = true;
        this.clock = new THREE.Clock();
        
        this.init();
        this.setupEventListeners();
    }
    
    init() {
        // Scene setup
        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(0x0a0a0a);
        this.scene.fog = new THREE.Fog(0x0a0a0a, 10, 50);
        
        // Canvas dimensions
        const rect = this.canvas.getBoundingClientRect();
        const width = rect.width;
        const height = rect.height;
        
        // Camera setup
        this.camera = new THREE.PerspectiveCamera(
            75,
            width / height,
            0.1,
            1000
        );
        this.camera.position.z = 5;
        
        // Renderer setup
        this.renderer = new THREE.WebGLRenderer({
            canvas: this.canvas,
            antialias: true,
            alpha: true
        });
        this.renderer.setSize(width, height);
        this.renderer.setPixelRatio(window.devicePixelRatio);
        
        // Create triangle
        this.createTriangle();
        
        // Create particles
        this.createParticles();
        
        // Lighting
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        this.scene.add(ambientLight);
        
        const pointLight = new THREE.PointLight(0xffffff, 1);
        pointLight.position.set(5, 5, 5);
        this.scene.add(pointLight);
        
        // Controls
        this.controls = new THREE.OrbitControls(this.camera, this.canvas);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.minDistance = 2;
        this.controls.maxDistance = 10;
        
        // Start animation
        this.animate();
        
        // Handle resize
        window.addEventListener('resize', () => this.onResize());
    }
    
    createTriangle() {
        // Custom triangle geometry
        const geometry = new THREE.BufferGeometry();
        
        // Vertices
        const vertices = new Float32Array([
            0, 1.5, 0,     // top
            -1.3, -0.75, 0, // bottom left
            1.3, -0.75, 0   // bottom right
        ]);
        
        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
        
        // Colors for each vertex
        const colors = new Float32Array([
            1.0, 0.0, 0.0,  // red
            0.0, 1.0, 0.0,  // green
            0.0, 0.0, 1.0   // blue
        ]);
        
        geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        
        // Compute normals for lighting
        geometry.computeVertexNormals();
        
        // Material with vertex colors
        const material = new THREE.MeshPhongMaterial({
            vertexColors: true,
            side: THREE.DoubleSide,
            shininess: 100,
            specular: 0xffffff,
            emissive: 0x111111
        });
        
        // Create mesh
        this.triangle = new THREE.Mesh(geometry, material);
        this.scene.add(this.triangle);
        
        // Add wireframe overlay
        const wireframeGeometry = new THREE.WireframeGeometry(geometry);
        const wireframeMaterial = new THREE.LineBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.2
        });
        const wireframe = new THREE.LineSegments(wireframeGeometry, wireframeMaterial);
        this.triangle.add(wireframe);
    }
    
    createParticles() {
        const particleCount = 200;
        const geometry = new THREE.BufferGeometry();
        const positions = new Float32Array(particleCount * 3);
        const colors = new Float32Array(particleCount * 3);
        
        for (let i = 0; i < particleCount * 3; i += 3) {
            // Random positions in a sphere
            const radius = 10;
            const theta = Math.random() * Math.PI * 2;
            const phi = Math.random() * Math.PI;
            
            positions[i] = radius * Math.sin(phi) * Math.cos(theta);
            positions[i + 1] = radius * Math.sin(phi) * Math.sin(theta);
            positions[i + 2] = radius * Math.cos(phi);
            
            // Random colors
            colors[i] = Math.random();
            colors[i + 1] = Math.random();
            colors[i + 2] = Math.random();
        }
        
        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        
        const material = new THREE.PointsMaterial({
            size: 0.05,
            vertexColors: true,
            transparent: true,
            opacity: 0.8,
            blending: THREE.AdditiveBlending
        });
        
        this.particles = new THREE.Points(geometry, material);
        this.scene.add(this.particles);
    }
    
    updateParticleCount(count) {
        // Remove old particles
        if (this.particles) {
            this.scene.remove(this.particles);
            this.particles.geometry.dispose();
            this.particles.material.dispose();
        }
        
        // Create new particles with updated count
        const geometry = new THREE.BufferGeometry();
        const positions = new Float32Array(count * 3);
        const colors = new Float32Array(count * 3);
        
        for (let i = 0; i < count * 3; i += 3) {
            const radius = 10;
            const theta = Math.random() * Math.PI * 2;
            const phi = Math.random() * Math.PI;
            
            positions[i] = radius * Math.sin(phi) * Math.cos(theta);
            positions[i + 1] = radius * Math.sin(phi) * Math.sin(theta);
            positions[i + 2] = radius * Math.cos(phi);
            
            colors[i] = Math.random();
            colors[i + 1] = Math.random();
            colors[i + 2] = Math.random();
        }
        
        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        
        const material = new THREE.PointsMaterial({
            size: 0.05,
            vertexColors: true,
            transparent: true,
            opacity: 0.8,
            blending: THREE.AdditiveBlending
        });
        
        this.particles = new THREE.Points(geometry, material);
        if (this.particlesEnabled) {
            this.scene.add(this.particles);
        }
    }
    
    setRandomColors() {
        const colors = new Float32Array([
            Math.random(), Math.random(), Math.random(),
            Math.random(), Math.random(), Math.random(),
            Math.random(), Math.random(), Math.random()
        ]);
        
        this.triangle.geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
    }
    
    animate() {
        requestAnimationFrame(() => this.animate());
        
        const delta = this.clock.getDelta();
        
        // Rotate triangle
        if (this.triangle) {
            this.triangle.rotation.x += 0.01 * this.rotationSpeed;
            this.triangle.rotation.y += 0.01 * this.rotationSpeed;
        }
        
        // Rotate particles
        if (this.particles && this.particlesEnabled) {
            this.particles.rotation.x += 0.001;
            this.particles.rotation.y += 0.002;
        }
        
        // Update controls
        this.controls.update();
        
        // Render
        this.renderer.render(this.scene, this.camera);
    }
    
    onResize() {
        const rect = this.canvas.getBoundingClientRect();
        const width = rect.width;
        const height = rect.height;
        
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
    }
    
    setupEventListeners() {
        // Rotation speed
        document.getElementById('rotationSpeed').addEventListener('input', (e) => {
            this.rotationSpeed = e.target.value / 50;
            document.getElementById('speedValue').textContent = e.target.value;
        });
        
        // Triangle size
        document.getElementById('triangleSize').addEventListener('input', (e) => {
            const scale = e.target.value / 100;
            this.triangle.scale.set(scale, scale, scale);
            document.getElementById('sizeValue').textContent = e.target.value;
        });
        
        // Particle count
        document.getElementById('particleCount').addEventListener('input', (e) => {
            const count = parseInt(e.target.value);
            this.updateParticleCount(count);
            document.getElementById('particleValue').textContent = count;
        });
        
        // Reset button
        document.getElementById('resetBtn').addEventListener('click', () => {
            document.getElementById('rotationSpeed').value = 50;
            document.getElementById('triangleSize').value = 100;
            document.getElementById('particleCount').value = 200;
            
            this.rotationSpeed = 0.5;
            this.triangle.scale.set(1, 1, 1);
            this.updateParticleCount(200);
            
            document.getElementById('speedValue').textContent = '50';
            document.getElementById('sizeValue').textContent = '100';
            document.getElementById('particleValue').textContent = '200';
            
            this.camera.position.set(0, 0, 5);
            this.controls.reset();
        });
        
        // Random color button
        document.getElementById('randomColorBtn').addEventListener('click', () => {
            this.setRandomColors();
        });
        
        // Toggle particles button
        document.getElementById('toggleParticlesBtn').addEventListener('click', () => {
            this.particlesEnabled = !this.particlesEnabled;
            if (this.particlesEnabled) {
                this.scene.add(this.particles);
            } else {
                this.scene.remove(this.particles);
            }
        });
    }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        new TriangleDemo();
    });
} else {
    new TriangleDemo();
}4:["$","div",null,{"className":"min-h-screen bg-gray-900 text-gray-100","children":["$","div",null,{"className":"max-w-7xl mx-auto py-10 px-4","children":[["$","nav",null,{"className":"mb-6 flex gap-4","children":[["$","$L12",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"„Éõ„Éº„É†"}],["$","span",null,{"className":"text-gray-500","children":"/"}],["$","$L12",null,{"href":"/note/webpage-temp","className":"text-blue-400 hover:text-blue-300 hover:underline","children":"„ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß"}],["$","span",null,{"className":"text-gray-500","children":"/"}],["$","span",null,{"className":"text-gray-400","children":"Three.js ÂõûËª¢„Åô„Çã‰∏âËßíÂΩ¢„Éá„É¢"}]]}],["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center gap-4 mb-4","children":[["$","h1",null,{"className":"text-3xl font-bold","children":"Three.js ÂõûËª¢„Åô„Çã‰∏âËßíÂΩ¢„Éá„É¢"}],["$","span",null,{"className":"px-3 py-1 bg-blue-600 text-white rounded text-sm","children":"3D Graphics"}]]}],["$","p",null,{"className":"text-gray-300 text-lg mb-4","children":"„Ç´„É©„Éï„É´„Å™‰∏âËßíÂΩ¢„Åå3DÁ©∫Èñì„ÅßÂõûËª¢„Åô„ÇãÁæé„Åó„ÅÑ„Éì„Ç∏„É•„Ç¢„É´„Éá„É¢"}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"px-3 py-1 bg-gray-800 text-gray-300 rounded text-sm","children":["‚úì ","„Ç´„É©„Éï„É´„Å™„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥‰∏âËßíÂΩ¢"]}],["$","span","1",{"className":"px-3 py-1 bg-gray-800 text-gray-300 rounded text-sm","children":["‚úì ","„Éû„Ç¶„ÇπÊìç‰Ωú„Å´„Çà„ÇãË¶ñÁÇπÂ§âÊõ¥"]}],["$","span","2",{"className":"px-3 py-1 bg-gray-800 text-gray-300 rounded text-sm","children":["‚úì ","Ëá™ÂãïÂõûËª¢„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥"]}],["$","span","3",{"className":"px-3 py-1 bg-gray-800 text-gray-300 rounded text-sm","children":["‚úì ","„Éë„Éº„ÉÜ„Ç£„ÇØ„É´„Ç®„Éï„Çß„ÇØ„Éà"]}],["$","span","4",{"className":"px-3 py-1 bg-gray-800 text-gray-300 rounded text-sm","children":["‚úì ","„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥"]}],["$","span","5",{"className":"px-3 py-1 bg-gray-800 text-gray-300 rounded text-sm","children":["‚úì ","„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ"]}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-6","children":[["$","span","0",{"className":"text-sm text-gray-500","children":["#","three.js"]}],["$","span","1",{"className":"text-sm text-gray-500","children":["#","3D"]}],["$","span","2",{"className":"text-sm text-gray-500","children":["#","WebGL"]}],["$","span","3",{"className":"text-sm text-gray-500","children":["#","animation"]}],["$","span","4",{"className":"text-sm text-gray-500","children":["#","triangle"]}]]}],["$","$L13",null,{"templateId":"three-js-triangle"}]]}],["$","$L14",null,{"template":{"id":"three-js-triangle","title":"Three.js ÂõûËª¢„Åô„Çã‰∏âËßíÂΩ¢„Éá„É¢","description":"„Ç´„É©„Éï„É´„Å™‰∏âËßíÂΩ¢„Åå3DÁ©∫Èñì„ÅßÂõûËª¢„Åô„ÇãÁæé„Åó„ÅÑ„Éì„Ç∏„É•„Ç¢„É´„Éá„É¢","category":"3D Graphics","thumbnail":"/templates/three-js-triangle.png","tags":["three.js","3D","WebGL","animation","triangle"],"features":["„Ç´„É©„Éï„É´„Å™„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥‰∏âËßíÂΩ¢","„Éû„Ç¶„ÇπÊìç‰Ωú„Å´„Çà„ÇãË¶ñÁÇπÂ§âÊõ¥","Ëá™ÂãïÂõûËª¢„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥","„Éë„Éº„ÉÜ„Ç£„ÇØ„É´„Ç®„Éï„Çß„ÇØ„Éà","„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥","„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ"],"isPro":true,"code":{"html":"$15","css":"$16","js":"$17"}}}],["$","div",null,{"className":"mt-12 bg-gray-800 rounded-lg p-6","children":[["$","h2",null,{"className":"text-xl font-bold mb-4","children":"‰ΩøÁî®ÊñπÊ≥ï"}],["$","ol",null,{"className":"space-y-3 text-gray-300","children":[["$","li",null,{"className":"flex gap-3","children":[["$","span",null,{"className":"text-blue-400 font-bold","children":"1."}],["$","span",null,{"children":"‰∏ä„ÅÆ„Çø„Éñ„Åã„ÇâHTML„ÄÅCSS„ÄÅJavaScript„ÅÆ„Ç≥„Éº„Éâ„Çí„Åù„Çå„Åû„Çå„Ç≥„Éî„Éº„Åó„Åæ„Åô„ÄÇ"}]]}],["$","li",null,{"className":"flex gap-3","children":[["$","span",null,{"className":"text-blue-400 font-bold","children":"2."}],["$","span",null,{"children":"Êñ∞„Åó„ÅÑHTML„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„ÄÅHTML„Ç≥„Éº„Éâ„ÇíË≤º„Çä‰ªò„Åë„Åæ„Åô„ÄÇ"}]]}],["$","li",null,{"className":"flex gap-3","children":[["$","span",null,{"className":"text-blue-400 font-bold","children":"3."}],["$","span",null,{"children":"CSS„Ç≥„Éº„Éâ„Çí<style>„Çø„Ç∞ÂÜÖ„Å´Ë≤º„Çä‰ªò„Åë„Çã„Åã„ÄÅÂà•„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶‰øùÂ≠ò„Åó„Å¶„É™„É≥„ÇØ„Åó„Åæ„Åô„ÄÇ"}]]}],["$","li",null,{"className":"flex gap-3","children":[["$","span",null,{"className":"text-blue-400 font-bold","children":"4."}],["$","span",null,{"children":"JavaScript„Ç≥„Éº„Éâ„Çí<script>„Çø„Ç∞ÂÜÖ„Å´Ë≤º„Çä‰ªò„Åë„Çã„Åã„ÄÅÂà•„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶‰øùÂ≠ò„Åó„Å¶„É™„É≥„ÇØ„Åó„Åæ„Åô„ÄÇ"}]]}],["$","li",null,{"className":"flex gap-3","children":[["$","span",null,{"className":"text-blue-400 font-bold","children":"5."}],["$","span",null,{"children":"ÂøÖË¶Å„Å´Âøú„Åò„Å¶„ÄÅ„ÉÜ„Ç≠„Çπ„Éà„ÇÑÁîªÂÉè„ÄÅËâ≤„Å™„Å©„Çí„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Åó„Å¶„Åî‰ΩøÁî®„Åè„Å†„Åï„ÅÑ„ÄÇ"}]]}]]}],["$","div",null,{"className":"mt-6 p-4 bg-blue-900/30 border border-blue-600 rounded","children":[["$","p",null,{"className":"text-blue-400 mb-2","children":"üìö Âàù„ÇÅ„Å¶„ÅÆÊñπ„Å∏"}],["$","p",null,{"className":"text-gray-300 text-sm","children":["HTML„ÇÑCSS„ÅåÂàù„ÇÅ„Å¶„ÅÆÊñπ„ÅØ„ÄÅ",["$","$L12",null,{"href":"/note/webpage-temp/guide","className":"text-blue-400 hover:text-blue-300 underline","children":"ÂàùÂøÉËÄÖÂêë„ÅëWebÂà∂‰ΩúÂ≠¶Áøí„Ç¨„Ç§„Éâ"}],"„Çí„ÅîË¶ß„Åè„Å†„Åï„ÅÑ„ÄÇÂÆüÈöõ„Å´Êâã„ÇíÂãï„Åã„Åó„Å™„Åå„ÇâÂ≠¶„Åπ„ÇãË©≥„Åó„ÅÑÊâãÈ†Ü„ÇíËß£Ë™¨„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ"]}]]}]]}],["$","div",null,{"className":"mt-8 bg-yellow-900/30 border border-yellow-600 rounded-lg p-6","children":[["$","h3",null,{"className":"text-yellow-400 font-bold mb-2","children":"Ê≥®ÊÑè‰∫ãÈ†Ö"}],["$","ul",null,{"className":"space-y-2 text-gray-300 text-sm","children":[["$","li",null,{"children":"‚Ä¢ „Åì„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅØÂ≠¶Áøí„ÉªÂèÇËÄÉÁî®„Å®„Åó„Å¶Êèê‰æõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ"}],["$","li",null,{"children":"‚Ä¢ ÂÆüÈöõ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß‰ΩøÁî®„Åô„ÇãÈöõ„ÅØ„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÇÑ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅÆÊúÄÈÅ©Âåñ„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"}],["$","li",null,{"children":"‚Ä¢ ÁîªÂÉè„ÇÑ„Ç¢„Ç§„Ç≥„É≥„ÅØÂÆüÈöõ„ÅÆ„ÇÇ„ÅÆ„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶„Åî‰ΩøÁî®„Åè„Å†„Åï„ÅÑ„ÄÇ"}],["$","li",null,{"children":"‚Ä¢ „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åô„Åå„ÄÅÂÆüÊ©ü„Åß„ÅÆ„ÉÜ„Çπ„Éà„ÇíÊé®Â•®„Åó„Åæ„Åô„ÄÇ"}]]}]]}],["$","div",null,{"className":"mt-8 text-center","children":["$","$L12",null,{"href":"/note/webpage-temp","className":"inline-block px-6 py-3 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors","children":"„ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß„Å∏Êàª„Çã"}]}]]}]}]
9:null
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Maita Tomoya Dev IO"}],["$","meta","1",{"name":"description","content":"Á±≥Áî∞Êô∫Âìâ„ÅÆÊäÄË°ì„Éñ„É≠„Ç∞„ÄÇ„Ç≠„É£„ÉÉ„ÉÅ„Ç¢„ÉÉ„Éó„Åó„Åü„Åì„Å®„Çí„É°„É¢„Åó„Åæ„Åô„ÄÇ"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
