name: Copilot Assistant Bot

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  copilot-assist:
    # /copilot„Ç≥„Éû„É≥„Éâ„ÅßËµ∑Âãï
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.issue.pull_request == null && startsWith(github.event.comment.body, '/copilot'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install GitHub CLI extensions
        run: |
          gh extension install github/gh-copilot || true
      
      - name: Get Issue Details
        id: issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ISSUE_NUMBER=${{ github.event.inputs.issue_number }}
          else
            ISSUE_NUMBER=${{ github.event.issue.number }}
          fi
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          # IssueÊÉÖÂ†±„ÇíÂèñÂæó
          gh issue view $ISSUE_NUMBER --json title,body,labels > issue.json
          
          ISSUE_TITLE=$(jq -r '.title' issue.json)
          ISSUE_BODY=$(jq -r '.body' issue.json)
          
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
      
      - name: Generate Implementation Plan
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Copilot CLI„ÅßÂÆüË£ÖË®àÁîª„ÇíÁîüÊàê
          ISSUE_NUMBER=${{ steps.issue.outputs.issue_number }}
          ISSUE_TITLE="${{ steps.issue.outputs.issue_title }}"
          
          # ÂÆüË£ÖÊèêÊ°à„ÇíÁîüÊàê
          gh copilot suggest "
          Create implementation for: $ISSUE_TITLE
          
          Requirements from issue #$ISSUE_NUMBER:
          $(cat issue.json | jq -r '.body')
          
          Provide:
          1. File structure
          2. Implementation code
          3. Tests
          " > implementation_plan.md || echo "Copilot suggestion failed" > implementation_plan.md
          
          # ÂÆüË£ÖË®àÁîª„ÇíIssue„Å´„Ç≥„É°„É≥„Éà
          cat > comment.md << EOF
          ## ü§ñ Copilot Implementation Plan
          
          Based on the issue requirements, here's the suggested implementation:
          
          \`\`\`markdown
          $(cat implementation_plan.md)
          \`\`\`
          
          ### üìù Next Steps:
          1. Review the implementation plan
          2. Run locally: `.github/scripts/copilot-workflow.sh ${{ steps.issue.outputs.issue_number }}`
          3. Create PR when ready
          
          ---
          *Generated by GitHub Copilot Pro ‚Ä¢ No API costs incurred*
EOF
          
          gh issue comment $ISSUE_NUMBER --body-file comment.md
      
      - name: Create Template Files
        run: |
          ISSUE_NUMBER=${{ steps.issue.outputs.issue_number }}
          
          # ÂÆüË£ÖÁî®„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰ΩúÊàê
          mkdir -p .copilot-templates
          
          cat > .copilot-templates/implementation.ts << 'EOF'
          // Issue #${{ steps.issue.outputs.issue_number }}: ${{ steps.issue.outputs.issue_title }}
          // TODO: Implement based on the requirements
          
          /**
           * Implementation for: ${{ steps.issue.outputs.issue_title }}
           * 
           * Open this file in VS Code with Copilot enabled
           * Copilot will suggest implementations based on the comments
           */
          
          // Requirement: $(cat issue.json | jq -r '.body' | head -n 5)
          
          export function implement() {
            // Copilot will suggest code here
          }
          EOF
          
          cat > .copilot-templates/test.spec.ts << 'EOF'
          // Tests for Issue #${{ steps.issue.outputs.issue_number }}
          
          describe('${{ steps.issue.outputs.issue_title }}', () => {
            it('should implement the required functionality', () => {
              // Copilot will suggest tests
            });
          });
          EOF
          
          # „Éñ„É©„É≥„ÉÅ„Çí‰ΩúÊàê
          BRANCH_NAME="copilot-issue-$ISSUE_NUMBER"
          git checkout -b $BRANCH_NAME
          
          # „ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí„Ç≥„Éü„ÉÉ„Éà
          git config user.name "Copilot Assistant[bot]"
          git config user.email "copilot[bot]@users.noreply.github.com"
          
          git add .copilot-templates
          git commit -m "chore: Add Copilot templates for issue #$ISSUE_NUMBER"
          git push -u origin $BRANCH_NAME
          
      - name: Create Draft PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER=${{ steps.issue.outputs.issue_number }}
          BRANCH_NAME="copilot-issue-$ISSUE_NUMBER"
          
          gh pr create \
            --draft \
            --title "ü§ñ [Copilot] ${{ steps.issue.outputs.issue_title }}" \
            --body "## üìã Related Issue
            
            Closes #$ISSUE_NUMBER
            
            ## ü§ñ Copilot Templates Created
            
            Template files have been created in \`.copilot-templates/\`:
            - \`implementation.ts\` - Main implementation file
            - \`test.spec.ts\` - Test file
            
            ## üìù How to Complete
            
            1. **Open in VS Code with Copilot**:
               \`\`\`bash
               code .copilot-templates/implementation.ts
               \`\`\`
            
            2. **Let Copilot generate code**:
               - Start typing and Copilot will suggest implementations
               - Use Copilot Chat for more complex generations
            
            3. **Move generated code to appropriate locations**
            
            4. **Mark PR as ready for review**
            
            ---
            
            *This PR was created by GitHub Copilot Pro integration*
            *No additional API costs - uses your existing Copilot Pro subscription*" \
            --head $BRANCH_NAME \
            --base main